{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v12.0.1 (2024-11-28)\n * @module highcharts/modules/treemap\n * @requires highcharts\n *\n * (c) 2014-2024 Highsoft AS\n * Authors: Jon Arild Nygard / Oystein Moseng\n *\n * License: www.highcharts.com/license\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"highcharts\"), require(\"highcharts\")[\"Templating\"], require(\"highcharts\")[\"Color\"], require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"SVGElement\"]);\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"highcharts/treemap\", [[\"highcharts/highcharts\"], [\"highcharts/highcharts\",\"Templating\"], [\"highcharts/highcharts\",\"Color\"], [\"highcharts/highcharts\",\"SeriesRegistry\"], [\"highcharts/highcharts\",\"SVGElement\"]], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"highcharts/treemap\"] = factory(require(\"highcharts\"), require(\"highcharts\")[\"Templating\"], require(\"highcharts\")[\"Color\"], require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"SVGElement\"]);\n\telse\n\t\troot[\"Highcharts\"] = factory(root[\"Highcharts\"], root[\"Highcharts\"][\"Templating\"], root[\"Highcharts\"][\"Color\"], root[\"Highcharts\"][\"SeriesRegistry\"], root[\"Highcharts\"][\"SVGElement\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__944__, __WEBPACK_EXTERNAL_MODULE__984__, __WEBPACK_EXTERNAL_MODULE__620__, __WEBPACK_EXTERNAL_MODULE__512__, __WEBPACK_EXTERNAL_MODULE__28__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 620:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__620__;\n\n/***/ }),\n\n/***/ 28:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__28__;\n\n/***/ }),\n\n/***/ 512:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__512__;\n\n/***/ }),\n\n/***/ 984:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__984__;\n\n/***/ }),\n\n/***/ 944:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__944__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__webpack_require__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ treemap_src)\n});\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\"],\"commonjs\":[\"highcharts\"],\"commonjs2\":[\"highcharts\"],\"root\":[\"Highcharts\"]}\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_ = __webpack_require__(944);\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default = /*#__PURE__*/__webpack_require__.n(highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_);\n;// ./code/es-modules/Extensions/Breadcrumbs/BreadcrumbsDefaults.js\n/* *\n *\n *  Highcharts Breadcrumbs module\n *\n *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Constants\n *\n * */\n/**\n * @optionparent lang\n */\nconst lang = {\n    /**\n     * @since   10.0.0\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    mainBreadcrumb: 'Main'\n};\n/**\n * Options for breadcrumbs. Breadcrumbs general options are defined in\n * `navigation.breadcrumbs`. Specific options for drilldown are set in\n * `drilldown.breadcrumbs` and for tree-like series traversing, in\n * `plotOptions[series].breadcrumbs`.\n *\n * @since        10.0.0\n * @product      highcharts\n * @optionparent navigation.breadcrumbs\n */\nconst options = {\n    /**\n     * A collection of attributes for the buttons. The object takes SVG\n     * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n     * a collection of CSS properties for the text.\n     *\n     * The object can also be extended with states, so you can set\n     * presentational options for `hover`, `select` or `disabled` button\n     * states.\n     *\n     * @sample {highcharts} highcharts/breadcrumbs/single-button\n     *         Themed, single button\n     *\n     * @type    {Highcharts.SVGAttributes}\n     * @since   10.0.0\n     * @product highcharts\n     */\n    buttonTheme: {\n        /** @ignore */\n        fill: 'none',\n        /** @ignore */\n        height: 18,\n        /** @ignore */\n        padding: 2,\n        /** @ignore */\n        'stroke-width': 0,\n        /** @ignore */\n        zIndex: 7,\n        /** @ignore */\n        states: {\n            select: {\n                fill: 'none'\n            }\n        },\n        style: {\n            color: \"#334eff\" /* Palette.highlightColor80 */\n        }\n    },\n    /**\n     * The default padding for each button and separator in each direction.\n     *\n     * @type  {number}\n     * @since 10.0.0\n     */\n    buttonSpacing: 5,\n    /**\n     * Fires when clicking on the breadcrumbs button. Two arguments are\n     * passed to the function. First breadcrumb button as an SVG element.\n     * Second is the breadcrumbs class, containing reference to the chart,\n     * series etc.\n     *\n     * ```js\n     * click: function(button, breadcrumbs) {\n     *   console.log(button);\n     * }\n     * ```\n     *\n     * Return false to stop default buttons click action.\n     *\n     * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n     * @since     10.0.0\n     * @apioption navigation.breadcrumbs.events.click\n     */\n    /**\n     * When the breadcrumbs are floating, the plot area will not move to\n     * make space for it. By default, the chart will not make space for the\n     * buttons. This property won't work when positioned in the middle.\n     *\n     * @sample highcharts/breadcrumbs/single-button\n     *         Floating button\n     *\n     * @type  {boolean}\n     * @since 10.0.0\n     */\n    floating: false,\n    /**\n     * A format string for the breadcrumbs button. Variables are enclosed by\n     * curly brackets. Available values are passed in the declared point\n     * options.\n     *\n     * @type      {string|undefined}\n     * @since 10.0.0\n     * @default   undefined\n     * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n     *          values in breadcrumb button.\n     */\n    format: void 0,\n    /**\n     * Callback function to format the breadcrumb text from scratch.\n     *\n     * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n     * @since     10.0.0\n     * @default   undefined\n     * @apioption navigation.breadcrumbs.formatter\n     */\n    /**\n     * What box to align the button to. Can be either `plotBox` or\n     * `spacingBox`.\n     *\n     * @type    {Highcharts.ButtonRelativeToValue}\n     * @default plotBox\n     * @since   10.0.0\n     * @product highcharts highmaps\n     */\n    relativeTo: 'plotBox',\n    /**\n     * Whether to reverse the order of buttons. This is common in Arabic\n     * and Hebrew.\n     *\n     * @sample {highcharts} highcharts/breadcrumbs/rtl\n     *         Breadcrumbs in RTL\n     *\n     * @type  {boolean}\n     * @since 10.2.0\n     */\n    rtl: false,\n    /**\n     * Positioning for the button row. The breadcrumbs buttons will be\n     * aligned properly for the default chart layout (title,  subtitle,\n     * legend, range selector) for the custom chart layout set the position\n     * properties.\n     *\n     * @sample  {highcharts} highcharts/breadcrumbs/single-button\n     *          Single, right aligned button\n     *\n     * @type    {Highcharts.BreadcrumbsAlignOptions}\n     * @since   10.0.0\n     * @product highcharts highmaps\n     */\n    position: {\n        /**\n         * Horizontal alignment of the breadcrumbs buttons.\n         *\n         * @type {Highcharts.AlignValue}\n         */\n        align: 'left',\n        /**\n         * Vertical alignment of the breadcrumbs buttons.\n         *\n         * @type {Highcharts.VerticalAlignValue}\n         */\n        verticalAlign: 'top',\n        /**\n         * The X offset of the breadcrumbs button group.\n         *\n         * @type {number}\n         */\n        x: 0,\n        /**\n         * The Y offset of the breadcrumbs button group. When `undefined`,\n         * and `floating` is `false`, the `y` position is adapted so that\n         * the breadcrumbs are rendered outside the target area.\n         *\n         * @type {number|undefined}\n         */\n        y: void 0\n    },\n    /**\n     * Options object for Breadcrumbs separator.\n     *\n     * @since 10.0.0\n     */\n    separator: {\n        /**\n         * @type    {string}\n         * @since   10.0.0\n         * @product highcharts\n         */\n        text: '/',\n        /**\n         * CSS styles for the breadcrumbs separator.\n         *\n         * In styled mode, the breadcrumbs separators are styled by the\n         * `.highcharts-separator` rule with its different states.\n         *  @type  {Highcharts.CSSObject}\n         *  @since 10.0.0\n         */\n        style: {\n            color: \"#666666\" /* Palette.neutralColor60 */,\n            fontSize: '0.8em'\n        }\n    },\n    /**\n     * Show full path or only a single button.\n     *\n     * @sample {highcharts} highcharts/breadcrumbs/single-button\n     *         Single, styled button\n     *\n     * @type  {boolean}\n     * @since 10.0.0\n     */\n    showFullPath: true,\n    /**\n     * CSS styles for all breadcrumbs.\n     *\n     * In styled mode, the breadcrumbs buttons are styled by the\n     * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n     * different states.\n     *\n     * @type  {Highcharts.SVGAttributes}\n     * @since 10.0.0\n     */\n    style: {},\n    /**\n     * Whether to use HTML to render the breadcrumbs items texts.\n     *\n     * @type  {boolean}\n     * @since 10.0.0\n     */\n    useHTML: false,\n    /**\n     * The z index of the breadcrumbs group.\n     *\n     * @type  {number}\n     * @since 10.0.0\n     */\n    zIndex: 7\n};\n/* *\n *\n *  Default Export\n *\n * */\nconst BreadcrumbsDefaults = {\n    lang,\n    options\n};\n/* harmony default export */ const Breadcrumbs_BreadcrumbsDefaults = (BreadcrumbsDefaults);\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"Templating\"],\"commonjs\":[\"highcharts\",\"Templating\"],\"commonjs2\":[\"highcharts\",\"Templating\"],\"root\":[\"Highcharts\",\"Templating\"]}\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_ = __webpack_require__(984);\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default = /*#__PURE__*/__webpack_require__.n(highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_);\n;// ./code/es-modules/Extensions/Breadcrumbs/Breadcrumbs.js\n/* *\n *\n *  Highcharts Breadcrumbs module\n *\n *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { format } = (highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default());\n\nconst { composed } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n\nconst { addEvent, defined, extend, fireEvent, isString, merge, objectEach, pick, pushUnique } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Shift the drillUpButton to make the space for resetZoomButton, #8095.\n * @private\n */\nfunction onChartAfterShowResetZoom() {\n    const chart = this;\n    if (chart.breadcrumbs) {\n        const bbox = chart.resetZoomButton &&\n            chart.resetZoomButton.getBBox(), breadcrumbsOptions = chart.breadcrumbs.options;\n        if (bbox &&\n            breadcrumbsOptions.position.align === 'right' &&\n            breadcrumbsOptions.relativeTo === 'plotBox') {\n            chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n        }\n    }\n}\n/**\n * Remove resize/afterSetExtremes at chart destroy.\n * @private\n */\nfunction onChartDestroy() {\n    if (this.breadcrumbs) {\n        this.breadcrumbs.destroy();\n        this.breadcrumbs = void 0;\n    }\n}\n/**\n * Logic for making space for the buttons above the plot area\n * @private\n */\nfunction onChartGetMargins() {\n    const breadcrumbs = this.breadcrumbs;\n    if (breadcrumbs &&\n        !breadcrumbs.options.floating &&\n        breadcrumbs.level) {\n        const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, breadcrumbsHeight = ((buttonTheme.height || 0) +\n            2 * (buttonTheme.padding || 0) +\n            breadcrumbsOptions.buttonSpacing), verticalAlign = breadcrumbsOptions.position.verticalAlign;\n        if (verticalAlign === 'bottom') {\n            this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n            breadcrumbs.yOffset = breadcrumbsHeight;\n        }\n        else if (verticalAlign !== 'middle') {\n            this.plotTop += breadcrumbsHeight;\n            breadcrumbs.yOffset = -breadcrumbsHeight;\n        }\n        else {\n            breadcrumbs.yOffset = void 0;\n        }\n    }\n}\n/**\n * @private\n */\nfunction onChartRedraw() {\n    this.breadcrumbs && this.breadcrumbs.redraw();\n}\n/**\n * After zooming out, shift the drillUpButton to the previous position, #8095.\n * @private\n */\nfunction onChartSelection(event) {\n    if (event.resetSelection === true &&\n        this.breadcrumbs) {\n        this.breadcrumbs.alignBreadcrumbsGroup();\n    }\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * The Breadcrumbs class\n *\n * @private\n * @class\n * @name Highcharts.Breadcrumbs\n *\n * @param {Highcharts.Chart} chart\n *        Chart object\n * @param {Highcharts.Options} userOptions\n *        User options\n */\nclass Breadcrumbs {\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    static compose(ChartClass, highchartsDefaultOptions) {\n        if (pushUnique(composed, 'Breadcrumbs')) {\n            addEvent(ChartClass, 'destroy', onChartDestroy);\n            addEvent(ChartClass, 'afterShowResetZoom', onChartAfterShowResetZoom);\n            addEvent(ChartClass, 'getMargins', onChartGetMargins);\n            addEvent(ChartClass, 'redraw', onChartRedraw);\n            addEvent(ChartClass, 'selection', onChartSelection);\n            // Add language support.\n            extend(highchartsDefaultOptions.lang, Breadcrumbs_BreadcrumbsDefaults.lang);\n        }\n    }\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(chart, userOptions) {\n        this.elementList = {};\n        this.isDirty = true;\n        this.level = 0;\n        this.list = [];\n        const chartOptions = merge(chart.options.drilldown &&\n            chart.options.drilldown.drillUpButton, Breadcrumbs.defaultOptions, chart.options.navigation && chart.options.navigation.breadcrumbs, userOptions);\n        this.chart = chart;\n        this.options = chartOptions || {};\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Update Breadcrumbs properties, like level and list.\n     *\n     * @function Highcharts.Breadcrumbs#updateProperties\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    updateProperties(list) {\n        this.setList(list);\n        this.setLevel();\n        this.isDirty = true;\n    }\n    /**\n     * Set breadcrumbs list.\n     * @function Highcharts.Breadcrumbs#setList\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.BreadcrumbsOptions} list\n     *        Breadcrumbs list.\n     */\n    setList(list) {\n        this.list = list;\n    }\n    /**\n     * Calculate level on which chart currently is.\n     *\n     * @function Highcharts.Breadcrumbs#setLevel\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    setLevel() {\n        this.level = this.list.length && this.list.length - 1;\n    }\n    /**\n     * Get Breadcrumbs level\n     *\n     * @function Highcharts.Breadcrumbs#getLevel\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    getLevel() {\n        return this.level;\n    }\n    /**\n     * Default button text formatter.\n     *\n     * @function Highcharts.Breadcrumbs#getButtonText\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.Breadcrumbs} breadcrumb\n     *        Breadcrumb.\n     * @return {string}\n     *         Formatted text.\n     */\n    getButtonText(breadcrumb) {\n        const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options, lang = chart.options.lang, textFormat = pick(breadcrumbsOptions.format, breadcrumbsOptions.showFullPath ?\n            '{level.name}' : '← {level.name}'), defaultText = lang && pick(lang.drillUpText, lang.mainBreadcrumb);\n        let returnText = breadcrumbsOptions.formatter &&\n            breadcrumbsOptions.formatter(breadcrumb) ||\n            format(textFormat, { level: breadcrumb.levelOptions }, chart) || '';\n        if (((isString(returnText) &&\n            !returnText.length) ||\n            returnText === '← ') &&\n            defined(defaultText)) {\n            returnText = !breadcrumbsOptions.showFullPath ?\n                '← ' + defaultText :\n                defaultText;\n        }\n        return returnText;\n    }\n    /**\n     * Redraw.\n     *\n     * @function Highcharts.Breadcrumbs#redraw\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    redraw() {\n        if (this.isDirty) {\n            this.render();\n        }\n        if (this.group) {\n            this.group.align();\n        }\n        this.isDirty = false;\n    }\n    /**\n     * Create a group, then draw breadcrumbs together with the separators.\n     *\n     * @function Highcharts.Breadcrumbs#render\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    render() {\n        const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options;\n        // A main group for the breadcrumbs.\n        if (!breadcrumbs.group && breadcrumbsOptions) {\n            breadcrumbs.group = chart.renderer\n                .g('breadcrumbs-group')\n                .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                .attr({\n                zIndex: breadcrumbsOptions.zIndex\n            })\n                .add();\n        }\n        // Draw breadcrumbs.\n        if (breadcrumbsOptions.showFullPath) {\n            this.renderFullPathButtons();\n        }\n        else {\n            this.renderSingleButton();\n        }\n        this.alignBreadcrumbsGroup();\n    }\n    /**\n     * Draw breadcrumbs together with the separators.\n     *\n     * @function Highcharts.Breadcrumbs#renderFullPathButtons\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    renderFullPathButtons() {\n        // Make sure that only one type of button is visible.\n        this.destroySingleButton();\n        this.resetElementListState();\n        this.updateListElements();\n        this.destroyListElements();\n    }\n    /**\n     * Render Single button - when showFullPath is not used. The button is\n     * similar to the old drillUpButton\n     *\n     * @function Highcharts.Breadcrumbs#renderSingleButton\n     * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n     */\n    renderSingleButton() {\n        const breadcrumbs = this, chart = breadcrumbs.chart, list = breadcrumbs.list, breadcrumbsOptions = breadcrumbs.options, buttonSpacing = breadcrumbsOptions.buttonSpacing;\n        // Make sure that only one type of button is visible.\n        this.destroyListElements();\n        // Draw breadcrumbs. Initial position for calculating the breadcrumbs\n        // group.\n        const posX = breadcrumbs.group ?\n            breadcrumbs.group.getBBox().width :\n            buttonSpacing, posY = buttonSpacing;\n        const previousBreadcrumb = list[list.length - 2];\n        if (!chart.drillUpButton && (this.level > 0)) {\n            chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n        }\n        else if (chart.drillUpButton) {\n            if (this.level > 0) {\n                // Update button.\n                this.updateSingleButton();\n            }\n            else {\n                this.destroySingleButton();\n            }\n        }\n    }\n    /**\n     * Update group position based on align and it's width.\n     *\n     * @function Highcharts.Breadcrumbs#renderSingleButton\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    alignBreadcrumbsGroup(xOffset) {\n        const breadcrumbs = this;\n        if (breadcrumbs.group) {\n            const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, positionOptions = breadcrumbsOptions.position, alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                void 0 :\n                'plotBox'), bBox = breadcrumbs.group.getBBox(), additionalSpace = 2 * (buttonTheme.padding || 0) +\n                breadcrumbsOptions.buttonSpacing;\n            // Store positionOptions\n            positionOptions.width = bBox.width + additionalSpace;\n            positionOptions.height = bBox.height + additionalSpace;\n            const newPositions = merge(positionOptions);\n            // Add x offset if specified.\n            if (xOffset) {\n                newPositions.x += xOffset;\n            }\n            if (breadcrumbs.options.rtl) {\n                newPositions.x += positionOptions.width;\n            }\n            newPositions.y = pick(newPositions.y, this.yOffset, 0);\n            breadcrumbs.group.align(newPositions, true, alignTo);\n        }\n    }\n    /**\n     * Render a button.\n     *\n     * @function Highcharts.Breadcrumbs#renderButton\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.Breadcrumbs} breadcrumb\n     *        Current breadcrumb\n     * @param {Highcharts.Breadcrumbs} posX\n     *        Initial horizontal position\n     * @param {Highcharts.Breadcrumbs} posY\n     *        Initial vertical position\n     * @return {SVGElement|void}\n     *        Returns the SVG button\n     */\n    renderButton(breadcrumb, posX, posY) {\n        const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n        const button = chart.renderer\n            .button(breadcrumbs.getButtonText(breadcrumb), posX, posY, function (e) {\n            // Extract events from button object and call\n            const buttonEvents = breadcrumbsOptions.events &&\n                breadcrumbsOptions.events.click;\n            let callDefaultEvent;\n            if (buttonEvents) {\n                callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n            }\n            // (difference in behaviour of showFullPath and drillUp)\n            if (callDefaultEvent !== false) {\n                // For single button we are not going to the button\n                // level, but the one level up\n                if (!breadcrumbsOptions.showFullPath) {\n                    e.newLevel = breadcrumbs.level - 1;\n                }\n                else {\n                    e.newLevel = breadcrumb.level;\n                }\n                fireEvent(breadcrumbs, 'up', e);\n            }\n        }, buttonTheme)\n            .addClass('highcharts-breadcrumbs-button')\n            .add(breadcrumbs.group);\n        if (!chart.styledMode) {\n            button.attr(breadcrumbsOptions.style);\n        }\n        return button;\n    }\n    /**\n     * Render a separator.\n     *\n     * @function Highcharts.Breadcrumbs#renderSeparator\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.Breadcrumbs} posX\n     *        Initial horizontal position\n     * @param {Highcharts.Breadcrumbs} posY\n     *        Initial vertical position\n     * @return {Highcharts.SVGElement}\n     *        Returns the SVG button\n     */\n    renderSeparator(posX, posY) {\n        const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, separatorOptions = breadcrumbsOptions.separator;\n        const separator = chart.renderer\n            .label(separatorOptions.text, posX, posY, void 0, void 0, void 0, false)\n            .addClass('highcharts-breadcrumbs-separator')\n            .add(breadcrumbs.group);\n        if (!chart.styledMode) {\n            separator.css(separatorOptions.style);\n        }\n        return separator;\n    }\n    /**\n     * Update.\n     * @function Highcharts.Breadcrumbs#update\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.BreadcrumbsOptions} options\n     *        Breadcrumbs class.\n     * @param {boolean} redraw\n     *        Redraw flag\n     */\n    update(options) {\n        merge(true, this.options, options);\n        this.destroy();\n        this.isDirty = true;\n    }\n    /**\n     * Update button text when the showFullPath set to false.\n     * @function Highcharts.Breadcrumbs#updateSingleButton\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    updateSingleButton() {\n        const chart = this.chart, currentBreadcrumb = this.list[this.level - 1];\n        if (chart.drillUpButton) {\n            chart.drillUpButton.attr({\n                text: this.getButtonText(currentBreadcrumb)\n            });\n        }\n    }\n    /**\n     * Destroy the chosen breadcrumbs group\n     *\n     * @function Highcharts.Breadcrumbs#destroy\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    destroy() {\n        this.destroySingleButton();\n        // Destroy elements one by one. It's necessary because\n        // g().destroy() does not remove added HTML\n        this.destroyListElements(true);\n        // Then, destroy the group itself.\n        if (this.group) {\n            this.group.destroy();\n        }\n        this.group = void 0;\n    }\n    /**\n     * Destroy the elements' buttons and separators.\n     *\n     * @function Highcharts.Breadcrumbs#destroyListElements\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    destroyListElements(force) {\n        const elementList = this.elementList;\n        objectEach(elementList, (element, level) => {\n            if (force ||\n                !elementList[level].updated) {\n                element = elementList[level];\n                element.button && element.button.destroy();\n                element.separator && element.separator.destroy();\n                delete element.button;\n                delete element.separator;\n                delete elementList[level];\n            }\n        });\n        if (force) {\n            this.elementList = {};\n        }\n    }\n    /**\n     * Destroy the single button if exists.\n     *\n     * @function Highcharts.Breadcrumbs#destroySingleButton\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    destroySingleButton() {\n        if (this.chart.drillUpButton) {\n            this.chart.drillUpButton.destroy();\n            this.chart.drillUpButton = void 0;\n        }\n    }\n    /**\n     * Reset state for all buttons in elementList.\n     *\n     * @function Highcharts.Breadcrumbs#resetElementListState\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    resetElementListState() {\n        objectEach(this.elementList, (element) => {\n            element.updated = false;\n        });\n    }\n    /**\n     * Update rendered elements inside the elementList.\n     *\n     * @function Highcharts.Breadcrumbs#updateListElements\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    updateListElements() {\n        const breadcrumbs = this, elementList = breadcrumbs.elementList, buttonSpacing = breadcrumbs.options.buttonSpacing, posY = buttonSpacing, list = breadcrumbs.list, rtl = breadcrumbs.options.rtl, rtlFactor = rtl ? -1 : 1, updateXPosition = function (element, spacing) {\n            return rtlFactor * element.getBBox().width +\n                rtlFactor * spacing;\n        }, adjustToRTL = function (element, posX, posY) {\n            element.translate(posX - element.getBBox().width, posY);\n        };\n        // Initial position for calculating the breadcrumbs group.\n        let posX = breadcrumbs.group ?\n            updateXPosition(breadcrumbs.group, buttonSpacing) :\n            buttonSpacing, currentBreadcrumb, breadcrumb;\n        for (let i = 0, iEnd = list.length; i < iEnd; ++i) {\n            const isLast = i === iEnd - 1;\n            let button, separator;\n            breadcrumb = list[i];\n            if (elementList[breadcrumb.level]) {\n                currentBreadcrumb = elementList[breadcrumb.level];\n                button = currentBreadcrumb.button;\n                // Render a separator if it was not created before.\n                if (!currentBreadcrumb.separator &&\n                    !isLast) {\n                    // Add spacing for the next separator\n                    posX += rtlFactor * buttonSpacing;\n                    currentBreadcrumb.separator =\n                        breadcrumbs.renderSeparator(posX, posY);\n                    if (rtl) {\n                        adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                    }\n                    posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                }\n                else if (currentBreadcrumb.separator &&\n                    isLast) {\n                    currentBreadcrumb.separator.destroy();\n                    delete currentBreadcrumb.separator;\n                }\n                elementList[breadcrumb.level].updated = true;\n            }\n            else {\n                // Render a button.\n                button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                if (rtl) {\n                    adjustToRTL(button, posX, posY);\n                }\n                posX += updateXPosition(button, buttonSpacing);\n                // Render a separator.\n                if (!isLast) {\n                    separator = breadcrumbs.renderSeparator(posX, posY);\n                    if (rtl) {\n                        adjustToRTL(separator, posX, posY);\n                    }\n                    posX += updateXPosition(separator, buttonSpacing);\n                }\n                elementList[breadcrumb.level] = {\n                    button,\n                    separator,\n                    updated: true\n                };\n            }\n            if (button) {\n                button.setState(isLast ? 2 : 0);\n            }\n        }\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nBreadcrumbs.defaultOptions = Breadcrumbs_BreadcrumbsDefaults.options;\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Breadcrumbs_Breadcrumbs = (Breadcrumbs);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Callback function to react on button clicks.\n *\n * @callback Highcharts.BreadcrumbsClickCallbackFunction\n *\n * @param {Highcharts.Event} event\n * Event.\n *\n * @param {Highcharts.BreadcrumbOptions} options\n * Breadcrumb options.\n *\n * @param {global.Event} e\n * Event arguments.\n */\n/**\n * Callback function to format the breadcrumb text from scratch.\n *\n * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n *\n * @param {Highcharts.Event} event\n * Event.\n *\n * @param {Highcharts.BreadcrumbOptions} options\n * Breadcrumb options.\n *\n * @return {string}\n * Formatted text or false\n */\n/**\n * Options for the one breadcrumb.\n *\n * @interface Highcharts.BreadcrumbOptions\n */\n/**\n * Level connected to a specific breadcrumb.\n * @name Highcharts.BreadcrumbOptions#level\n * @type {number}\n */\n/**\n * Options for series or point connected to a specific breadcrumb.\n * @name Highcharts.BreadcrumbOptions#levelOptions\n * @type {SeriesOptions|PointOptionsObject}\n */\n/**\n * Options for aligning breadcrumbs group.\n *\n * @interface Highcharts.BreadcrumbsAlignOptions\n */\n/**\n * Align of a Breadcrumb group.\n * @default right\n * @name Highcharts.BreadcrumbsAlignOptions#align\n * @type {AlignValue}\n */\n/**\n * Vertical align of a Breadcrumb group.\n * @default top\n * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n * @type {VerticalAlignValue}\n */\n/**\n * X offset of a Breadcrumbs group.\n * @name Highcharts.BreadcrumbsAlignOptions#x\n * @type {number}\n */\n/**\n * Y offset of a Breadcrumbs group.\n * @name Highcharts.BreadcrumbsAlignOptions#y\n * @type {number}\n */\n/**\n * Options for all breadcrumbs.\n *\n * @interface Highcharts.BreadcrumbsOptions\n */\n/**\n * Button theme.\n * @name Highcharts.BreadcrumbsOptions#buttonTheme\n * @type { SVGAttributes | undefined }\n */\n(''); // Keeps doclets above in JS file\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"Color\"],\"commonjs\":[\"highcharts\",\"Color\"],\"commonjs2\":[\"highcharts\",\"Color\"],\"root\":[\"Highcharts\",\"Color\"]}\nvar highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_ = __webpack_require__(620);\nvar highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default = /*#__PURE__*/__webpack_require__.n(highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_);\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"SeriesRegistry\"],\"commonjs\":[\"highcharts\",\"SeriesRegistry\"],\"commonjs2\":[\"highcharts\",\"SeriesRegistry\"],\"root\":[\"Highcharts\",\"SeriesRegistry\"]}\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_ = __webpack_require__(512);\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default = /*#__PURE__*/__webpack_require__.n(highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_);\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"SVGElement\"],\"commonjs\":[\"highcharts\",\"SVGElement\"],\"commonjs2\":[\"highcharts\",\"SVGElement\"],\"root\":[\"Highcharts\",\"SVGElement\"]}\nvar highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_ = __webpack_require__(28);\nvar highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_default = /*#__PURE__*/__webpack_require__.n(highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_);\n;// ./code/es-modules/Series/ColorMapComposition.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { column: { prototype: columnProto } } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes;\n\n\nconst { addEvent: ColorMapComposition_addEvent, defined: ColorMapComposition_defined } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Composition\n *\n * */\nvar ColorMapComposition;\n(function (ColorMapComposition) {\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    ColorMapComposition.pointMembers = {\n        dataLabelOnNull: true,\n        moveToTopOnHover: true,\n        isValid: pointIsValid\n    };\n    ColorMapComposition.seriesMembers = {\n        colorKey: 'value',\n        axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n        parallelArrays: ['x', 'y', 'value'],\n        pointArrayMap: ['value'],\n        trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n        colorAttribs: seriesColorAttribs,\n        pointAttribs: columnProto.pointAttribs\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * @private\n     */\n    function compose(SeriesClass) {\n        const PointClass = SeriesClass.prototype.pointClass;\n        ColorMapComposition_addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n        return SeriesClass;\n    }\n    ColorMapComposition.compose = compose;\n    /**\n     * Move points to the top of the z-index order when hovered.\n     * @private\n     */\n    function onPointAfterSetState(e) {\n        const point = this, series = point.series, renderer = series.chart.renderer;\n        if (point.moveToTopOnHover && point.graphic) {\n            if (!series.stateMarkerGraphic) {\n                // Create a `use` element and add it to the end of the group,\n                // which would make it appear on top of the other elements. This\n                // deals with z-index without reordering DOM elements (#13049).\n                series.stateMarkerGraphic = new (highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_default())(renderer, 'use')\n                    .css({\n                    pointerEvents: 'none'\n                })\n                    .add(point.graphic.parentGroup);\n            }\n            if (e?.state === 'hover') {\n                // Give the graphic DOM element the same id as the Point\n                // instance\n                point.graphic.attr({\n                    id: this.id\n                });\n                series.stateMarkerGraphic.attr({\n                    href: `${renderer.url}#${this.id}`,\n                    visibility: 'visible'\n                });\n            }\n            else {\n                series.stateMarkerGraphic.attr({\n                    href: ''\n                });\n            }\n        }\n    }\n    /**\n     * Color points have a value option that determines whether or not it is\n     * a null point\n     * @private\n     */\n    function pointIsValid() {\n        return (this.value !== null &&\n            this.value !== Infinity &&\n            this.value !== -Infinity &&\n            // Undefined is allowed, but NaN is not (#17279)\n            (this.value === void 0 || !isNaN(this.value)));\n    }\n    /**\n     * Get the color attributes to apply on the graphic\n     * @private\n     * @function Highcharts.colorMapSeriesMixin.colorAttribs\n     * @param {Highcharts.Point} point\n     * @return {Highcharts.SVGAttributes}\n     *         The SVG attributes\n     */\n    function seriesColorAttribs(point) {\n        const ret = {};\n        if (ColorMapComposition_defined(point.color) &&\n            (!point.state || point.state === 'normal') // #15746\n        ) {\n            ret[this.colorProp || 'fill'] = point.color;\n        }\n        return ret;\n    }\n})(ColorMapComposition || (ColorMapComposition = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Series_ColorMapComposition = (ColorMapComposition);\n\n;// ./code/es-modules/Series/Treemap/TreemapAlgorithmGroup.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Class\n *\n * */\nclass TreemapAlgorithmGroup {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(h, w, d, p) {\n        this.height = h;\n        this.width = w;\n        this.plot = p;\n        this.direction = d;\n        this.startDirection = d;\n        this.total = 0;\n        this.nW = 0;\n        this.lW = 0;\n        this.nH = 0;\n        this.lH = 0;\n        this.elArr = [];\n        this.lP = {\n            total: 0,\n            lH: 0,\n            nH: 0,\n            lW: 0,\n            nW: 0,\n            nR: 0,\n            lR: 0,\n            aspectRatio: function (w, h) {\n                return Math.max((w / h), (h / w));\n            }\n        };\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    addElement(el) {\n        this.lP.total = this.elArr[this.elArr.length - 1];\n        this.total = this.total + el;\n        if (this.direction === 0) {\n            // Calculate last point old aspect ratio\n            this.lW = this.nW;\n            this.lP.lH = this.lP.total / this.lW;\n            this.lP.lR = this.lP.aspectRatio(this.lW, this.lP.lH);\n            // Calculate last point new aspect ratio\n            this.nW = this.total / this.height;\n            this.lP.nH = this.lP.total / this.nW;\n            this.lP.nR = this.lP.aspectRatio(this.nW, this.lP.nH);\n        }\n        else {\n            // Calculate last point old aspect ratio\n            this.lH = this.nH;\n            this.lP.lW = this.lP.total / this.lH;\n            this.lP.lR = this.lP.aspectRatio(this.lP.lW, this.lH);\n            // Calculate last point new aspect ratio\n            this.nH = this.total / this.width;\n            this.lP.nW = this.lP.total / this.nH;\n            this.lP.nR = this.lP.aspectRatio(this.lP.nW, this.nH);\n        }\n        this.elArr.push(el);\n    }\n    reset() {\n        this.nW = 0;\n        this.lW = 0;\n        this.elArr = [];\n        this.total = 0;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapAlgorithmGroup = (TreemapAlgorithmGroup);\n\n;// ./code/es-modules/Series/Treemap/TreemapNode.js\n/* *\n *\n *  (c) 2010-2024 Pawel Lysy\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Class\n *\n * */\nclass TreemapNode {\n    constructor() {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        this.childrenTotal = 0;\n        this.visible = false;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    init(id, i, children, height, level, series, parent) {\n        this.id = id;\n        this.i = i;\n        this.children = children;\n        this.height = height;\n        this.level = level;\n        this.series = series;\n        this.parent = parent;\n        return this;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapNode = (TreemapNode);\n\n;// ./code/es-modules/Series/DrawPointUtilities.js\n/* *\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Handles the drawing of a component.\n * Can be used for any type of component that reserves the graphic property,\n * and provides a shouldDraw on its context.\n *\n * @private\n *\n * @todo add type checking.\n * @todo export this function to enable usage\n */\nfunction draw(point, params) {\n    const { animatableAttribs, onComplete, css, renderer } = params;\n    const animation = (point.series && point.series.chart.hasRendered) ?\n        // Chart-level animation on updates\n        void 0 :\n        // Series-level animation on new points\n        (point.series &&\n            point.series.options.animation);\n    let graphic = point.graphic;\n    params.attribs = {\n        ...params.attribs,\n        'class': point.getClassName()\n    } || {};\n    if ((point.shouldDraw())) {\n        if (!graphic) {\n            if (params.shapeType === 'text') {\n                graphic = renderer.text();\n            }\n            else if (params.shapeType === 'image') {\n                graphic = renderer.image(params.imageUrl || '')\n                    .attr(params.shapeArgs || {});\n            }\n            else {\n                graphic = renderer[params.shapeType](params.shapeArgs || {});\n            }\n            point.graphic = graphic;\n            graphic.add(params.group);\n        }\n        if (css) {\n            graphic.css(css);\n        }\n        graphic\n            .attr(params.attribs)\n            .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n    }\n    else if (graphic) {\n        const destroy = () => {\n            point.graphic = graphic = (graphic && graphic.destroy());\n            if (typeof onComplete === 'function') {\n                onComplete();\n            }\n        };\n        // Animate only runs complete callback if something was animated.\n        if (Object.keys(animatableAttribs).length) {\n            graphic.animate(animatableAttribs, void 0, () => destroy());\n        }\n        else {\n            destroy();\n        }\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst DrawPointUtilities = {\n    draw\n};\n/* harmony default export */ const Series_DrawPointUtilities = (DrawPointUtilities);\n\n;// ./code/es-modules/Series/Treemap/TreemapPoint.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { pie: { prototype: { pointClass: PiePoint } }, scatter: { prototype: { pointClass: ScatterPoint } } } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes;\n\nconst { extend: TreemapPoint_extend, isNumber, pick: TreemapPoint_pick } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Class\n *\n * */\nclass TreemapPoint extends ScatterPoint {\n    constructor() {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        super(...arguments);\n        this.shapeType = 'rect';\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    draw(params) {\n        Series_DrawPointUtilities.draw(this, params);\n    }\n    getClassName() {\n        const series = this.series, options = series.options;\n        let className = super.getClassName();\n        // Above the current level\n        if (this.node.level <= series.nodeMap[series.rootNode].level &&\n            this.node.children.length) {\n            className += ' highcharts-above-level';\n        }\n        else if (!this.node.isLeaf &&\n            !TreemapPoint_pick(options.interactByLeaf, !options.allowTraversingTree)) {\n            className += ' highcharts-internal-node-interactive';\n        }\n        else if (!this.node.isLeaf) {\n            className += ' highcharts-internal-node';\n        }\n        return className;\n    }\n    /**\n     * A tree point is valid if it has han id too, assume it may be a parent\n     * item.\n     *\n     * @private\n     * @function Highcharts.Point#isValid\n     */\n    isValid() {\n        return Boolean(this.id || isNumber(this.value));\n    }\n    setState(state) {\n        super.setState.apply(this, arguments);\n        // Graphic does not exist when point is not visible.\n        if (this.graphic) {\n            this.graphic.attr({\n                zIndex: state === 'hover' ? 1 : 0\n            });\n        }\n    }\n    shouldDraw() {\n        return isNumber(this.plotY) && this.y !== null;\n    }\n}\nTreemapPoint_extend(TreemapPoint.prototype, {\n    setVisible: PiePoint.prototype.setVisible\n});\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapPoint = (TreemapPoint);\n\n;// ./code/es-modules/Series/Treemap/TreemapSeriesDefaults.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { isString: TreemapSeriesDefaults_isString } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A treemap displays hierarchical data using nested rectangles. The data\n * can be laid out in varying ways depending on options.\n *\n * @sample highcharts/demo/treemap-large-dataset/\n *         Treemap\n *\n * @extends      plotOptions.scatter\n * @excluding    cluster, connectEnds, connectNulls, dataSorting, dragDrop, jitter, marker\n * @product      highcharts\n * @requires     modules/treemap\n * @optionparent plotOptions.treemap\n */\nconst TreemapSeriesDefaults = {\n    /**\n     * When enabled the user can click on a point which is a parent and\n     * zoom in on its children. Deprecated and replaced by\n     * [allowTraversingTree](#plotOptions.treemap.allowTraversingTree).\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-allowdrilltonode/\n     *         Enabled\n     *\n     * @deprecated\n     * @type      {boolean}\n     * @default   false\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.allowDrillToNode\n     */\n    /**\n     * When enabled the user can click on a point which is a parent and\n     * zoom in on its children.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-allowtraversingtree/\n     *         Enabled\n     *\n     * @since     7.0.3\n     * @product   highcharts\n     */\n    allowTraversingTree: false,\n    animationLimit: 250,\n    /**\n     * The border radius for each treemap item.\n     */\n    borderRadius: 0,\n    /**\n     * Options for the breadcrumbs, the navigation at the top leading the\n     * way up through the traversed levels.\n     *\n     *\n     * @since 10.0.0\n     * @product   highcharts\n     * @extends   navigation.breadcrumbs\n     * @apioption plotOptions.treemap.breadcrumbs\n     */\n    /**\n     * When the series contains less points than the crop threshold, all\n     * points are drawn, event if the points fall outside the visible plot\n     * area at the current zoom. The advantage of drawing all points\n     * (including markers and columns), is that animation is performed on\n     * updates. On the other hand, when the series contains more points than\n     * the crop threshold, the series data is cropped to only contain points\n     * that fall within the plot area. The advantage of cropping away\n     * invisible points is to increase performance on large series.\n     *\n     * @type      {number}\n     * @default   300\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.cropThreshold\n     */\n    /**\n     * Fires on a request for change of root node for the tree, before the\n     * update is made. An event object is passed to the function, containing\n     * additional properties `newRootId`, `previousRootId`, `redraw` and\n     * `trigger`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-events-setrootnode/\n     *         Alert update information on setRootNode event.\n     *\n     * @type {Function}\n     * @default undefined\n     * @since 7.0.3\n     * @product highcharts\n     * @apioption plotOptions.treemap.events.setRootNode\n     */\n    /**\n     * This option decides if the user can interact with the parent nodes\n     * or just the leaf nodes. When this option is undefined, it will be\n     * true by default. However when allowTraversingTree is true, then it\n     * will be false by default.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-false/\n     *         False\n     * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-true-and-allowtraversingtree/\n     *         InteractByLeaf and allowTraversingTree is true\n     *\n     * @type      {boolean}\n     * @since     4.1.2\n     * @product   highcharts\n     * @apioption plotOptions.treemap.interactByLeaf\n     */\n    /**\n     * The sort index of the point inside the treemap level.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-sortindex/\n     *         Sort by years\n     *\n     * @type      {number}\n     * @since     4.1.10\n     * @product   highcharts\n     * @apioption plotOptions.treemap.sortIndex\n     */\n    /**\n     * A series specific or series type specific color set to apply instead\n     * of the global [colors](#colors) when\n     * [colorByPoint](#plotOptions.treemap.colorByPoint) is true.\n     *\n     * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n     * @since     3.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.colors\n     */\n    /**\n     * Whether to display this series type or specific series item in the\n     * legend.\n     */\n    showInLegend: false,\n    /**\n     * @ignore-option\n     */\n    marker: void 0,\n    /**\n     * When using automatic point colors pulled from the `options.colors`\n     * collection, this option determines whether the chart should receive\n     * one color per series or one color per point.\n     *\n     * @see [series colors](#plotOptions.treemap.colors)\n     *\n     * @since     2.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.colorByPoint\n     */\n    colorByPoint: false,\n    /**\n     * @since 4.1.0\n     */\n    dataLabels: {\n        defer: false,\n        enabled: true,\n        formatter: function () {\n            const point = this && this.point ?\n                this.point :\n                {}, name = TreemapSeriesDefaults_isString(point.name) ? point.name : '';\n            return name;\n        },\n        inside: true,\n        verticalAlign: 'middle'\n    },\n    tooltip: {\n        headerFormat: '',\n        pointFormat: '<b>{point.name}</b>: {point.value}<br/>'\n    },\n    /**\n     * Whether to ignore hidden points when the layout algorithm runs.\n     * If `false`, hidden points will leave open spaces.\n     *\n     * @since 5.0.8\n     */\n    ignoreHiddenPoint: true,\n    /**\n     * This option decides which algorithm is used for setting position\n     * and dimensions of the points.\n     *\n     * @see [How to write your own algorithm](https://www.highcharts.com/docs/chart-and-series-types/treemap)\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/\n     *         SliceAndDice by default\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-stripes/\n     *         Stripes\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-squarified/\n     *         Squarified\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-strip/\n     *         Strip\n     *\n     * @since      4.1.0\n     * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n     */\n    layoutAlgorithm: 'sliceAndDice',\n    /**\n     * Defines which direction the layout algorithm will start drawing.\n     *\n     * @since       4.1.0\n     * @validvalue [\"vertical\", \"horizontal\"]\n     */\n    layoutStartingDirection: 'vertical',\n    /**\n     * Enabling this option will make the treemap alternate the drawing\n     * direction between vertical and horizontal. The next levels starting\n     * direction will always be the opposite of the previous.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-alternatestartingdirection-true/\n     *         Enabled\n     *\n     * @since 4.1.0\n     */\n    alternateStartingDirection: false,\n    /**\n     * Used together with the levels and allowTraversingTree options. When\n     * set to false the first level visible to be level one, which is\n     * dynamic when traversing the tree. Otherwise the level will be the\n     * same as the tree structure.\n     *\n     * @since 4.1.0\n     */\n    levelIsConstant: true,\n    /**\n     * Options for the button appearing when traversing down in a treemap.\n     *\n     * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n     *\n     * @deprecated\n     */\n    traverseUpButton: {\n        /**\n         * The position of the button.\n         */\n        position: {\n            /**\n             * Vertical alignment of the button.\n             *\n             * @type      {Highcharts.VerticalAlignValue}\n             * @default   top\n             * @product   highcharts\n             * @apioption plotOptions.treemap.traverseUpButton.position.verticalAlign\n             */\n            /**\n             * Horizontal alignment of the button.\n             *\n             * @type {Highcharts.AlignValue}\n             */\n            align: 'right',\n            /**\n             * Horizontal offset of the button.\n             */\n            x: -10,\n            /**\n             * Vertical offset of the button.\n             */\n            y: 10\n        }\n    },\n    /**\n     * Set options on specific levels. Takes precedence over series options,\n     * but not point options.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n     *         Styling dataLabels and borders\n     * @sample {highcharts} highcharts/demo/treemap-with-levels/\n     *         Different layoutAlgorithm\n     *\n     * @type      {Array<*>}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels\n     */\n    /**\n     * Can set a `borderColor` on all points which lies on the same level.\n     *\n     * @type      {Highcharts.ColorString}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.borderColor\n     */\n    /**\n     * Set the dash style of the border of all the point which lies on the\n     * level. See\n     * [plotOptions.scatter.dashStyle](#plotoptions.scatter.dashstyle)\n     * for possible options.\n     *\n     * @type      {Highcharts.DashStyleValue}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.borderDashStyle\n     */\n    /**\n     * Can set the borderWidth on all points which lies on the same level.\n     *\n     * @type      {number}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.borderWidth\n     */\n    /**\n     * Can set a color on all points which lies on the same level.\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.color\n     */\n    /**\n     * A configuration object to define how the color of a child varies from\n     * the parent's color. The variation is distributed among the children\n     * of node. For example when setting brightness, the brightness change\n     * will range from the parent's original brightness on the first child,\n     * to the amount set in the `to` setting on the last node. This allows a\n     * gradient-like color scheme that sets children out from each other\n     * while highlighting the grouping on treemaps and sectors on sunburst\n     * charts.\n     *\n     * @sample highcharts/demo/sunburst/\n     *         Sunburst with color variation\n     *\n     * @sample highcharts/series-treegraph/color-variation\n     *         Treegraph nodes with color variation\n     *\n     * @since     6.0.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.colorVariation\n     */\n    /**\n     * The key of a color variation. Currently supports `brightness` only.\n     *\n     * @type       {string}\n     * @since      6.0.0\n     * @product    highcharts\n     * @validvalue [\"brightness\"]\n     * @apioption  plotOptions.treemap.levels.colorVariation.key\n     */\n    /**\n     * The ending value of a color variation. The last sibling will receive\n     * this value.\n     *\n     * @type      {number}\n     * @since     6.0.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.colorVariation.to\n     */\n    /**\n     * Can set the options of dataLabels on each point which lies on the\n     * level.\n     * [plotOptions.treemap.dataLabels](#plotOptions.treemap.dataLabels) for\n     * possible values.\n     *\n     * @extends   plotOptions.treemap.dataLabels\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.dataLabels\n     */\n    /**\n     * Can set the layoutAlgorithm option on a specific level.\n     *\n     * @type       {string}\n     * @since      4.1.0\n     * @product    highcharts\n     * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n     * @apioption  plotOptions.treemap.levels.layoutAlgorithm\n     */\n    /**\n     * Can set the layoutStartingDirection option on a specific level.\n     *\n     * @type       {string}\n     * @since      4.1.0\n     * @product    highcharts\n     * @validvalue [\"vertical\", \"horizontal\"]\n     * @apioption  plotOptions.treemap.levels.layoutStartingDirection\n     */\n    /**\n     * Decides which level takes effect from the options set in the levels\n     * object.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n     *         Styling of both levels\n     *\n     * @type      {number}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.level\n     */\n    // Presentational options\n    /**\n     * The color of the border surrounding each tree map item.\n     *\n     * @type {Highcharts.ColorString}\n     */\n    borderColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n    /**\n     * The width of the border surrounding each tree map item.\n     */\n    borderWidth: 1,\n    colorKey: 'colorValue',\n    /**\n     * The opacity of a point in treemap. When a point has children, the\n     * visibility of the children is determined by the opacity.\n     *\n     * @since 4.2.4\n     */\n    opacity: 0.15,\n    /**\n     * A wrapper object for all the series options in specific states.\n     *\n     * @extends plotOptions.heatmap.states\n     */\n    states: {\n        /**\n         * Options for the hovered series\n         *\n         * @extends   plotOptions.heatmap.states.hover\n         * @excluding halo\n         */\n        hover: {\n            /**\n             * The border color for the hovered state.\n             */\n            borderColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * Brightness for the hovered point. Defaults to 0 if the\n             * heatmap series is loaded first, otherwise 0.1.\n             *\n             * @type    {number}\n             * @default undefined\n             */\n            brightness: (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes.heatmap ? 0 : 0.1,\n            /**\n             * @extends plotOptions.heatmap.states.hover.halo\n             */\n            halo: false,\n            /**\n             * The opacity of a point in treemap. When a point has children,\n             * the visibility of the children is determined by the opacity.\n             *\n             * @since 4.2.4\n             */\n            opacity: 0.75,\n            /**\n             * The shadow option for hovered state.\n             */\n            shadow: false\n        }\n    },\n    legendSymbol: 'rectangle',\n    /**\n     * This option enables automatic traversing to the last child level upon\n     * node interaction. This feature simplifies navigation by immediately\n     * focusing on the deepest layer of the data structure without intermediate\n     * steps.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-traverse-to-leaf/\n     *         Traverse to leaf enabled\n     *\n     * @since   11.4.4\n     *\n     * @product highcharts\n     */\n    traverseToLeaf: false\n};\n/**\n * A `treemap` series. If the [type](#series.treemap.type) option is\n * not specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.treemap\n * @excluding dataParser, dataURL, stack, dataSorting\n * @product   highcharts\n * @requires  modules/treemap\n * @apioption series.treemap\n */\n/**\n * An array of data points for the series. For the `treemap` series\n * type, points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `value` options. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.treemap.turboThreshold),\n *    this option is not available.\n *    ```js\n *      data: [{\n *        value: 9,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *      }, {\n *        value: 6,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *      }]\n *    ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @type      {Array<number|null|*>}\n * @extends   series.heatmap.data\n * @excluding x, y, pointPadding\n * @product   highcharts\n * @apioption series.treemap.data\n */\n/**\n * The value of the point, resulting in a relative area of the point\n * in the treemap.\n *\n * @type      {number|null}\n * @product   highcharts\n * @apioption series.treemap.data.value\n */\n/**\n * Serves a purpose only if a `colorAxis` object is defined in the chart\n * options. This value will decide which color the point gets from the\n * scale of the colorAxis.\n *\n * @type      {number}\n * @since     4.1.0\n * @product   highcharts\n * @apioption series.treemap.data.colorValue\n */\n/**\n * Only for treemap. Use this option to build a tree structure. The\n * value should be the id of the point which is the parent. If no points\n * has a matching id, or this option is undefined, then the parent will\n * be set to the root.\n *\n * @sample {highcharts} highcharts/point/parent/\n *         Point parent\n * @sample {highcharts} highcharts/demo/treemap-with-levels/\n *         Example where parent id is not matching\n *\n * @type      {string}\n * @since     4.1.0\n * @product   highcharts\n * @apioption series.treemap.data.parent\n */\n''; // Keeps doclets above detached\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapSeriesDefaults = (TreemapSeriesDefaults);\n\n;// ./code/es-modules/Series/Treemap/TreemapUtilities.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Namespace\n *\n * */\nvar TreemapUtilities;\n(function (TreemapUtilities) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * @todo find correct name for this function.\n     * @todo Similar to reduce, this function is likely redundant\n     */\n    function recursive(item, func, context) {\n        const next = func.call(context || this, item);\n        if (next !== false) {\n            recursive(next, func, context);\n        }\n    }\n    TreemapUtilities.recursive = recursive;\n})(TreemapUtilities || (TreemapUtilities = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapUtilities = (TreemapUtilities);\n\n;// ./code/es-modules/Series/TreeUtilities.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { extend: TreeUtilities_extend, isArray, isNumber: TreeUtilities_isNumber, isObject, merge: TreeUtilities_merge, pick: TreeUtilities_pick, relativeLength } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Functions\n *\n * */\n/* eslint-disable valid-jsdoc */\n/**\n * @private\n */\nfunction getColor(node, options) {\n    const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n    let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n    /**\n     * @private\n     */\n    const variateColor = (color) => {\n        const colorVariation = level && level.colorVariation;\n        if (colorVariation &&\n            colorVariation.key === 'brightness' &&\n            index &&\n            siblings) {\n            return highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default().parse(color).brighten(colorVariation.to * (index / siblings)).get();\n        }\n        return color;\n    };\n    if (node) {\n        point = points[node.i];\n        level = mapOptionsToLevel[node.level] || {};\n        getColorByPoint = point && level.colorByPoint;\n        if (getColorByPoint) {\n            colorIndexByPoint = point.index % (colors ?\n                colors.length :\n                chartOptionsChart.colorCount);\n            colorByPoint = colors && colors[colorIndexByPoint];\n        }\n        // Select either point color, level color or inherited color.\n        if (!series.chart.styledMode) {\n            color = TreeUtilities_pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n        }\n        colorIndex = TreeUtilities_pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n    }\n    return {\n        color: color,\n        colorIndex: colorIndex\n    };\n}\n/**\n * Creates a map from level number to its given options.\n *\n * @private\n *\n * @param {Object} params\n * Object containing parameters.\n * - `defaults` Object containing default options. The default options are\n *   merged with the userOptions to get the final options for a specific\n *   level.\n * - `from` The lowest level number.\n * - `levels` User options from series.levels.\n * - `to` The highest level number.\n *\n * @return {Highcharts.Dictionary<object>|null}\n * Returns a map from level number to its given options.\n */\nfunction getLevelOptions(params) {\n    const result = {};\n    let defaults, converted, i, from, to, levels;\n    if (isObject(params)) {\n        from = TreeUtilities_isNumber(params.from) ? params.from : 1;\n        levels = params.levels;\n        converted = {};\n        defaults = isObject(params.defaults) ? params.defaults : {};\n        if (isArray(levels)) {\n            converted = levels.reduce((obj, item) => {\n                let level, levelIsConstant, options;\n                if (isObject(item) && TreeUtilities_isNumber(item.level)) {\n                    options = TreeUtilities_merge({}, item);\n                    levelIsConstant = TreeUtilities_pick(options.levelIsConstant, defaults.levelIsConstant);\n                    // Delete redundant properties.\n                    delete options.levelIsConstant;\n                    delete options.level;\n                    // Calculate which level these options apply to.\n                    level = item.level + (levelIsConstant ? 0 : from - 1);\n                    if (isObject(obj[level])) {\n                        TreeUtilities_merge(true, obj[level], options); // #16329\n                    }\n                    else {\n                        obj[level] = options;\n                    }\n                }\n                return obj;\n            }, {});\n        }\n        to = TreeUtilities_isNumber(params.to) ? params.to : 1;\n        for (i = 0; i <= to; i++) {\n            result[i] = TreeUtilities_merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n        }\n    }\n    return result;\n}\n/**\n * @private\n * @todo Combine buildTree and buildNode with setTreeValues\n * @todo Remove logic from Treemap and make it utilize this mixin.\n */\nfunction setTreeValues(tree, options) {\n    const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n    let childrenTotal = 0;\n    tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n    tree.name = TreeUtilities_pick(point && point.name, '');\n    tree.visible = (idRoot === tree.id ||\n        options.visible === true);\n    if (typeof before === 'function') {\n        tree = before(tree, options);\n    }\n    // First give the children some values\n    tree.children.forEach((child, i) => {\n        const newOptions = TreeUtilities_extend({}, options);\n        TreeUtilities_extend(newOptions, {\n            index: i,\n            siblings: tree.children.length,\n            visible: tree.visible\n        });\n        child = setTreeValues(child, newOptions);\n        children.push(child);\n        if (child.visible) {\n            childrenTotal += child.val;\n        }\n    });\n    // Set the values\n    const value = TreeUtilities_pick(optionsPoint.value, childrenTotal);\n    tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n    tree.children = children;\n    tree.childrenTotal = childrenTotal;\n    tree.isLeaf = tree.visible && !childrenTotal;\n    tree.val = value;\n    return tree;\n}\n/**\n * Update the rootId property on the series. Also makes sure that it is\n * accessible to exporting.\n *\n * @private\n *\n * @param {Object} series\n * The series to operate on.\n *\n * @return {string}\n * Returns the resulting rootId after update.\n */\nfunction updateRootId(series) {\n    let rootId, options;\n    if (isObject(series)) {\n        // Get the series options.\n        options = isObject(series.options) ? series.options : {};\n        // Calculate the rootId.\n        rootId = TreeUtilities_pick(series.rootNode, options.rootId, '');\n        // Set rootId on series.userOptions to pick it up in exporting.\n        if (isObject(series.userOptions)) {\n            series.userOptions.rootId = rootId;\n        }\n        // Set rootId on series to pick it up on next update.\n        series.rootNode = rootId;\n    }\n    return rootId;\n}\n/**\n * Get the node width, which relies on the plot width and the nodeDistance\n * option.\n *\n * @private\n */\nfunction getNodeWidth(series, columnCount) {\n    const { chart, options } = series, { nodeDistance = 0, nodeWidth = 0 } = options, { plotSizeX = 1 } = chart;\n    // Node width auto means they are evenly distributed along the width of\n    // the plot area\n    if (nodeWidth === 'auto') {\n        if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n            const fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n            return plotSizeX / total;\n        }\n        const nDistance = Number(nodeDistance);\n        return ((plotSizeX + nDistance) /\n            (columnCount || 1)) - nDistance;\n    }\n    return relativeLength(nodeWidth, plotSizeX);\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst TreeUtilities = {\n    getColor,\n    getLevelOptions,\n    getNodeWidth,\n    setTreeValues,\n    updateRootId\n};\n/* harmony default export */ const Series_TreeUtilities = (TreeUtilities);\n\n;// ./code/es-modules/Series/Treemap/TreemapSeries.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { parse: color } = (highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default());\n\n\nconst { composed: TreemapSeries_composed, noop } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n\nconst { column: ColumnSeries, scatter: ScatterSeries } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes;\n\n\n\n\n\n\nconst { getColor: TreemapSeries_getColor, getLevelOptions: TreemapSeries_getLevelOptions, updateRootId: TreemapSeries_updateRootId } = Series_TreeUtilities;\n\nconst { addEvent: TreemapSeries_addEvent, correctFloat, crisp, defined: TreemapSeries_defined, error, extend: TreemapSeries_extend, fireEvent: TreemapSeries_fireEvent, isArray: TreemapSeries_isArray, isObject: TreemapSeries_isObject, isString: TreemapSeries_isString, merge: TreemapSeries_merge, pick: TreemapSeries_pick, pushUnique: TreemapSeries_pushUnique, stableSort } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Constants\n *\n * */\nconst axisMax = 100;\n/* *\n *\n *  Variables\n *\n * */\nlet treemapAxisDefaultValues = false;\n/* *\n *\n *  Functions\n *\n * */\n/** @private */\nfunction onSeriesAfterBindAxes() {\n    const series = this, xAxis = series.xAxis, yAxis = series.yAxis;\n    let treeAxis;\n    if (xAxis && yAxis) {\n        if (series.is('treemap')) {\n            treeAxis = {\n                endOnTick: false,\n                gridLineWidth: 0,\n                lineWidth: 0,\n                min: 0,\n                minPadding: 0,\n                max: axisMax,\n                maxPadding: 0,\n                startOnTick: false,\n                title: void 0,\n                tickPositions: []\n            };\n            TreemapSeries_extend(yAxis.options, treeAxis);\n            TreemapSeries_extend(xAxis.options, treeAxis);\n            treemapAxisDefaultValues = true;\n        }\n        else if (treemapAxisDefaultValues) {\n            yAxis.setOptions(yAxis.userOptions);\n            xAxis.setOptions(xAxis.userOptions);\n            treemapAxisDefaultValues = false;\n        }\n    }\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n * @class\n * @name Highcharts.seriesTypes.treemap\n *\n * @augments Highcharts.Series\n */\nclass TreemapSeries extends ScatterSeries {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    static compose(SeriesClass) {\n        if (TreemapSeries_pushUnique(TreemapSeries_composed, 'TreemapSeries')) {\n            TreemapSeries_addEvent(SeriesClass, 'afterBindAxes', onSeriesAfterBindAxes);\n        }\n    }\n    /* *\n     *\n     *  Function\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    algorithmCalcPoints(directionChange, last, group, childrenArea) {\n        const plot = group.plot, end = group.elArr.length - 1;\n        let pX, pY, pW, pH, gW = group.lW, gH = group.lH, keep, i = 0;\n        if (last) {\n            gW = group.nW;\n            gH = group.nH;\n        }\n        else {\n            keep = group.elArr[end];\n        }\n        for (const p of group.elArr) {\n            if (last || (i < end)) {\n                if (group.direction === 0) {\n                    pX = plot.x;\n                    pY = plot.y;\n                    pW = gW;\n                    pH = p / pW;\n                }\n                else {\n                    pX = plot.x;\n                    pY = plot.y;\n                    pH = gH;\n                    pW = p / pH;\n                }\n                childrenArea.push({\n                    x: pX,\n                    y: pY,\n                    width: pW,\n                    height: correctFloat(pH)\n                });\n                if (group.direction === 0) {\n                    plot.y = plot.y + pH;\n                }\n                else {\n                    plot.x = plot.x + pW;\n                }\n            }\n            i = i + 1;\n        }\n        // Reset variables\n        group.reset();\n        if (group.direction === 0) {\n            group.width = group.width - gW;\n        }\n        else {\n            group.height = group.height - gH;\n        }\n        plot.y = plot.parent.y + (plot.parent.height - group.height);\n        plot.x = plot.parent.x + (plot.parent.width - group.width);\n        if (directionChange) {\n            group.direction = 1 - group.direction;\n        }\n        // If not last, then add uncalculated element\n        if (!last) {\n            group.addElement(keep);\n        }\n    }\n    algorithmFill(directionChange, parent, children) {\n        const childrenArea = [];\n        let pTot, direction = parent.direction, x = parent.x, y = parent.y, width = parent.width, height = parent.height, pX, pY, pW, pH;\n        for (const child of children) {\n            pTot =\n                (parent.width * parent.height) * (child.val / parent.val);\n            pX = x;\n            pY = y;\n            if (direction === 0) {\n                pH = height;\n                pW = pTot / pH;\n                width = width - pW;\n                x = x + pW;\n            }\n            else {\n                pW = width;\n                pH = pTot / pW;\n                height = height - pH;\n                y = y + pH;\n            }\n            childrenArea.push({\n                x: pX,\n                y: pY,\n                width: pW,\n                height: pH\n            });\n            if (directionChange) {\n                direction = 1 - direction;\n            }\n        }\n        return childrenArea;\n    }\n    algorithmLowAspectRatio(directionChange, parent, children) {\n        const series = this, childrenArea = [], plot = {\n            x: parent.x,\n            y: parent.y,\n            parent: parent\n        }, direction = parent.direction, end = children.length - 1, group = new Treemap_TreemapAlgorithmGroup(parent.height, parent.width, direction, plot);\n        let pTot, i = 0;\n        // Loop through and calculate all areas\n        for (const child of children) {\n            pTot =\n                (parent.width * parent.height) * (child.val / parent.val);\n            group.addElement(pTot);\n            if (group.lP.nR > group.lP.lR) {\n                series.algorithmCalcPoints(directionChange, false, group, childrenArea, plot // @todo no supported\n                );\n            }\n            // If last child, then calculate all remaining areas\n            if (i === end) {\n                series.algorithmCalcPoints(directionChange, true, group, childrenArea, plot // @todo not supported\n                );\n            }\n            ++i;\n        }\n        return childrenArea;\n    }\n    /**\n     * Over the alignment method by setting z index.\n     * @private\n     */\n    alignDataLabel(point, dataLabel, labelOptions) {\n        const style = labelOptions.style;\n        // #8160: Prevent the label from exceeding the point's\n        // boundaries in treemaps by applying ellipsis overflow.\n        // The issue was happening when datalabel's text contained a\n        // long sequence of characters without a whitespace.\n        if (style &&\n            !TreemapSeries_defined(style.textOverflow) &&\n            dataLabel.text &&\n            dataLabel.getBBox().width > (dataLabel.text.textWidth || 0)) {\n            dataLabel.css({\n                textOverflow: 'ellipsis',\n                // Unit (px) is required when useHTML is true\n                width: style.width += 'px'\n            });\n        }\n        ColumnSeries.prototype.alignDataLabel.apply(this, arguments);\n        if (point.dataLabel) {\n            // `point.node.zIndex` could be undefined (#6956)\n            point.dataLabel.attr({ zIndex: (point.node.zIndex || 0) + 1 });\n        }\n    }\n    /**\n     * Recursive function which calculates the area for all children of a\n     * node.\n     *\n     * @private\n     * @function Highcharts.Series#calculateChildrenAreas\n     *\n     * @param {Object} parent\n     * The node which is parent to the children.\n     *\n     * @param {Object} area\n     * The rectangular area of the parent.\n     */\n    calculateChildrenAreas(parent, area) {\n        const series = this, options = series.options, mapOptionsToLevel = series.mapOptionsToLevel, level = mapOptionsToLevel[parent.level + 1], algorithm = TreemapSeries_pick((series[(level && level.layoutAlgorithm)] &&\n            level.layoutAlgorithm), options.layoutAlgorithm), alternate = options.alternateStartingDirection, \n        // Collect all children which should be included\n        children = parent.children.filter((n) => !n.ignore);\n        let childrenValues = [];\n        if (level && level.layoutStartingDirection) {\n            area.direction = level.layoutStartingDirection === 'vertical' ?\n                0 :\n                1;\n        }\n        childrenValues = series[algorithm](area, children);\n        let i = -1;\n        for (const child of children) {\n            const values = childrenValues[++i];\n            child.values = TreemapSeries_merge(values, {\n                val: child.childrenTotal,\n                direction: (alternate ? 1 - area.direction : area.direction)\n            });\n            child.pointValues = TreemapSeries_merge(values, {\n                x: (values.x / series.axisRatio),\n                // Flip y-values to avoid visual regression with csvCoord in\n                // Axis.translate at setPointValues. #12488\n                y: axisMax - values.y - values.height,\n                width: (values.width / series.axisRatio)\n            });\n            // If node has children, then call method recursively\n            if (child.children.length) {\n                series.calculateChildrenAreas(child, child.values);\n            }\n        }\n    }\n    /**\n     * Create level list.\n     * @private\n     */\n    createList(e) {\n        const chart = this.chart, breadcrumbs = chart.breadcrumbs, list = [];\n        if (breadcrumbs) {\n            let currentLevelNumber = 0;\n            list.push({\n                level: currentLevelNumber,\n                levelOptions: chart.series[0]\n            });\n            let node = e.target.nodeMap[e.newRootId];\n            const extraNodes = [];\n            // When the root node is set and has parent,\n            // recreate the path from the node tree.\n            while (node.parent || node.parent === '') {\n                extraNodes.push(node);\n                node = e.target.nodeMap[node.parent];\n            }\n            for (const node of extraNodes.reverse()) {\n                list.push({\n                    level: ++currentLevelNumber,\n                    levelOptions: node\n                });\n            }\n            // If the list has only first element, we should clear it\n            if (list.length <= 1) {\n                list.length = 0;\n            }\n        }\n        return list;\n    }\n    /**\n     * Extend drawDataLabels with logic to handle custom options related to\n     * the treemap series:\n     *\n     * - Points which is not a leaf node, has dataLabels disabled by\n     *   default.\n     *\n     * - Options set on series.levels is merged in.\n     *\n     * - Width of the dataLabel is set to match the width of the point\n     *   shape.\n     *\n     * @private\n     */\n    drawDataLabels() {\n        const series = this, mapOptionsToLevel = series.mapOptionsToLevel, points = series.points.filter(function (n) {\n            return n.node.visible;\n        });\n        let options, level;\n        for (const point of points) {\n            level = mapOptionsToLevel[point.node.level];\n            // Set options to new object to avoid problems with scope\n            options = { style: {} };\n            // If not a leaf, then label should be disabled as default\n            if (!point.node.isLeaf) {\n                options.enabled = false;\n            }\n            // If options for level exists, include them as well\n            if (level && level.dataLabels) {\n                options = TreemapSeries_merge(options, level.dataLabels);\n                series.hasDataLabels = () => true;\n            }\n            // Set dataLabel width to the width of the point shape.\n            if (point.shapeArgs) {\n                const css = {\n                    width: `${point.shapeArgs.width || 0}px`,\n                    lineClamp: Math.floor((point.shapeArgs.height || 0) / 16)\n                };\n                TreemapSeries_extend(options.style, css);\n                point.dataLabel?.css(css);\n            }\n            // Merge custom options with point options\n            point.dlOptions = TreemapSeries_merge(options, point.options.dataLabels);\n        }\n        super.drawDataLabels();\n    }\n    /**\n     * Override drawPoints\n     * @private\n     */\n    drawPoints(points = this.points) {\n        const series = this, chart = series.chart, renderer = chart.renderer, styledMode = chart.styledMode, options = series.options, shadow = styledMode ? {} : options.shadow, borderRadius = options.borderRadius, withinAnimationLimit = chart.pointCount < options.animationLimit, allowTraversingTree = options.allowTraversingTree;\n        for (const point of points) {\n            const levelDynamic = point.node.levelDynamic, animatableAttribs = {}, attribs = {}, css = {}, groupKey = 'level-group-' + point.node.level, hasGraphic = !!point.graphic, shouldAnimate = withinAnimationLimit && hasGraphic, shapeArgs = point.shapeArgs;\n            // Don't bother with calculate styling if the point is not drawn\n            if (point.shouldDraw()) {\n                point.isInside = true;\n                if (borderRadius) {\n                    attribs.r = borderRadius;\n                }\n                TreemapSeries_merge(true, // Extend object\n                // Which object to extend\n                shouldAnimate ? animatableAttribs : attribs, \n                // Add shapeArgs to animate/attr if graphic exists\n                hasGraphic ? shapeArgs : {}, \n                // Add style attribs if !styleMode\n                styledMode ?\n                    {} :\n                    series.pointAttribs(point, point.selected ? 'select' : void 0));\n                // In styled mode apply point.color. Use CSS, otherwise the\n                // fill used in the style sheet will take precedence over\n                // the fill attribute.\n                if (series.colorAttribs && styledMode) {\n                    // Heatmap is loaded\n                    TreemapSeries_extend(css, series.colorAttribs(point));\n                }\n                if (!series[groupKey]) {\n                    series[groupKey] = renderer.g(groupKey)\n                        .attr({\n                        // @todo Set the zIndex based upon the number of\n                        // levels, instead of using 1000\n                        zIndex: 1000 - (levelDynamic || 0)\n                    })\n                        .add(series.group);\n                    series[groupKey].survive = true;\n                }\n            }\n            // Draw the point\n            point.draw({\n                animatableAttribs,\n                attribs,\n                css,\n                group: series[groupKey],\n                imageUrl: point.imageUrl,\n                renderer,\n                shadow,\n                shapeArgs,\n                shapeType: point.shapeType\n            });\n            // If setRootNode is allowed, set a point cursor on clickables &\n            // add drillId to point\n            if (allowTraversingTree && point.graphic) {\n                point.drillId = options.interactByLeaf ?\n                    series.drillToByLeaf(point) :\n                    series.drillToByGroup(point);\n            }\n        }\n    }\n    /**\n     * Finds the drill id for a parent node. Returns false if point should\n     * not have a click event.\n     * @private\n     */\n    drillToByGroup(point) {\n        let drillId = false;\n        if (!point.node.isLeaf &&\n            (point.node.level - this.nodeMap[this.rootNode].level) === 1) {\n            drillId = point.id;\n        }\n        return drillId;\n    }\n    /**\n     * Finds the drill id for a leaf node. Returns false if point should not\n     * have a click event\n     * @private\n     */\n    drillToByLeaf(point) {\n        const { traverseToLeaf } = point.series.options;\n        let drillId = false, nodeParent;\n        if ((point.node.parent !== this.rootNode) &&\n            point.node.isLeaf) {\n            if (traverseToLeaf) {\n                drillId = point.id;\n            }\n            else {\n                nodeParent = point.node;\n                while (!drillId) {\n                    if (typeof nodeParent.parent !== 'undefined') {\n                        nodeParent = this.nodeMap[nodeParent.parent];\n                    }\n                    if (nodeParent.parent === this.rootNode) {\n                        drillId = nodeParent.id;\n                    }\n                }\n            }\n        }\n        return drillId;\n    }\n    /**\n     * @todo remove this function at a suitable version.\n     * @private\n     */\n    drillToNode(id, redraw) {\n        error(32, false, void 0, { 'treemap.drillToNode': 'use treemap.setRootNode' });\n        this.setRootNode(id, redraw);\n    }\n    drillUp() {\n        const series = this, node = series.nodeMap[series.rootNode];\n        if (node && TreemapSeries_isString(node.parent)) {\n            series.setRootNode(node.parent, true, { trigger: 'traverseUpButton' });\n        }\n    }\n    getExtremes() {\n        // Get the extremes from the value data\n        const { dataMin, dataMax } = super.getExtremes(this.colorValueData);\n        this.valueMin = dataMin;\n        this.valueMax = dataMax;\n        // Get the extremes from the y data\n        return super.getExtremes();\n    }\n    /**\n     * Creates an object map from parent id to childrens index.\n     *\n     * @private\n     * @function Highcharts.Series#getListOfParents\n     *\n     * @param {Highcharts.SeriesTreemapDataOptions} [data]\n     *        List of points set in options.\n     *\n     * @param {Array<string>} [existingIds]\n     *        List of all point ids.\n     *\n     * @return {Object}\n     *         Map from parent id to children index in data.\n     */\n    getListOfParents(data, existingIds) {\n        const arr = TreemapSeries_isArray(data) ? data : [], ids = TreemapSeries_isArray(existingIds) ? existingIds : [], listOfParents = arr.reduce(function (prev, curr, i) {\n            const parent = TreemapSeries_pick(curr.parent, '');\n            if (typeof prev[parent] === 'undefined') {\n                prev[parent] = [];\n            }\n            prev[parent].push(i);\n            return prev;\n        }, {\n            '': [] // Root of tree\n        });\n        // If parent does not exist, hoist parent to root of tree.\n        for (const parent of Object.keys(listOfParents)) {\n            const children = listOfParents[parent];\n            if ((parent !== '') && (ids.indexOf(parent) === -1)) {\n                for (const child of children) {\n                    listOfParents[''].push(child);\n                }\n                delete listOfParents[parent];\n            }\n        }\n        return listOfParents;\n    }\n    /**\n     * Creates a tree structured object from the series points.\n     * @private\n     */\n    getTree() {\n        const series = this, allIds = this.data.map(function (d) {\n            return d.id;\n        }), parentList = series.getListOfParents(this.data, allIds);\n        series.nodeMap = {};\n        series.nodeList = [];\n        return series.buildTree('', -1, 0, parentList);\n    }\n    buildTree(id, index, level, list, parent) {\n        const series = this, children = [], point = series.points[index];\n        let height = 0, child;\n        // Actions\n        for (const i of (list[id] || [])) {\n            child = series.buildTree(series.points[i].id, i, level + 1, list, id);\n            height = Math.max(child.height + 1, height);\n            children.push(child);\n        }\n        const node = new series.NodeClass().init(id, index, children, height, level, series, parent);\n        for (const child of children) {\n            child.parentNode = node;\n        }\n        series.nodeMap[node.id] = node;\n        series.nodeList.push(node);\n        if (point) {\n            point.node = node;\n            node.point = point;\n        }\n        return node;\n    }\n    /**\n     * Define hasData function for non-cartesian series. Returns true if the\n     * series has points at all.\n     * @private\n     */\n    hasData() {\n        return !!this.dataTable.rowCount;\n    }\n    init(chart, options) {\n        const series = this, breadcrumbsOptions = TreemapSeries_merge(options.drillUpButton, options.breadcrumbs), setOptionsEvent = TreemapSeries_addEvent(series, 'setOptions', (event) => {\n            const options = event.userOptions;\n            if (TreemapSeries_defined(options.allowDrillToNode) &&\n                !TreemapSeries_defined(options.allowTraversingTree)) {\n                options.allowTraversingTree = options.allowDrillToNode;\n                delete options.allowDrillToNode;\n            }\n            if (TreemapSeries_defined(options.drillUpButton) &&\n                !TreemapSeries_defined(options.traverseUpButton)) {\n                options.traverseUpButton = options.drillUpButton;\n                delete options.drillUpButton;\n            }\n        });\n        super.init(chart, options);\n        // Treemap's opacity is a different option from other series\n        delete series.opacity;\n        // Handle deprecated options.\n        series.eventsToUnbind.push(setOptionsEvent);\n        if (series.options.allowTraversingTree) {\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'click', series.onClickDrillToNode));\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'setRootNode', function (e) {\n                const chart = series.chart;\n                if (chart.breadcrumbs) {\n                    // Create a list using the event after drilldown.\n                    chart.breadcrumbs.updateProperties(series.createList(e));\n                }\n            }));\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'update', \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            function (e, redraw) {\n                const breadcrumbs = this.chart.breadcrumbs;\n                if (breadcrumbs && e.options.breadcrumbs) {\n                    breadcrumbs.update(e.options.breadcrumbs);\n                }\n            }));\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'destroy', function destroyEvents(e) {\n                const chart = this.chart;\n                if (chart.breadcrumbs && !e.keepEventsForUpdate) {\n                    chart.breadcrumbs.destroy();\n                    chart.breadcrumbs = void 0;\n                }\n            }));\n        }\n        if (!chart.breadcrumbs) {\n            chart.breadcrumbs = new Breadcrumbs_Breadcrumbs(chart, breadcrumbsOptions);\n        }\n        series.eventsToUnbind.push(TreemapSeries_addEvent(chart.breadcrumbs, 'up', function (e) {\n            const drillUpsNumber = this.level - e.newLevel;\n            for (let i = 0; i < drillUpsNumber; i++) {\n                series.drillUp();\n            }\n        }));\n    }\n    /**\n     * Add drilling on the suitable points.\n     * @private\n     */\n    onClickDrillToNode(event) {\n        const series = this, point = event.point, drillId = point && point.drillId;\n        // If a drill id is returned, add click event and cursor.\n        if (TreemapSeries_isString(drillId)) {\n            point.setState(''); // Remove hover\n            series.setRootNode(drillId, true, { trigger: 'click' });\n        }\n    }\n    /**\n     * Get presentational attributes\n     * @private\n     */\n    pointAttribs(point, state) {\n        const series = this, mapOptionsToLevel = (TreemapSeries_isObject(series.mapOptionsToLevel) ?\n            series.mapOptionsToLevel :\n            {}), level = point && mapOptionsToLevel[point.node.level] || {}, options = this.options, stateOptions = state && options.states && options.states[state] || {}, className = (point && point.getClassName()) || '', \n        // Set attributes by precedence. Point trumps level trumps series.\n        // Stroke width uses pick because it can be 0.\n        attr = {\n            'stroke': (point && point.borderColor) ||\n                level.borderColor ||\n                stateOptions.borderColor ||\n                options.borderColor,\n            'stroke-width': TreemapSeries_pick(point && point.borderWidth, level.borderWidth, stateOptions.borderWidth, options.borderWidth),\n            'dashstyle': (point && point.borderDashStyle) ||\n                level.borderDashStyle ||\n                stateOptions.borderDashStyle ||\n                options.borderDashStyle,\n            'fill': (point && point.color) || this.color\n        };\n        let opacity;\n        // Hide levels above the current view\n        if (className.indexOf('highcharts-above-level') !== -1) {\n            attr.fill = 'none';\n            attr['stroke-width'] = 0;\n            // Nodes with children that accept interaction\n        }\n        else if (className.indexOf('highcharts-internal-node-interactive') !== -1) {\n            opacity = TreemapSeries_pick(stateOptions.opacity, options.opacity);\n            attr.fill = color(attr.fill).setOpacity(opacity).get();\n            attr.cursor = 'pointer';\n            // Hide nodes that have children\n        }\n        else if (className.indexOf('highcharts-internal-node') !== -1) {\n            attr.fill = 'none';\n        }\n        else if (state) {\n            // Brighten and hoist the hover nodes\n            attr.fill = color(attr.fill)\n                .brighten(stateOptions.brightness)\n                .get();\n        }\n        return attr;\n    }\n    /**\n     * Set the node's color recursively, from the parent down.\n     * @private\n     */\n    setColorRecursive(node, parentColor, colorIndex, index, siblings) {\n        const series = this, chart = series && series.chart, colors = chart && chart.options && chart.options.colors;\n        if (node) {\n            const colorInfo = TreemapSeries_getColor(node, {\n                colors: colors,\n                index: index,\n                mapOptionsToLevel: series.mapOptionsToLevel,\n                parentColor: parentColor,\n                parentColorIndex: colorIndex,\n                series: series,\n                siblings: siblings\n            }), point = series.points[node.i];\n            if (point) {\n                point.color = colorInfo.color;\n                point.colorIndex = colorInfo.colorIndex;\n            }\n            let i = -1;\n            // Do it all again with the children\n            for (const child of (node.children || [])) {\n                series.setColorRecursive(child, colorInfo.color, colorInfo.colorIndex, ++i, node.children.length);\n            }\n        }\n    }\n    setPointValues() {\n        const series = this;\n        const { points, xAxis, yAxis } = series;\n        const styledMode = series.chart.styledMode;\n        // Get the crisp correction in classic mode. For this to work in\n        // styled mode, we would need to first add the shape (without x,\n        // y, width and height), then read the rendered stroke width\n        // using point.graphic.strokeWidth(), then modify and apply the\n        // shapeArgs. This applies also to column series, but the\n        // downside is performance and code complexity.\n        const getStrokeWidth = (point) => (styledMode ?\n            0 :\n            (series.pointAttribs(point)['stroke-width'] || 0));\n        for (const point of points) {\n            const { pointValues: values, visible } = point.node;\n            // Points which is ignored, have no values.\n            if (values && visible) {\n                const { height, width, x, y } = values;\n                const strokeWidth = getStrokeWidth(point);\n                const x1 = crisp(xAxis.toPixels(x, true), strokeWidth, true);\n                const x2 = crisp(xAxis.toPixels(x + width, true), strokeWidth, true);\n                const y1 = crisp(yAxis.toPixels(y, true), strokeWidth, true);\n                const y2 = crisp(yAxis.toPixels(y + height, true), strokeWidth, true);\n                // Set point values\n                const shapeArgs = {\n                    x: Math.min(x1, x2),\n                    y: Math.min(y1, y2),\n                    width: Math.abs(x2 - x1),\n                    height: Math.abs(y2 - y1)\n                };\n                point.plotX = shapeArgs.x + (shapeArgs.width / 2);\n                point.plotY = shapeArgs.y + (shapeArgs.height / 2);\n                point.shapeArgs = shapeArgs;\n            }\n            else {\n                // Reset visibility\n                delete point.plotX;\n                delete point.plotY;\n            }\n        }\n    }\n    /**\n     * Sets a new root node for the series.\n     *\n     * @private\n     * @function Highcharts.Series#setRootNode\n     *\n     * @param {string} id\n     * The id of the new root node.\n     *\n     * @param {boolean} [redraw=true]\n     * Whether to redraw the chart or not.\n     *\n     * @param {Object} [eventArguments]\n     * Arguments to be accessed in event handler.\n     *\n     * @param {string} [eventArguments.newRootId]\n     * Id of the new root.\n     *\n     * @param {string} [eventArguments.previousRootId]\n     * Id of the previous root.\n     *\n     * @param {boolean} [eventArguments.redraw]\n     * Whether to redraw the chart after.\n     *\n     * @param {Object} [eventArguments.series]\n     * The series to update the root of.\n     *\n     * @param {string} [eventArguments.trigger]\n     * The action which triggered the event. Undefined if the setRootNode is\n     * called directly.\n     *\n     * @emits Highcharts.Series#event:setRootNode\n     */\n    setRootNode(id, redraw, eventArguments) {\n        const series = this, eventArgs = TreemapSeries_extend({\n            newRootId: id,\n            previousRootId: series.rootNode,\n            redraw: TreemapSeries_pick(redraw, true),\n            series: series\n        }, eventArguments);\n        /**\n         * The default functionality of the setRootNode event.\n         *\n         * @private\n         * @param {Object} args The event arguments.\n         * @param {string} args.newRootId Id of the new root.\n         * @param {string} args.previousRootId Id of the previous root.\n         * @param {boolean} args.redraw Whether to redraw the chart after.\n         * @param {Object} args.series The series to update the root of.\n         * @param {string} [args.trigger=undefined] The action which\n         * triggered the event. Undefined if the setRootNode is called\n         * directly.\n             */\n        const defaultFn = function (args) {\n            const series = args.series;\n            // Store previous and new root ids on the series.\n            series.idPreviousRoot = args.previousRootId;\n            series.rootNode = args.newRootId;\n            // Redraw the chart\n            series.isDirty = true; // Force redraw\n            if (args.redraw) {\n                series.chart.redraw();\n            }\n        };\n        // Fire setRootNode event.\n        TreemapSeries_fireEvent(series, 'setRootNode', eventArgs, defaultFn);\n    }\n    /**\n     * Workaround for `inactive` state. Since `series.opacity` option is\n     * already reserved, don't use that state at all by disabling\n     * `inactiveOtherPoints` and not inheriting states by points.\n     * @private\n     */\n    setState(state) {\n        this.options.inactiveOtherPoints = true;\n        super.setState(state, false);\n        this.options.inactiveOtherPoints = false;\n    }\n    setTreeValues(tree) {\n        const series = this, options = series.options, idRoot = series.rootNode, mapIdToNode = series.nodeMap, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (typeof options.levelIsConstant === 'boolean' ?\n            options.levelIsConstant :\n            true), children = [], point = series.points[tree.i];\n        // First give the children some values\n        let childrenTotal = 0;\n        for (let child of tree.children) {\n            child = series.setTreeValues(child);\n            children.push(child);\n            if (!child.ignore) {\n                childrenTotal += child.val;\n            }\n        }\n        // Sort the children\n        stableSort(children, (a, b) => ((a.sortIndex || 0) - (b.sortIndex || 0)));\n        // Set the values\n        const val = TreemapSeries_pick(point && point.options.value, childrenTotal);\n        if (point) {\n            point.value = val;\n        }\n        TreemapSeries_extend(tree, {\n            children: children,\n            childrenTotal: childrenTotal,\n            // Ignore this node if point is not visible\n            ignore: !(TreemapSeries_pick(point && point.visible, true) && (val > 0)),\n            isLeaf: tree.visible && !childrenTotal,\n            levelDynamic: (tree.level - (levelIsConstant ? 0 : nodeRoot.level)),\n            name: TreemapSeries_pick(point && point.name, ''),\n            sortIndex: TreemapSeries_pick(point && point.sortIndex, -val),\n            val: val\n        });\n        return tree;\n    }\n    sliceAndDice(parent, children) {\n        return this.algorithmFill(true, parent, children);\n    }\n    squarified(parent, children) {\n        return this.algorithmLowAspectRatio(true, parent, children);\n    }\n    strip(parent, children) {\n        return this.algorithmLowAspectRatio(false, parent, children);\n    }\n    stripes(parent, children) {\n        return this.algorithmFill(false, parent, children);\n    }\n    translate() {\n        const series = this, options = series.options;\n        let // NOTE: updateRootId modifies series.\n        rootId = TreemapSeries_updateRootId(series), rootNode, pointValues, seriesArea, val;\n        // Call prototype function\n        super.translate();\n        // @todo Only if series.isDirtyData is true\n        const tree = series.tree = series.getTree();\n        rootNode = series.nodeMap[rootId];\n        if (rootId !== '' &&\n            (!rootNode)) {\n            series.setRootNode('', false);\n            rootId = series.rootNode;\n            rootNode = series.nodeMap[rootId];\n        }\n        series.mapOptionsToLevel = TreemapSeries_getLevelOptions({\n            from: rootNode.level + 1,\n            levels: options.levels,\n            to: tree.height,\n            defaults: {\n                levelIsConstant: series.options.levelIsConstant,\n                colorByPoint: options.colorByPoint\n            }\n        });\n        // Parents of the root node is by default visible\n        Treemap_TreemapUtilities.recursive(series.nodeMap[series.rootNode], (node) => {\n            const p = node.parent;\n            let next = false;\n            node.visible = true;\n            if (p || p === '') {\n                next = series.nodeMap[p];\n            }\n            return next;\n        });\n        // Children of the root node is by default visible\n        Treemap_TreemapUtilities.recursive(series.nodeMap[series.rootNode].children, (children) => {\n            let next = false;\n            for (const child of children) {\n                child.visible = true;\n                if (child.children.length) {\n                    next = (next || []).concat(child.children);\n                }\n            }\n            return next;\n        });\n        series.setTreeValues(tree);\n        // Calculate plotting values.\n        series.axisRatio = (series.xAxis.len / series.yAxis.len);\n        series.nodeMap[''].pointValues = pointValues = {\n            x: 0,\n            y: 0,\n            width: axisMax,\n            height: axisMax\n        };\n        series.nodeMap[''].values = seriesArea = TreemapSeries_merge(pointValues, {\n            width: (pointValues.width * series.axisRatio),\n            direction: (options.layoutStartingDirection === 'vertical' ? 0 : 1),\n            val: tree.val\n        });\n        series.calculateChildrenAreas(tree, seriesArea);\n        // Logic for point colors\n        if (!series.colorAxis &&\n            !options.colorByPoint) {\n            series.setColorRecursive(series.tree);\n        }\n        // Update axis extremes according to the root node.\n        if (options.allowTraversingTree) {\n            val = rootNode.pointValues;\n            series.xAxis.setExtremes(val.x, val.x + val.width, false);\n            series.yAxis.setExtremes(val.y, val.y + val.height, false);\n            series.xAxis.setScale();\n            series.yAxis.setScale();\n        }\n        // Assign values to points.\n        series.setPointValues();\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nTreemapSeries.defaultOptions = TreemapSeries_merge(ScatterSeries.defaultOptions, Treemap_TreemapSeriesDefaults);\nTreemapSeries_extend(TreemapSeries.prototype, {\n    buildKDTree: noop,\n    colorAttribs: Series_ColorMapComposition.seriesMembers.colorAttribs,\n    colorKey: 'colorValue', // Point color option key\n    directTouch: true,\n    getExtremesFromAll: true,\n    getSymbol: noop,\n    optionalAxis: 'colorAxis',\n    parallelArrays: ['x', 'y', 'value', 'colorValue'],\n    pointArrayMap: ['value', 'colorValue'],\n    pointClass: Treemap_TreemapPoint,\n    NodeClass: Treemap_TreemapNode,\n    trackerGroups: ['group', 'dataLabelsGroup'],\n    utils: Treemap_TreemapUtilities\n});\nSeries_ColorMapComposition.compose(TreemapSeries);\nhighcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default().registerSeriesType('treemap', TreemapSeries);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapSeries = (TreemapSeries);\n\n;// ./code/es-modules/masters/modules/treemap.src.js\n\n\n\n\n\nconst G = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\nG.Breadcrumbs = G.Breadcrumbs || Breadcrumbs_Breadcrumbs;\nG.Breadcrumbs.compose(G.Chart, G.defaultOptions);\nTreemap_TreemapSeries.compose(G.Series);\n/* harmony default export */ const treemap_src = ((highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()));\n\n__webpack_exports__ = __webpack_exports__[\"default\"];\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});"],"names":["root","factory","exports","module","require","define","amd","__WEBPACK_EXTERNAL_MODULE__944__","__WEBPACK_EXTERNAL_MODULE__984__","__WEBPACK_EXTERNAL_MODULE__620__","__WEBPACK_EXTERNAL_MODULE__512__","__WEBPACK_EXTERNAL_MODULE__28__","ColorMapComposition","TreemapUtilities","__webpack_modules__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","__webpack_exports__","treemap_src","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default","Breadcrumbs_BreadcrumbsDefaults","lang","mainBreadcrumb","options","buttonTheme","fill","height","padding","zIndex","states","select","style","color","buttonSpacing","floating","format","relativeTo","rtl","position","align","verticalAlign","x","y","separator","text","fontSize","showFullPath","useHTML","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default","composed","addEvent","defined","extend","fireEvent","isString","merge","objectEach","pick","pushUnique","onChartAfterShowResetZoom","chart","breadcrumbs","bbox","resetZoomButton","getBBox","breadcrumbsOptions","alignBreadcrumbsGroup","width","onChartDestroy","destroy","onChartGetMargins","level","breadcrumbsHeight","marginBottom","yOffset","plotTop","onChartRedraw","redraw","onChartSelection","event","resetSelection","Breadcrumbs","compose","ChartClass","highchartsDefaultOptions","constructor","userOptions","elementList","isDirty","list","chartOptions","drilldown","drillUpButton","defaultOptions","navigation","updateProperties","setList","setLevel","length","getLevel","getButtonText","breadcrumb","textFormat","defaultText","drillUpText","returnText","formatter","levelOptions","render","group","renderer","g","addClass","attr","add","renderFullPathButtons","renderSingleButton","destroySingleButton","resetElementListState","updateListElements","destroyListElements","posX","previousBreadcrumb","renderButton","updateSingleButton","xOffset","positionOptions","alignTo","bBox","additionalSpace","newPositions","posY","button","e","callDefaultEvent","buttonEvents","events","click","newLevel","styledMode","renderSeparator","separatorOptions","label","css","update","currentBreadcrumb","force","element","updated","rtlFactor","updateXPosition","spacing","adjustToRTL","translate","i","iEnd","isLast","setState","highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_","highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default","highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_","highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_default","column","columnProto","seriesTypes","ColorMapComposition_addEvent","ColorMapComposition_defined","onPointAfterSetState","series","point","moveToTopOnHover","graphic","stateMarkerGraphic","pointerEvents","parentGroup","state","id","href","url","visibility","pointMembers","dataLabelOnNull","isValid","value","Infinity","isNaN","seriesMembers","colorKey","axisTypes","parallelArrays","pointArrayMap","trackerGroups","colorAttribs","ret","colorProp","pointAttribs","SeriesClass","pointClass","Series_ColorMapComposition","Treemap_TreemapAlgorithmGroup","h","w","p","plot","direction","startDirection","total","nW","lW","nH","lH","elArr","lP","nR","lR","aspectRatio","Math","max","addElement","el","push","reset","Series_DrawPointUtilities","draw","params","animatableAttribs","onComplete","animation","hasRendered","attribs","getClassName","shouldDraw","shapeType","image","imageUrl","shapeArgs","animate","isNew","keys","pie","PiePoint","scatter","ScatterPoint","TreemapPoint_extend","isNumber","TreemapPoint_pick","TreemapPoint","arguments","className","node","nodeMap","rootNode","children","isLeaf","interactByLeaf","allowTraversingTree","Boolean","apply","plotY","setVisible","TreemapSeriesDefaults_isString","TreemapSeriesDefaults","animationLimit","borderRadius","showInLegend","marker","colorByPoint","dataLabels","defer","enabled","name","inside","tooltip","headerFormat","pointFormat","ignoreHiddenPoint","layoutAlgorithm","layoutStartingDirection","alternateStartingDirection","levelIsConstant","traverseUpButton","borderColor","borderWidth","opacity","hover","brightness","heatmap","halo","shadow","legendSymbol","traverseToLeaf","recursive","item","func","context","next","Treemap_TreemapUtilities","TreeUtilities_extend","isArray","TreeUtilities_isNumber","isObject","TreeUtilities_merge","TreeUtilities_pick","relativeLength","parse","TreemapSeries_composed","noop","ColumnSeries","ScatterSeries","getColor","TreemapSeries_getColor","getLevelOptions","TreemapSeries_getLevelOptions","updateRootId","TreemapSeries_updateRootId","colorIndexByPoint","colorIndex","index","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","points","chartOptionsChart","colorCount","variateColor","colorVariation","brighten","to","defaults","converted","from","levels","result","reduce","getNodeWidth","columnCount","nodeDistance","nodeWidth","plotSizeX","test","fraction","parseFloat","nDistance","Number","setTreeValues","tree","before","idRoot","nodeRoot","mapIdToNode","optionsPoint","childrenTotal","levelDynamic","visible","forEach","child","newOptions","val","rootId","TreemapSeries_addEvent","correctFloat","crisp","TreemapSeries_defined","error","TreemapSeries_extend","TreemapSeries_fireEvent","TreemapSeries_isArray","TreemapSeries_isObject","TreemapSeries_isString","TreemapSeries_merge","TreemapSeries_pick","TreemapSeries_pushUnique","stableSort","treemapAxisDefaultValues","onSeriesAfterBindAxes","treeAxis","xAxis","yAxis","is","endOnTick","gridLineWidth","lineWidth","min","minPadding","maxPadding","startOnTick","title","tickPositions","setOptions","TreemapSeries","algorithmCalcPoints","directionChange","last","childrenArea","end","pX","pY","pW","pH","gW","gH","keep","parent","algorithmFill","pTot","algorithmLowAspectRatio","alignDataLabel","dataLabel","labelOptions","textOverflow","textWidth","calculateChildrenAreas","area","algorithm","alternate","filter","ignore","childrenValues","values","pointValues","axisRatio","axisMax","createList","currentLevelNumber","target","newRootId","extraNodes","reverse","drawDataLabels","hasDataLabels","lineClamp","floor","dlOptions","drawPoints","withinAnimationLimit","pointCount","groupKey","hasGraphic","shouldAnimate","isInside","r","selected","survive","drillId","drillToByLeaf","drillToByGroup","nodeParent","drillToNode","setRootNode","drillUp","trigger","getExtremes","dataMin","dataMax","colorValueData","valueMin","valueMax","getListOfParents","data","existingIds","arr","ids","listOfParents","prev","curr","indexOf","getTree","allIds","map","parentList","nodeList","buildTree","NodeClass","init","parentNode","hasData","dataTable","rowCount","setOptionsEvent","allowDrillToNode","eventsToUnbind","onClickDrillToNode","keepEventsForUpdate","drillUpsNumber","stateOptions","borderDashStyle","setOpacity","cursor","setColorRecursive","colorInfo","setPointValues","getStrokeWidth","strokeWidth","x1","toPixels","x2","y1","y2","abs","plotX","eventArguments","previousRootId","args","idPreviousRoot","inactiveOtherPoints","b","sortIndex","sliceAndDice","squarified","strip","stripes","seriesArea","concat","len","colorAxis","setExtremes","setScale","buildKDTree","directTouch","getExtremesFromAll","getSymbol","optionalAxis","utils","registerSeriesType","G","Chart","Treemap_TreemapSeries","Series"],"mappings":"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"}