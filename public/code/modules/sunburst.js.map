{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v12.0.1 (2024-11-28)\n * @module highcharts/modules/sunburst\n * @requires highcharts\n *\n * (c) 2016-2024 Highsoft AS\n * Authors: Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"highcharts\"), require(\"highcharts\")[\"Templating\"], require(\"highcharts\")[\"Color\"], require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"SVGElement\"], require(\"highcharts\")[\"Series\"]);\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"highcharts/sunburst\", [[\"highcharts/highcharts\"], [\"highcharts/highcharts\",\"Templating\"], [\"highcharts/highcharts\",\"Color\"], [\"highcharts/highcharts\",\"SeriesRegistry\"], [\"highcharts/highcharts\",\"SVGElement\"], [\"highcharts/highcharts\",\"Series\"]], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"highcharts/sunburst\"] = factory(require(\"highcharts\"), require(\"highcharts\")[\"Templating\"], require(\"highcharts\")[\"Color\"], require(\"highcharts\")[\"SeriesRegistry\"], require(\"highcharts\")[\"SVGElement\"], require(\"highcharts\")[\"Series\"]);\n\telse\n\t\troot[\"Highcharts\"] = factory(root[\"Highcharts\"], root[\"Highcharts\"][\"Templating\"], root[\"Highcharts\"][\"Color\"], root[\"Highcharts\"][\"SeriesRegistry\"], root[\"Highcharts\"][\"SVGElement\"], root[\"Highcharts\"][\"Series\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__944__, __WEBPACK_EXTERNAL_MODULE__984__, __WEBPACK_EXTERNAL_MODULE__620__, __WEBPACK_EXTERNAL_MODULE__512__, __WEBPACK_EXTERNAL_MODULE__28__, __WEBPACK_EXTERNAL_MODULE__820__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 620:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__620__;\n\n/***/ }),\n\n/***/ 28:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__28__;\n\n/***/ }),\n\n/***/ 820:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__820__;\n\n/***/ }),\n\n/***/ 512:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__512__;\n\n/***/ }),\n\n/***/ 984:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__984__;\n\n/***/ }),\n\n/***/ 944:\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__944__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__webpack_require__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ sunburst_src)\n});\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\"],\"commonjs\":[\"highcharts\"],\"commonjs2\":[\"highcharts\"],\"root\":[\"Highcharts\"]}\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_ = __webpack_require__(944);\nvar highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default = /*#__PURE__*/__webpack_require__.n(highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_);\n;// ./code/es-modules/Extensions/Breadcrumbs/BreadcrumbsDefaults.js\n/* *\n *\n *  Highcharts Breadcrumbs module\n *\n *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Constants\n *\n * */\n/**\n * @optionparent lang\n */\nconst lang = {\n    /**\n     * @since   10.0.0\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    mainBreadcrumb: 'Main'\n};\n/**\n * Options for breadcrumbs. Breadcrumbs general options are defined in\n * `navigation.breadcrumbs`. Specific options for drilldown are set in\n * `drilldown.breadcrumbs` and for tree-like series traversing, in\n * `plotOptions[series].breadcrumbs`.\n *\n * @since        10.0.0\n * @product      highcharts\n * @optionparent navigation.breadcrumbs\n */\nconst options = {\n    /**\n     * A collection of attributes for the buttons. The object takes SVG\n     * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n     * a collection of CSS properties for the text.\n     *\n     * The object can also be extended with states, so you can set\n     * presentational options for `hover`, `select` or `disabled` button\n     * states.\n     *\n     * @sample {highcharts} highcharts/breadcrumbs/single-button\n     *         Themed, single button\n     *\n     * @type    {Highcharts.SVGAttributes}\n     * @since   10.0.0\n     * @product highcharts\n     */\n    buttonTheme: {\n        /** @ignore */\n        fill: 'none',\n        /** @ignore */\n        height: 18,\n        /** @ignore */\n        padding: 2,\n        /** @ignore */\n        'stroke-width': 0,\n        /** @ignore */\n        zIndex: 7,\n        /** @ignore */\n        states: {\n            select: {\n                fill: 'none'\n            }\n        },\n        style: {\n            color: \"#334eff\" /* Palette.highlightColor80 */\n        }\n    },\n    /**\n     * The default padding for each button and separator in each direction.\n     *\n     * @type  {number}\n     * @since 10.0.0\n     */\n    buttonSpacing: 5,\n    /**\n     * Fires when clicking on the breadcrumbs button. Two arguments are\n     * passed to the function. First breadcrumb button as an SVG element.\n     * Second is the breadcrumbs class, containing reference to the chart,\n     * series etc.\n     *\n     * ```js\n     * click: function(button, breadcrumbs) {\n     *   console.log(button);\n     * }\n     * ```\n     *\n     * Return false to stop default buttons click action.\n     *\n     * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n     * @since     10.0.0\n     * @apioption navigation.breadcrumbs.events.click\n     */\n    /**\n     * When the breadcrumbs are floating, the plot area will not move to\n     * make space for it. By default, the chart will not make space for the\n     * buttons. This property won't work when positioned in the middle.\n     *\n     * @sample highcharts/breadcrumbs/single-button\n     *         Floating button\n     *\n     * @type  {boolean}\n     * @since 10.0.0\n     */\n    floating: false,\n    /**\n     * A format string for the breadcrumbs button. Variables are enclosed by\n     * curly brackets. Available values are passed in the declared point\n     * options.\n     *\n     * @type      {string|undefined}\n     * @since 10.0.0\n     * @default   undefined\n     * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n     *          values in breadcrumb button.\n     */\n    format: void 0,\n    /**\n     * Callback function to format the breadcrumb text from scratch.\n     *\n     * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n     * @since     10.0.0\n     * @default   undefined\n     * @apioption navigation.breadcrumbs.formatter\n     */\n    /**\n     * What box to align the button to. Can be either `plotBox` or\n     * `spacingBox`.\n     *\n     * @type    {Highcharts.ButtonRelativeToValue}\n     * @default plotBox\n     * @since   10.0.0\n     * @product highcharts highmaps\n     */\n    relativeTo: 'plotBox',\n    /**\n     * Whether to reverse the order of buttons. This is common in Arabic\n     * and Hebrew.\n     *\n     * @sample {highcharts} highcharts/breadcrumbs/rtl\n     *         Breadcrumbs in RTL\n     *\n     * @type  {boolean}\n     * @since 10.2.0\n     */\n    rtl: false,\n    /**\n     * Positioning for the button row. The breadcrumbs buttons will be\n     * aligned properly for the default chart layout (title,  subtitle,\n     * legend, range selector) for the custom chart layout set the position\n     * properties.\n     *\n     * @sample  {highcharts} highcharts/breadcrumbs/single-button\n     *          Single, right aligned button\n     *\n     * @type    {Highcharts.BreadcrumbsAlignOptions}\n     * @since   10.0.0\n     * @product highcharts highmaps\n     */\n    position: {\n        /**\n         * Horizontal alignment of the breadcrumbs buttons.\n         *\n         * @type {Highcharts.AlignValue}\n         */\n        align: 'left',\n        /**\n         * Vertical alignment of the breadcrumbs buttons.\n         *\n         * @type {Highcharts.VerticalAlignValue}\n         */\n        verticalAlign: 'top',\n        /**\n         * The X offset of the breadcrumbs button group.\n         *\n         * @type {number}\n         */\n        x: 0,\n        /**\n         * The Y offset of the breadcrumbs button group. When `undefined`,\n         * and `floating` is `false`, the `y` position is adapted so that\n         * the breadcrumbs are rendered outside the target area.\n         *\n         * @type {number|undefined}\n         */\n        y: void 0\n    },\n    /**\n     * Options object for Breadcrumbs separator.\n     *\n     * @since 10.0.0\n     */\n    separator: {\n        /**\n         * @type    {string}\n         * @since   10.0.0\n         * @product highcharts\n         */\n        text: '/',\n        /**\n         * CSS styles for the breadcrumbs separator.\n         *\n         * In styled mode, the breadcrumbs separators are styled by the\n         * `.highcharts-separator` rule with its different states.\n         *  @type  {Highcharts.CSSObject}\n         *  @since 10.0.0\n         */\n        style: {\n            color: \"#666666\" /* Palette.neutralColor60 */,\n            fontSize: '0.8em'\n        }\n    },\n    /**\n     * Show full path or only a single button.\n     *\n     * @sample {highcharts} highcharts/breadcrumbs/single-button\n     *         Single, styled button\n     *\n     * @type  {boolean}\n     * @since 10.0.0\n     */\n    showFullPath: true,\n    /**\n     * CSS styles for all breadcrumbs.\n     *\n     * In styled mode, the breadcrumbs buttons are styled by the\n     * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n     * different states.\n     *\n     * @type  {Highcharts.SVGAttributes}\n     * @since 10.0.0\n     */\n    style: {},\n    /**\n     * Whether to use HTML to render the breadcrumbs items texts.\n     *\n     * @type  {boolean}\n     * @since 10.0.0\n     */\n    useHTML: false,\n    /**\n     * The z index of the breadcrumbs group.\n     *\n     * @type  {number}\n     * @since 10.0.0\n     */\n    zIndex: 7\n};\n/* *\n *\n *  Default Export\n *\n * */\nconst BreadcrumbsDefaults = {\n    lang,\n    options\n};\n/* harmony default export */ const Breadcrumbs_BreadcrumbsDefaults = (BreadcrumbsDefaults);\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"Templating\"],\"commonjs\":[\"highcharts\",\"Templating\"],\"commonjs2\":[\"highcharts\",\"Templating\"],\"root\":[\"Highcharts\",\"Templating\"]}\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_ = __webpack_require__(984);\nvar highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default = /*#__PURE__*/__webpack_require__.n(highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_);\n;// ./code/es-modules/Extensions/Breadcrumbs/Breadcrumbs.js\n/* *\n *\n *  Highcharts Breadcrumbs module\n *\n *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { format } = (highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default());\n\nconst { composed } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n\nconst { addEvent, defined, extend, fireEvent, isString, merge, objectEach, pick, pushUnique } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Shift the drillUpButton to make the space for resetZoomButton, #8095.\n * @private\n */\nfunction onChartAfterShowResetZoom() {\n    const chart = this;\n    if (chart.breadcrumbs) {\n        const bbox = chart.resetZoomButton &&\n            chart.resetZoomButton.getBBox(), breadcrumbsOptions = chart.breadcrumbs.options;\n        if (bbox &&\n            breadcrumbsOptions.position.align === 'right' &&\n            breadcrumbsOptions.relativeTo === 'plotBox') {\n            chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n        }\n    }\n}\n/**\n * Remove resize/afterSetExtremes at chart destroy.\n * @private\n */\nfunction onChartDestroy() {\n    if (this.breadcrumbs) {\n        this.breadcrumbs.destroy();\n        this.breadcrumbs = void 0;\n    }\n}\n/**\n * Logic for making space for the buttons above the plot area\n * @private\n */\nfunction onChartGetMargins() {\n    const breadcrumbs = this.breadcrumbs;\n    if (breadcrumbs &&\n        !breadcrumbs.options.floating &&\n        breadcrumbs.level) {\n        const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, breadcrumbsHeight = ((buttonTheme.height || 0) +\n            2 * (buttonTheme.padding || 0) +\n            breadcrumbsOptions.buttonSpacing), verticalAlign = breadcrumbsOptions.position.verticalAlign;\n        if (verticalAlign === 'bottom') {\n            this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n            breadcrumbs.yOffset = breadcrumbsHeight;\n        }\n        else if (verticalAlign !== 'middle') {\n            this.plotTop += breadcrumbsHeight;\n            breadcrumbs.yOffset = -breadcrumbsHeight;\n        }\n        else {\n            breadcrumbs.yOffset = void 0;\n        }\n    }\n}\n/**\n * @private\n */\nfunction onChartRedraw() {\n    this.breadcrumbs && this.breadcrumbs.redraw();\n}\n/**\n * After zooming out, shift the drillUpButton to the previous position, #8095.\n * @private\n */\nfunction onChartSelection(event) {\n    if (event.resetSelection === true &&\n        this.breadcrumbs) {\n        this.breadcrumbs.alignBreadcrumbsGroup();\n    }\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * The Breadcrumbs class\n *\n * @private\n * @class\n * @name Highcharts.Breadcrumbs\n *\n * @param {Highcharts.Chart} chart\n *        Chart object\n * @param {Highcharts.Options} userOptions\n *        User options\n */\nclass Breadcrumbs {\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    static compose(ChartClass, highchartsDefaultOptions) {\n        if (pushUnique(composed, 'Breadcrumbs')) {\n            addEvent(ChartClass, 'destroy', onChartDestroy);\n            addEvent(ChartClass, 'afterShowResetZoom', onChartAfterShowResetZoom);\n            addEvent(ChartClass, 'getMargins', onChartGetMargins);\n            addEvent(ChartClass, 'redraw', onChartRedraw);\n            addEvent(ChartClass, 'selection', onChartSelection);\n            // Add language support.\n            extend(highchartsDefaultOptions.lang, Breadcrumbs_BreadcrumbsDefaults.lang);\n        }\n    }\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(chart, userOptions) {\n        this.elementList = {};\n        this.isDirty = true;\n        this.level = 0;\n        this.list = [];\n        const chartOptions = merge(chart.options.drilldown &&\n            chart.options.drilldown.drillUpButton, Breadcrumbs.defaultOptions, chart.options.navigation && chart.options.navigation.breadcrumbs, userOptions);\n        this.chart = chart;\n        this.options = chartOptions || {};\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Update Breadcrumbs properties, like level and list.\n     *\n     * @function Highcharts.Breadcrumbs#updateProperties\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    updateProperties(list) {\n        this.setList(list);\n        this.setLevel();\n        this.isDirty = true;\n    }\n    /**\n     * Set breadcrumbs list.\n     * @function Highcharts.Breadcrumbs#setList\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.BreadcrumbsOptions} list\n     *        Breadcrumbs list.\n     */\n    setList(list) {\n        this.list = list;\n    }\n    /**\n     * Calculate level on which chart currently is.\n     *\n     * @function Highcharts.Breadcrumbs#setLevel\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    setLevel() {\n        this.level = this.list.length && this.list.length - 1;\n    }\n    /**\n     * Get Breadcrumbs level\n     *\n     * @function Highcharts.Breadcrumbs#getLevel\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    getLevel() {\n        return this.level;\n    }\n    /**\n     * Default button text formatter.\n     *\n     * @function Highcharts.Breadcrumbs#getButtonText\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.Breadcrumbs} breadcrumb\n     *        Breadcrumb.\n     * @return {string}\n     *         Formatted text.\n     */\n    getButtonText(breadcrumb) {\n        const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options, lang = chart.options.lang, textFormat = pick(breadcrumbsOptions.format, breadcrumbsOptions.showFullPath ?\n            '{level.name}' : '← {level.name}'), defaultText = lang && pick(lang.drillUpText, lang.mainBreadcrumb);\n        let returnText = breadcrumbsOptions.formatter &&\n            breadcrumbsOptions.formatter(breadcrumb) ||\n            format(textFormat, { level: breadcrumb.levelOptions }, chart) || '';\n        if (((isString(returnText) &&\n            !returnText.length) ||\n            returnText === '← ') &&\n            defined(defaultText)) {\n            returnText = !breadcrumbsOptions.showFullPath ?\n                '← ' + defaultText :\n                defaultText;\n        }\n        return returnText;\n    }\n    /**\n     * Redraw.\n     *\n     * @function Highcharts.Breadcrumbs#redraw\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    redraw() {\n        if (this.isDirty) {\n            this.render();\n        }\n        if (this.group) {\n            this.group.align();\n        }\n        this.isDirty = false;\n    }\n    /**\n     * Create a group, then draw breadcrumbs together with the separators.\n     *\n     * @function Highcharts.Breadcrumbs#render\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    render() {\n        const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options;\n        // A main group for the breadcrumbs.\n        if (!breadcrumbs.group && breadcrumbsOptions) {\n            breadcrumbs.group = chart.renderer\n                .g('breadcrumbs-group')\n                .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                .attr({\n                zIndex: breadcrumbsOptions.zIndex\n            })\n                .add();\n        }\n        // Draw breadcrumbs.\n        if (breadcrumbsOptions.showFullPath) {\n            this.renderFullPathButtons();\n        }\n        else {\n            this.renderSingleButton();\n        }\n        this.alignBreadcrumbsGroup();\n    }\n    /**\n     * Draw breadcrumbs together with the separators.\n     *\n     * @function Highcharts.Breadcrumbs#renderFullPathButtons\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    renderFullPathButtons() {\n        // Make sure that only one type of button is visible.\n        this.destroySingleButton();\n        this.resetElementListState();\n        this.updateListElements();\n        this.destroyListElements();\n    }\n    /**\n     * Render Single button - when showFullPath is not used. The button is\n     * similar to the old drillUpButton\n     *\n     * @function Highcharts.Breadcrumbs#renderSingleButton\n     * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n     */\n    renderSingleButton() {\n        const breadcrumbs = this, chart = breadcrumbs.chart, list = breadcrumbs.list, breadcrumbsOptions = breadcrumbs.options, buttonSpacing = breadcrumbsOptions.buttonSpacing;\n        // Make sure that only one type of button is visible.\n        this.destroyListElements();\n        // Draw breadcrumbs. Initial position for calculating the breadcrumbs\n        // group.\n        const posX = breadcrumbs.group ?\n            breadcrumbs.group.getBBox().width :\n            buttonSpacing, posY = buttonSpacing;\n        const previousBreadcrumb = list[list.length - 2];\n        if (!chart.drillUpButton && (this.level > 0)) {\n            chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n        }\n        else if (chart.drillUpButton) {\n            if (this.level > 0) {\n                // Update button.\n                this.updateSingleButton();\n            }\n            else {\n                this.destroySingleButton();\n            }\n        }\n    }\n    /**\n     * Update group position based on align and it's width.\n     *\n     * @function Highcharts.Breadcrumbs#renderSingleButton\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    alignBreadcrumbsGroup(xOffset) {\n        const breadcrumbs = this;\n        if (breadcrumbs.group) {\n            const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, positionOptions = breadcrumbsOptions.position, alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                void 0 :\n                'plotBox'), bBox = breadcrumbs.group.getBBox(), additionalSpace = 2 * (buttonTheme.padding || 0) +\n                breadcrumbsOptions.buttonSpacing;\n            // Store positionOptions\n            positionOptions.width = bBox.width + additionalSpace;\n            positionOptions.height = bBox.height + additionalSpace;\n            const newPositions = merge(positionOptions);\n            // Add x offset if specified.\n            if (xOffset) {\n                newPositions.x += xOffset;\n            }\n            if (breadcrumbs.options.rtl) {\n                newPositions.x += positionOptions.width;\n            }\n            newPositions.y = pick(newPositions.y, this.yOffset, 0);\n            breadcrumbs.group.align(newPositions, true, alignTo);\n        }\n    }\n    /**\n     * Render a button.\n     *\n     * @function Highcharts.Breadcrumbs#renderButton\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.Breadcrumbs} breadcrumb\n     *        Current breadcrumb\n     * @param {Highcharts.Breadcrumbs} posX\n     *        Initial horizontal position\n     * @param {Highcharts.Breadcrumbs} posY\n     *        Initial vertical position\n     * @return {SVGElement|void}\n     *        Returns the SVG button\n     */\n    renderButton(breadcrumb, posX, posY) {\n        const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n        const button = chart.renderer\n            .button(breadcrumbs.getButtonText(breadcrumb), posX, posY, function (e) {\n            // Extract events from button object and call\n            const buttonEvents = breadcrumbsOptions.events &&\n                breadcrumbsOptions.events.click;\n            let callDefaultEvent;\n            if (buttonEvents) {\n                callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n            }\n            // (difference in behaviour of showFullPath and drillUp)\n            if (callDefaultEvent !== false) {\n                // For single button we are not going to the button\n                // level, but the one level up\n                if (!breadcrumbsOptions.showFullPath) {\n                    e.newLevel = breadcrumbs.level - 1;\n                }\n                else {\n                    e.newLevel = breadcrumb.level;\n                }\n                fireEvent(breadcrumbs, 'up', e);\n            }\n        }, buttonTheme)\n            .addClass('highcharts-breadcrumbs-button')\n            .add(breadcrumbs.group);\n        if (!chart.styledMode) {\n            button.attr(breadcrumbsOptions.style);\n        }\n        return button;\n    }\n    /**\n     * Render a separator.\n     *\n     * @function Highcharts.Breadcrumbs#renderSeparator\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.Breadcrumbs} posX\n     *        Initial horizontal position\n     * @param {Highcharts.Breadcrumbs} posY\n     *        Initial vertical position\n     * @return {Highcharts.SVGElement}\n     *        Returns the SVG button\n     */\n    renderSeparator(posX, posY) {\n        const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, separatorOptions = breadcrumbsOptions.separator;\n        const separator = chart.renderer\n            .label(separatorOptions.text, posX, posY, void 0, void 0, void 0, false)\n            .addClass('highcharts-breadcrumbs-separator')\n            .add(breadcrumbs.group);\n        if (!chart.styledMode) {\n            separator.css(separatorOptions.style);\n        }\n        return separator;\n    }\n    /**\n     * Update.\n     * @function Highcharts.Breadcrumbs#update\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     * @param {Highcharts.BreadcrumbsOptions} options\n     *        Breadcrumbs class.\n     * @param {boolean} redraw\n     *        Redraw flag\n     */\n    update(options) {\n        merge(true, this.options, options);\n        this.destroy();\n        this.isDirty = true;\n    }\n    /**\n     * Update button text when the showFullPath set to false.\n     * @function Highcharts.Breadcrumbs#updateSingleButton\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    updateSingleButton() {\n        const chart = this.chart, currentBreadcrumb = this.list[this.level - 1];\n        if (chart.drillUpButton) {\n            chart.drillUpButton.attr({\n                text: this.getButtonText(currentBreadcrumb)\n            });\n        }\n    }\n    /**\n     * Destroy the chosen breadcrumbs group\n     *\n     * @function Highcharts.Breadcrumbs#destroy\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    destroy() {\n        this.destroySingleButton();\n        // Destroy elements one by one. It's necessary because\n        // g().destroy() does not remove added HTML\n        this.destroyListElements(true);\n        // Then, destroy the group itself.\n        if (this.group) {\n            this.group.destroy();\n        }\n        this.group = void 0;\n    }\n    /**\n     * Destroy the elements' buttons and separators.\n     *\n     * @function Highcharts.Breadcrumbs#destroyListElements\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    destroyListElements(force) {\n        const elementList = this.elementList;\n        objectEach(elementList, (element, level) => {\n            if (force ||\n                !elementList[level].updated) {\n                element = elementList[level];\n                element.button && element.button.destroy();\n                element.separator && element.separator.destroy();\n                delete element.button;\n                delete element.separator;\n                delete elementList[level];\n            }\n        });\n        if (force) {\n            this.elementList = {};\n        }\n    }\n    /**\n     * Destroy the single button if exists.\n     *\n     * @function Highcharts.Breadcrumbs#destroySingleButton\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    destroySingleButton() {\n        if (this.chart.drillUpButton) {\n            this.chart.drillUpButton.destroy();\n            this.chart.drillUpButton = void 0;\n        }\n    }\n    /**\n     * Reset state for all buttons in elementList.\n     *\n     * @function Highcharts.Breadcrumbs#resetElementListState\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    resetElementListState() {\n        objectEach(this.elementList, (element) => {\n            element.updated = false;\n        });\n    }\n    /**\n     * Update rendered elements inside the elementList.\n     *\n     * @function Highcharts.Breadcrumbs#updateListElements\n     *\n     * @param {Highcharts.Breadcrumbs} this\n     *        Breadcrumbs class.\n     */\n    updateListElements() {\n        const breadcrumbs = this, elementList = breadcrumbs.elementList, buttonSpacing = breadcrumbs.options.buttonSpacing, posY = buttonSpacing, list = breadcrumbs.list, rtl = breadcrumbs.options.rtl, rtlFactor = rtl ? -1 : 1, updateXPosition = function (element, spacing) {\n            return rtlFactor * element.getBBox().width +\n                rtlFactor * spacing;\n        }, adjustToRTL = function (element, posX, posY) {\n            element.translate(posX - element.getBBox().width, posY);\n        };\n        // Initial position for calculating the breadcrumbs group.\n        let posX = breadcrumbs.group ?\n            updateXPosition(breadcrumbs.group, buttonSpacing) :\n            buttonSpacing, currentBreadcrumb, breadcrumb;\n        for (let i = 0, iEnd = list.length; i < iEnd; ++i) {\n            const isLast = i === iEnd - 1;\n            let button, separator;\n            breadcrumb = list[i];\n            if (elementList[breadcrumb.level]) {\n                currentBreadcrumb = elementList[breadcrumb.level];\n                button = currentBreadcrumb.button;\n                // Render a separator if it was not created before.\n                if (!currentBreadcrumb.separator &&\n                    !isLast) {\n                    // Add spacing for the next separator\n                    posX += rtlFactor * buttonSpacing;\n                    currentBreadcrumb.separator =\n                        breadcrumbs.renderSeparator(posX, posY);\n                    if (rtl) {\n                        adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                    }\n                    posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                }\n                else if (currentBreadcrumb.separator &&\n                    isLast) {\n                    currentBreadcrumb.separator.destroy();\n                    delete currentBreadcrumb.separator;\n                }\n                elementList[breadcrumb.level].updated = true;\n            }\n            else {\n                // Render a button.\n                button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                if (rtl) {\n                    adjustToRTL(button, posX, posY);\n                }\n                posX += updateXPosition(button, buttonSpacing);\n                // Render a separator.\n                if (!isLast) {\n                    separator = breadcrumbs.renderSeparator(posX, posY);\n                    if (rtl) {\n                        adjustToRTL(separator, posX, posY);\n                    }\n                    posX += updateXPosition(separator, buttonSpacing);\n                }\n                elementList[breadcrumb.level] = {\n                    button,\n                    separator,\n                    updated: true\n                };\n            }\n            if (button) {\n                button.setState(isLast ? 2 : 0);\n            }\n        }\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nBreadcrumbs.defaultOptions = Breadcrumbs_BreadcrumbsDefaults.options;\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Breadcrumbs_Breadcrumbs = (Breadcrumbs);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Callback function to react on button clicks.\n *\n * @callback Highcharts.BreadcrumbsClickCallbackFunction\n *\n * @param {Highcharts.Event} event\n * Event.\n *\n * @param {Highcharts.BreadcrumbOptions} options\n * Breadcrumb options.\n *\n * @param {global.Event} e\n * Event arguments.\n */\n/**\n * Callback function to format the breadcrumb text from scratch.\n *\n * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n *\n * @param {Highcharts.Event} event\n * Event.\n *\n * @param {Highcharts.BreadcrumbOptions} options\n * Breadcrumb options.\n *\n * @return {string}\n * Formatted text or false\n */\n/**\n * Options for the one breadcrumb.\n *\n * @interface Highcharts.BreadcrumbOptions\n */\n/**\n * Level connected to a specific breadcrumb.\n * @name Highcharts.BreadcrumbOptions#level\n * @type {number}\n */\n/**\n * Options for series or point connected to a specific breadcrumb.\n * @name Highcharts.BreadcrumbOptions#levelOptions\n * @type {SeriesOptions|PointOptionsObject}\n */\n/**\n * Options for aligning breadcrumbs group.\n *\n * @interface Highcharts.BreadcrumbsAlignOptions\n */\n/**\n * Align of a Breadcrumb group.\n * @default right\n * @name Highcharts.BreadcrumbsAlignOptions#align\n * @type {AlignValue}\n */\n/**\n * Vertical align of a Breadcrumb group.\n * @default top\n * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n * @type {VerticalAlignValue}\n */\n/**\n * X offset of a Breadcrumbs group.\n * @name Highcharts.BreadcrumbsAlignOptions#x\n * @type {number}\n */\n/**\n * Y offset of a Breadcrumbs group.\n * @name Highcharts.BreadcrumbsAlignOptions#y\n * @type {number}\n */\n/**\n * Options for all breadcrumbs.\n *\n * @interface Highcharts.BreadcrumbsOptions\n */\n/**\n * Button theme.\n * @name Highcharts.BreadcrumbsOptions#buttonTheme\n * @type { SVGAttributes | undefined }\n */\n(''); // Keeps doclets above in JS file\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"Color\"],\"commonjs\":[\"highcharts\",\"Color\"],\"commonjs2\":[\"highcharts\",\"Color\"],\"root\":[\"Highcharts\",\"Color\"]}\nvar highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_ = __webpack_require__(620);\nvar highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default = /*#__PURE__*/__webpack_require__.n(highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_);\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"SeriesRegistry\"],\"commonjs\":[\"highcharts\",\"SeriesRegistry\"],\"commonjs2\":[\"highcharts\",\"SeriesRegistry\"],\"root\":[\"Highcharts\",\"SeriesRegistry\"]}\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_ = __webpack_require__(512);\nvar highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default = /*#__PURE__*/__webpack_require__.n(highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_);\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"SVGElement\"],\"commonjs\":[\"highcharts\",\"SVGElement\"],\"commonjs2\":[\"highcharts\",\"SVGElement\"],\"root\":[\"Highcharts\",\"SVGElement\"]}\nvar highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_ = __webpack_require__(28);\nvar highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_default = /*#__PURE__*/__webpack_require__.n(highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_);\n;// ./code/es-modules/Series/ColorMapComposition.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { column: { prototype: columnProto } } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes;\n\n\nconst { addEvent: ColorMapComposition_addEvent, defined: ColorMapComposition_defined } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Composition\n *\n * */\nvar ColorMapComposition;\n(function (ColorMapComposition) {\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    ColorMapComposition.pointMembers = {\n        dataLabelOnNull: true,\n        moveToTopOnHover: true,\n        isValid: pointIsValid\n    };\n    ColorMapComposition.seriesMembers = {\n        colorKey: 'value',\n        axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n        parallelArrays: ['x', 'y', 'value'],\n        pointArrayMap: ['value'],\n        trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n        colorAttribs: seriesColorAttribs,\n        pointAttribs: columnProto.pointAttribs\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * @private\n     */\n    function compose(SeriesClass) {\n        const PointClass = SeriesClass.prototype.pointClass;\n        ColorMapComposition_addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n        return SeriesClass;\n    }\n    ColorMapComposition.compose = compose;\n    /**\n     * Move points to the top of the z-index order when hovered.\n     * @private\n     */\n    function onPointAfterSetState(e) {\n        const point = this, series = point.series, renderer = series.chart.renderer;\n        if (point.moveToTopOnHover && point.graphic) {\n            if (!series.stateMarkerGraphic) {\n                // Create a `use` element and add it to the end of the group,\n                // which would make it appear on top of the other elements. This\n                // deals with z-index without reordering DOM elements (#13049).\n                series.stateMarkerGraphic = new (highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_default())(renderer, 'use')\n                    .css({\n                    pointerEvents: 'none'\n                })\n                    .add(point.graphic.parentGroup);\n            }\n            if (e?.state === 'hover') {\n                // Give the graphic DOM element the same id as the Point\n                // instance\n                point.graphic.attr({\n                    id: this.id\n                });\n                series.stateMarkerGraphic.attr({\n                    href: `${renderer.url}#${this.id}`,\n                    visibility: 'visible'\n                });\n            }\n            else {\n                series.stateMarkerGraphic.attr({\n                    href: ''\n                });\n            }\n        }\n    }\n    /**\n     * Color points have a value option that determines whether or not it is\n     * a null point\n     * @private\n     */\n    function pointIsValid() {\n        return (this.value !== null &&\n            this.value !== Infinity &&\n            this.value !== -Infinity &&\n            // Undefined is allowed, but NaN is not (#17279)\n            (this.value === void 0 || !isNaN(this.value)));\n    }\n    /**\n     * Get the color attributes to apply on the graphic\n     * @private\n     * @function Highcharts.colorMapSeriesMixin.colorAttribs\n     * @param {Highcharts.Point} point\n     * @return {Highcharts.SVGAttributes}\n     *         The SVG attributes\n     */\n    function seriesColorAttribs(point) {\n        const ret = {};\n        if (ColorMapComposition_defined(point.color) &&\n            (!point.state || point.state === 'normal') // #15746\n        ) {\n            ret[this.colorProp || 'fill'] = point.color;\n        }\n        return ret;\n    }\n})(ColorMapComposition || (ColorMapComposition = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Series_ColorMapComposition = (ColorMapComposition);\n\n;// ./code/es-modules/Series/Treemap/TreemapAlgorithmGroup.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Class\n *\n * */\nclass TreemapAlgorithmGroup {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    constructor(h, w, d, p) {\n        this.height = h;\n        this.width = w;\n        this.plot = p;\n        this.direction = d;\n        this.startDirection = d;\n        this.total = 0;\n        this.nW = 0;\n        this.lW = 0;\n        this.nH = 0;\n        this.lH = 0;\n        this.elArr = [];\n        this.lP = {\n            total: 0,\n            lH: 0,\n            nH: 0,\n            lW: 0,\n            nW: 0,\n            nR: 0,\n            lR: 0,\n            aspectRatio: function (w, h) {\n                return Math.max((w / h), (h / w));\n            }\n        };\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    addElement(el) {\n        this.lP.total = this.elArr[this.elArr.length - 1];\n        this.total = this.total + el;\n        if (this.direction === 0) {\n            // Calculate last point old aspect ratio\n            this.lW = this.nW;\n            this.lP.lH = this.lP.total / this.lW;\n            this.lP.lR = this.lP.aspectRatio(this.lW, this.lP.lH);\n            // Calculate last point new aspect ratio\n            this.nW = this.total / this.height;\n            this.lP.nH = this.lP.total / this.nW;\n            this.lP.nR = this.lP.aspectRatio(this.nW, this.lP.nH);\n        }\n        else {\n            // Calculate last point old aspect ratio\n            this.lH = this.nH;\n            this.lP.lW = this.lP.total / this.lH;\n            this.lP.lR = this.lP.aspectRatio(this.lP.lW, this.lH);\n            // Calculate last point new aspect ratio\n            this.nH = this.total / this.width;\n            this.lP.nW = this.lP.total / this.nH;\n            this.lP.nR = this.lP.aspectRatio(this.lP.nW, this.nH);\n        }\n        this.elArr.push(el);\n    }\n    reset() {\n        this.nW = 0;\n        this.lW = 0;\n        this.elArr = [];\n        this.total = 0;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapAlgorithmGroup = (TreemapAlgorithmGroup);\n\n;// ./code/es-modules/Series/Treemap/TreemapNode.js\n/* *\n *\n *  (c) 2010-2024 Pawel Lysy\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Class\n *\n * */\nclass TreemapNode {\n    constructor() {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        this.childrenTotal = 0;\n        this.visible = false;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    init(id, i, children, height, level, series, parent) {\n        this.id = id;\n        this.i = i;\n        this.children = children;\n        this.height = height;\n        this.level = level;\n        this.series = series;\n        this.parent = parent;\n        return this;\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapNode = (TreemapNode);\n\n;// ./code/es-modules/Series/DrawPointUtilities.js\n/* *\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Handles the drawing of a component.\n * Can be used for any type of component that reserves the graphic property,\n * and provides a shouldDraw on its context.\n *\n * @private\n *\n * @todo add type checking.\n * @todo export this function to enable usage\n */\nfunction draw(point, params) {\n    const { animatableAttribs, onComplete, css, renderer } = params;\n    const animation = (point.series && point.series.chart.hasRendered) ?\n        // Chart-level animation on updates\n        void 0 :\n        // Series-level animation on new points\n        (point.series &&\n            point.series.options.animation);\n    let graphic = point.graphic;\n    params.attribs = {\n        ...params.attribs,\n        'class': point.getClassName()\n    } || {};\n    if ((point.shouldDraw())) {\n        if (!graphic) {\n            if (params.shapeType === 'text') {\n                graphic = renderer.text();\n            }\n            else if (params.shapeType === 'image') {\n                graphic = renderer.image(params.imageUrl || '')\n                    .attr(params.shapeArgs || {});\n            }\n            else {\n                graphic = renderer[params.shapeType](params.shapeArgs || {});\n            }\n            point.graphic = graphic;\n            graphic.add(params.group);\n        }\n        if (css) {\n            graphic.css(css);\n        }\n        graphic\n            .attr(params.attribs)\n            .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n    }\n    else if (graphic) {\n        const destroy = () => {\n            point.graphic = graphic = (graphic && graphic.destroy());\n            if (typeof onComplete === 'function') {\n                onComplete();\n            }\n        };\n        // Animate only runs complete callback if something was animated.\n        if (Object.keys(animatableAttribs).length) {\n            graphic.animate(animatableAttribs, void 0, () => destroy());\n        }\n        else {\n            destroy();\n        }\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst DrawPointUtilities = {\n    draw\n};\n/* harmony default export */ const Series_DrawPointUtilities = (DrawPointUtilities);\n\n;// ./code/es-modules/Series/Treemap/TreemapPoint.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { pie: { prototype: { pointClass: PiePoint } }, scatter: { prototype: { pointClass: ScatterPoint } } } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes;\n\nconst { extend: TreemapPoint_extend, isNumber, pick: TreemapPoint_pick } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Class\n *\n * */\nclass TreemapPoint extends ScatterPoint {\n    constructor() {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        super(...arguments);\n        this.shapeType = 'rect';\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    draw(params) {\n        Series_DrawPointUtilities.draw(this, params);\n    }\n    getClassName() {\n        const series = this.series, options = series.options;\n        let className = super.getClassName();\n        // Above the current level\n        if (this.node.level <= series.nodeMap[series.rootNode].level &&\n            this.node.children.length) {\n            className += ' highcharts-above-level';\n        }\n        else if (!this.node.isLeaf &&\n            !TreemapPoint_pick(options.interactByLeaf, !options.allowTraversingTree)) {\n            className += ' highcharts-internal-node-interactive';\n        }\n        else if (!this.node.isLeaf) {\n            className += ' highcharts-internal-node';\n        }\n        return className;\n    }\n    /**\n     * A tree point is valid if it has han id too, assume it may be a parent\n     * item.\n     *\n     * @private\n     * @function Highcharts.Point#isValid\n     */\n    isValid() {\n        return Boolean(this.id || isNumber(this.value));\n    }\n    setState(state) {\n        super.setState.apply(this, arguments);\n        // Graphic does not exist when point is not visible.\n        if (this.graphic) {\n            this.graphic.attr({\n                zIndex: state === 'hover' ? 1 : 0\n            });\n        }\n    }\n    shouldDraw() {\n        return isNumber(this.plotY) && this.y !== null;\n    }\n}\nTreemapPoint_extend(TreemapPoint.prototype, {\n    setVisible: PiePoint.prototype.setVisible\n});\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapPoint = (TreemapPoint);\n\n;// ./code/es-modules/Series/Treemap/TreemapSeriesDefaults.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { isString: TreemapSeriesDefaults_isString } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A treemap displays hierarchical data using nested rectangles. The data\n * can be laid out in varying ways depending on options.\n *\n * @sample highcharts/demo/treemap-large-dataset/\n *         Treemap\n *\n * @extends      plotOptions.scatter\n * @excluding    cluster, connectEnds, connectNulls, dataSorting, dragDrop, jitter, marker\n * @product      highcharts\n * @requires     modules/treemap\n * @optionparent plotOptions.treemap\n */\nconst TreemapSeriesDefaults = {\n    /**\n     * When enabled the user can click on a point which is a parent and\n     * zoom in on its children. Deprecated and replaced by\n     * [allowTraversingTree](#plotOptions.treemap.allowTraversingTree).\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-allowdrilltonode/\n     *         Enabled\n     *\n     * @deprecated\n     * @type      {boolean}\n     * @default   false\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.allowDrillToNode\n     */\n    /**\n     * When enabled the user can click on a point which is a parent and\n     * zoom in on its children.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-allowtraversingtree/\n     *         Enabled\n     *\n     * @since     7.0.3\n     * @product   highcharts\n     */\n    allowTraversingTree: false,\n    animationLimit: 250,\n    /**\n     * The border radius for each treemap item.\n     */\n    borderRadius: 0,\n    /**\n     * Options for the breadcrumbs, the navigation at the top leading the\n     * way up through the traversed levels.\n     *\n     *\n     * @since 10.0.0\n     * @product   highcharts\n     * @extends   navigation.breadcrumbs\n     * @apioption plotOptions.treemap.breadcrumbs\n     */\n    /**\n     * When the series contains less points than the crop threshold, all\n     * points are drawn, event if the points fall outside the visible plot\n     * area at the current zoom. The advantage of drawing all points\n     * (including markers and columns), is that animation is performed on\n     * updates. On the other hand, when the series contains more points than\n     * the crop threshold, the series data is cropped to only contain points\n     * that fall within the plot area. The advantage of cropping away\n     * invisible points is to increase performance on large series.\n     *\n     * @type      {number}\n     * @default   300\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.cropThreshold\n     */\n    /**\n     * Fires on a request for change of root node for the tree, before the\n     * update is made. An event object is passed to the function, containing\n     * additional properties `newRootId`, `previousRootId`, `redraw` and\n     * `trigger`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-events-setrootnode/\n     *         Alert update information on setRootNode event.\n     *\n     * @type {Function}\n     * @default undefined\n     * @since 7.0.3\n     * @product highcharts\n     * @apioption plotOptions.treemap.events.setRootNode\n     */\n    /**\n     * This option decides if the user can interact with the parent nodes\n     * or just the leaf nodes. When this option is undefined, it will be\n     * true by default. However when allowTraversingTree is true, then it\n     * will be false by default.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-false/\n     *         False\n     * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-true-and-allowtraversingtree/\n     *         InteractByLeaf and allowTraversingTree is true\n     *\n     * @type      {boolean}\n     * @since     4.1.2\n     * @product   highcharts\n     * @apioption plotOptions.treemap.interactByLeaf\n     */\n    /**\n     * The sort index of the point inside the treemap level.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-sortindex/\n     *         Sort by years\n     *\n     * @type      {number}\n     * @since     4.1.10\n     * @product   highcharts\n     * @apioption plotOptions.treemap.sortIndex\n     */\n    /**\n     * A series specific or series type specific color set to apply instead\n     * of the global [colors](#colors) when\n     * [colorByPoint](#plotOptions.treemap.colorByPoint) is true.\n     *\n     * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n     * @since     3.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.colors\n     */\n    /**\n     * Whether to display this series type or specific series item in the\n     * legend.\n     */\n    showInLegend: false,\n    /**\n     * @ignore-option\n     */\n    marker: void 0,\n    /**\n     * When using automatic point colors pulled from the `options.colors`\n     * collection, this option determines whether the chart should receive\n     * one color per series or one color per point.\n     *\n     * @see [series colors](#plotOptions.treemap.colors)\n     *\n     * @since     2.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.colorByPoint\n     */\n    colorByPoint: false,\n    /**\n     * @since 4.1.0\n     */\n    dataLabels: {\n        defer: false,\n        enabled: true,\n        formatter: function () {\n            const point = this && this.point ?\n                this.point :\n                {}, name = TreemapSeriesDefaults_isString(point.name) ? point.name : '';\n            return name;\n        },\n        inside: true,\n        verticalAlign: 'middle'\n    },\n    tooltip: {\n        headerFormat: '',\n        pointFormat: '<b>{point.name}</b>: {point.value}<br/>'\n    },\n    /**\n     * Whether to ignore hidden points when the layout algorithm runs.\n     * If `false`, hidden points will leave open spaces.\n     *\n     * @since 5.0.8\n     */\n    ignoreHiddenPoint: true,\n    /**\n     * This option decides which algorithm is used for setting position\n     * and dimensions of the points.\n     *\n     * @see [How to write your own algorithm](https://www.highcharts.com/docs/chart-and-series-types/treemap)\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/\n     *         SliceAndDice by default\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-stripes/\n     *         Stripes\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-squarified/\n     *         Squarified\n     * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-strip/\n     *         Strip\n     *\n     * @since      4.1.0\n     * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n     */\n    layoutAlgorithm: 'sliceAndDice',\n    /**\n     * Defines which direction the layout algorithm will start drawing.\n     *\n     * @since       4.1.0\n     * @validvalue [\"vertical\", \"horizontal\"]\n     */\n    layoutStartingDirection: 'vertical',\n    /**\n     * Enabling this option will make the treemap alternate the drawing\n     * direction between vertical and horizontal. The next levels starting\n     * direction will always be the opposite of the previous.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-alternatestartingdirection-true/\n     *         Enabled\n     *\n     * @since 4.1.0\n     */\n    alternateStartingDirection: false,\n    /**\n     * Used together with the levels and allowTraversingTree options. When\n     * set to false the first level visible to be level one, which is\n     * dynamic when traversing the tree. Otherwise the level will be the\n     * same as the tree structure.\n     *\n     * @since 4.1.0\n     */\n    levelIsConstant: true,\n    /**\n     * Options for the button appearing when traversing down in a treemap.\n     *\n     * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n     *\n     * @deprecated\n     */\n    traverseUpButton: {\n        /**\n         * The position of the button.\n         */\n        position: {\n            /**\n             * Vertical alignment of the button.\n             *\n             * @type      {Highcharts.VerticalAlignValue}\n             * @default   top\n             * @product   highcharts\n             * @apioption plotOptions.treemap.traverseUpButton.position.verticalAlign\n             */\n            /**\n             * Horizontal alignment of the button.\n             *\n             * @type {Highcharts.AlignValue}\n             */\n            align: 'right',\n            /**\n             * Horizontal offset of the button.\n             */\n            x: -10,\n            /**\n             * Vertical offset of the button.\n             */\n            y: 10\n        }\n    },\n    /**\n     * Set options on specific levels. Takes precedence over series options,\n     * but not point options.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n     *         Styling dataLabels and borders\n     * @sample {highcharts} highcharts/demo/treemap-with-levels/\n     *         Different layoutAlgorithm\n     *\n     * @type      {Array<*>}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels\n     */\n    /**\n     * Can set a `borderColor` on all points which lies on the same level.\n     *\n     * @type      {Highcharts.ColorString}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.borderColor\n     */\n    /**\n     * Set the dash style of the border of all the point which lies on the\n     * level. See\n     * [plotOptions.scatter.dashStyle](#plotoptions.scatter.dashstyle)\n     * for possible options.\n     *\n     * @type      {Highcharts.DashStyleValue}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.borderDashStyle\n     */\n    /**\n     * Can set the borderWidth on all points which lies on the same level.\n     *\n     * @type      {number}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.borderWidth\n     */\n    /**\n     * Can set a color on all points which lies on the same level.\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.color\n     */\n    /**\n     * A configuration object to define how the color of a child varies from\n     * the parent's color. The variation is distributed among the children\n     * of node. For example when setting brightness, the brightness change\n     * will range from the parent's original brightness on the first child,\n     * to the amount set in the `to` setting on the last node. This allows a\n     * gradient-like color scheme that sets children out from each other\n     * while highlighting the grouping on treemaps and sectors on sunburst\n     * charts.\n     *\n     * @sample highcharts/demo/sunburst/\n     *         Sunburst with color variation\n     *\n     * @sample highcharts/series-treegraph/color-variation\n     *         Treegraph nodes with color variation\n     *\n     * @since     6.0.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.colorVariation\n     */\n    /**\n     * The key of a color variation. Currently supports `brightness` only.\n     *\n     * @type       {string}\n     * @since      6.0.0\n     * @product    highcharts\n     * @validvalue [\"brightness\"]\n     * @apioption  plotOptions.treemap.levels.colorVariation.key\n     */\n    /**\n     * The ending value of a color variation. The last sibling will receive\n     * this value.\n     *\n     * @type      {number}\n     * @since     6.0.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.colorVariation.to\n     */\n    /**\n     * Can set the options of dataLabels on each point which lies on the\n     * level.\n     * [plotOptions.treemap.dataLabels](#plotOptions.treemap.dataLabels) for\n     * possible values.\n     *\n     * @extends   plotOptions.treemap.dataLabels\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.dataLabels\n     */\n    /**\n     * Can set the layoutAlgorithm option on a specific level.\n     *\n     * @type       {string}\n     * @since      4.1.0\n     * @product    highcharts\n     * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n     * @apioption  plotOptions.treemap.levels.layoutAlgorithm\n     */\n    /**\n     * Can set the layoutStartingDirection option on a specific level.\n     *\n     * @type       {string}\n     * @since      4.1.0\n     * @product    highcharts\n     * @validvalue [\"vertical\", \"horizontal\"]\n     * @apioption  plotOptions.treemap.levels.layoutStartingDirection\n     */\n    /**\n     * Decides which level takes effect from the options set in the levels\n     * object.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n     *         Styling of both levels\n     *\n     * @type      {number}\n     * @since     4.1.0\n     * @product   highcharts\n     * @apioption plotOptions.treemap.levels.level\n     */\n    // Presentational options\n    /**\n     * The color of the border surrounding each tree map item.\n     *\n     * @type {Highcharts.ColorString}\n     */\n    borderColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n    /**\n     * The width of the border surrounding each tree map item.\n     */\n    borderWidth: 1,\n    colorKey: 'colorValue',\n    /**\n     * The opacity of a point in treemap. When a point has children, the\n     * visibility of the children is determined by the opacity.\n     *\n     * @since 4.2.4\n     */\n    opacity: 0.15,\n    /**\n     * A wrapper object for all the series options in specific states.\n     *\n     * @extends plotOptions.heatmap.states\n     */\n    states: {\n        /**\n         * Options for the hovered series\n         *\n         * @extends   plotOptions.heatmap.states.hover\n         * @excluding halo\n         */\n        hover: {\n            /**\n             * The border color for the hovered state.\n             */\n            borderColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * Brightness for the hovered point. Defaults to 0 if the\n             * heatmap series is loaded first, otherwise 0.1.\n             *\n             * @type    {number}\n             * @default undefined\n             */\n            brightness: (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes.heatmap ? 0 : 0.1,\n            /**\n             * @extends plotOptions.heatmap.states.hover.halo\n             */\n            halo: false,\n            /**\n             * The opacity of a point in treemap. When a point has children,\n             * the visibility of the children is determined by the opacity.\n             *\n             * @since 4.2.4\n             */\n            opacity: 0.75,\n            /**\n             * The shadow option for hovered state.\n             */\n            shadow: false\n        }\n    },\n    legendSymbol: 'rectangle',\n    /**\n     * This option enables automatic traversing to the last child level upon\n     * node interaction. This feature simplifies navigation by immediately\n     * focusing on the deepest layer of the data structure without intermediate\n     * steps.\n     *\n     * @sample {highcharts} highcharts/plotoptions/treemap-traverse-to-leaf/\n     *         Traverse to leaf enabled\n     *\n     * @since   11.4.4\n     *\n     * @product highcharts\n     */\n    traverseToLeaf: false\n};\n/**\n * A `treemap` series. If the [type](#series.treemap.type) option is\n * not specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.treemap\n * @excluding dataParser, dataURL, stack, dataSorting\n * @product   highcharts\n * @requires  modules/treemap\n * @apioption series.treemap\n */\n/**\n * An array of data points for the series. For the `treemap` series\n * type, points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `value` options. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.treemap.turboThreshold),\n *    this option is not available.\n *    ```js\n *      data: [{\n *        value: 9,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *      }, {\n *        value: 6,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *      }]\n *    ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @type      {Array<number|null|*>}\n * @extends   series.heatmap.data\n * @excluding x, y, pointPadding\n * @product   highcharts\n * @apioption series.treemap.data\n */\n/**\n * The value of the point, resulting in a relative area of the point\n * in the treemap.\n *\n * @type      {number|null}\n * @product   highcharts\n * @apioption series.treemap.data.value\n */\n/**\n * Serves a purpose only if a `colorAxis` object is defined in the chart\n * options. This value will decide which color the point gets from the\n * scale of the colorAxis.\n *\n * @type      {number}\n * @since     4.1.0\n * @product   highcharts\n * @apioption series.treemap.data.colorValue\n */\n/**\n * Only for treemap. Use this option to build a tree structure. The\n * value should be the id of the point which is the parent. If no points\n * has a matching id, or this option is undefined, then the parent will\n * be set to the root.\n *\n * @sample {highcharts} highcharts/point/parent/\n *         Point parent\n * @sample {highcharts} highcharts/demo/treemap-with-levels/\n *         Example where parent id is not matching\n *\n * @type      {string}\n * @since     4.1.0\n * @product   highcharts\n * @apioption series.treemap.data.parent\n */\n''; // Keeps doclets above detached\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapSeriesDefaults = (TreemapSeriesDefaults);\n\n;// ./code/es-modules/Series/Treemap/TreemapUtilities.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  Namespace\n *\n * */\nvar TreemapUtilities;\n(function (TreemapUtilities) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * @todo find correct name for this function.\n     * @todo Similar to reduce, this function is likely redundant\n     */\n    function recursive(item, func, context) {\n        const next = func.call(context || this, item);\n        if (next !== false) {\n            recursive(next, func, context);\n        }\n    }\n    TreemapUtilities.recursive = recursive;\n})(TreemapUtilities || (TreemapUtilities = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapUtilities = (TreemapUtilities);\n\n;// ./code/es-modules/Series/TreeUtilities.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { extend: TreeUtilities_extend, isArray, isNumber: TreeUtilities_isNumber, isObject, merge: TreeUtilities_merge, pick: TreeUtilities_pick, relativeLength } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Functions\n *\n * */\n/* eslint-disable valid-jsdoc */\n/**\n * @private\n */\nfunction getColor(node, options) {\n    const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n    let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n    /**\n     * @private\n     */\n    const variateColor = (color) => {\n        const colorVariation = level && level.colorVariation;\n        if (colorVariation &&\n            colorVariation.key === 'brightness' &&\n            index &&\n            siblings) {\n            return highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default().parse(color).brighten(colorVariation.to * (index / siblings)).get();\n        }\n        return color;\n    };\n    if (node) {\n        point = points[node.i];\n        level = mapOptionsToLevel[node.level] || {};\n        getColorByPoint = point && level.colorByPoint;\n        if (getColorByPoint) {\n            colorIndexByPoint = point.index % (colors ?\n                colors.length :\n                chartOptionsChart.colorCount);\n            colorByPoint = colors && colors[colorIndexByPoint];\n        }\n        // Select either point color, level color or inherited color.\n        if (!series.chart.styledMode) {\n            color = TreeUtilities_pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n        }\n        colorIndex = TreeUtilities_pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n    }\n    return {\n        color: color,\n        colorIndex: colorIndex\n    };\n}\n/**\n * Creates a map from level number to its given options.\n *\n * @private\n *\n * @param {Object} params\n * Object containing parameters.\n * - `defaults` Object containing default options. The default options are\n *   merged with the userOptions to get the final options for a specific\n *   level.\n * - `from` The lowest level number.\n * - `levels` User options from series.levels.\n * - `to` The highest level number.\n *\n * @return {Highcharts.Dictionary<object>|null}\n * Returns a map from level number to its given options.\n */\nfunction getLevelOptions(params) {\n    const result = {};\n    let defaults, converted, i, from, to, levels;\n    if (isObject(params)) {\n        from = TreeUtilities_isNumber(params.from) ? params.from : 1;\n        levels = params.levels;\n        converted = {};\n        defaults = isObject(params.defaults) ? params.defaults : {};\n        if (isArray(levels)) {\n            converted = levels.reduce((obj, item) => {\n                let level, levelIsConstant, options;\n                if (isObject(item) && TreeUtilities_isNumber(item.level)) {\n                    options = TreeUtilities_merge({}, item);\n                    levelIsConstant = TreeUtilities_pick(options.levelIsConstant, defaults.levelIsConstant);\n                    // Delete redundant properties.\n                    delete options.levelIsConstant;\n                    delete options.level;\n                    // Calculate which level these options apply to.\n                    level = item.level + (levelIsConstant ? 0 : from - 1);\n                    if (isObject(obj[level])) {\n                        TreeUtilities_merge(true, obj[level], options); // #16329\n                    }\n                    else {\n                        obj[level] = options;\n                    }\n                }\n                return obj;\n            }, {});\n        }\n        to = TreeUtilities_isNumber(params.to) ? params.to : 1;\n        for (i = 0; i <= to; i++) {\n            result[i] = TreeUtilities_merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n        }\n    }\n    return result;\n}\n/**\n * @private\n * @todo Combine buildTree and buildNode with setTreeValues\n * @todo Remove logic from Treemap and make it utilize this mixin.\n */\nfunction setTreeValues(tree, options) {\n    const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n    let childrenTotal = 0;\n    tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n    tree.name = TreeUtilities_pick(point && point.name, '');\n    tree.visible = (idRoot === tree.id ||\n        options.visible === true);\n    if (typeof before === 'function') {\n        tree = before(tree, options);\n    }\n    // First give the children some values\n    tree.children.forEach((child, i) => {\n        const newOptions = TreeUtilities_extend({}, options);\n        TreeUtilities_extend(newOptions, {\n            index: i,\n            siblings: tree.children.length,\n            visible: tree.visible\n        });\n        child = setTreeValues(child, newOptions);\n        children.push(child);\n        if (child.visible) {\n            childrenTotal += child.val;\n        }\n    });\n    // Set the values\n    const value = TreeUtilities_pick(optionsPoint.value, childrenTotal);\n    tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n    tree.children = children;\n    tree.childrenTotal = childrenTotal;\n    tree.isLeaf = tree.visible && !childrenTotal;\n    tree.val = value;\n    return tree;\n}\n/**\n * Update the rootId property on the series. Also makes sure that it is\n * accessible to exporting.\n *\n * @private\n *\n * @param {Object} series\n * The series to operate on.\n *\n * @return {string}\n * Returns the resulting rootId after update.\n */\nfunction updateRootId(series) {\n    let rootId, options;\n    if (isObject(series)) {\n        // Get the series options.\n        options = isObject(series.options) ? series.options : {};\n        // Calculate the rootId.\n        rootId = TreeUtilities_pick(series.rootNode, options.rootId, '');\n        // Set rootId on series.userOptions to pick it up in exporting.\n        if (isObject(series.userOptions)) {\n            series.userOptions.rootId = rootId;\n        }\n        // Set rootId on series to pick it up on next update.\n        series.rootNode = rootId;\n    }\n    return rootId;\n}\n/**\n * Get the node width, which relies on the plot width and the nodeDistance\n * option.\n *\n * @private\n */\nfunction getNodeWidth(series, columnCount) {\n    const { chart, options } = series, { nodeDistance = 0, nodeWidth = 0 } = options, { plotSizeX = 1 } = chart;\n    // Node width auto means they are evenly distributed along the width of\n    // the plot area\n    if (nodeWidth === 'auto') {\n        if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n            const fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n            return plotSizeX / total;\n        }\n        const nDistance = Number(nodeDistance);\n        return ((plotSizeX + nDistance) /\n            (columnCount || 1)) - nDistance;\n    }\n    return relativeLength(nodeWidth, plotSizeX);\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst TreeUtilities = {\n    getColor,\n    getLevelOptions,\n    getNodeWidth,\n    setTreeValues,\n    updateRootId\n};\n/* harmony default export */ const Series_TreeUtilities = (TreeUtilities);\n\n;// ./code/es-modules/Series/Treemap/TreemapSeries.js\n/* *\n *\n *  (c) 2014-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { parse: color } = (highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default());\n\n\nconst { composed: TreemapSeries_composed, noop } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n\nconst { column: ColumnSeries, scatter: ScatterSeries } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes;\n\n\n\n\n\n\nconst { getColor: TreemapSeries_getColor, getLevelOptions: TreemapSeries_getLevelOptions, updateRootId: TreemapSeries_updateRootId } = Series_TreeUtilities;\n\nconst { addEvent: TreemapSeries_addEvent, correctFloat, crisp, defined: TreemapSeries_defined, error, extend: TreemapSeries_extend, fireEvent: TreemapSeries_fireEvent, isArray: TreemapSeries_isArray, isObject: TreemapSeries_isObject, isString: TreemapSeries_isString, merge: TreemapSeries_merge, pick: TreemapSeries_pick, pushUnique: TreemapSeries_pushUnique, stableSort } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Constants\n *\n * */\nconst axisMax = 100;\n/* *\n *\n *  Variables\n *\n * */\nlet treemapAxisDefaultValues = false;\n/* *\n *\n *  Functions\n *\n * */\n/** @private */\nfunction onSeriesAfterBindAxes() {\n    const series = this, xAxis = series.xAxis, yAxis = series.yAxis;\n    let treeAxis;\n    if (xAxis && yAxis) {\n        if (series.is('treemap')) {\n            treeAxis = {\n                endOnTick: false,\n                gridLineWidth: 0,\n                lineWidth: 0,\n                min: 0,\n                minPadding: 0,\n                max: axisMax,\n                maxPadding: 0,\n                startOnTick: false,\n                title: void 0,\n                tickPositions: []\n            };\n            TreemapSeries_extend(yAxis.options, treeAxis);\n            TreemapSeries_extend(xAxis.options, treeAxis);\n            treemapAxisDefaultValues = true;\n        }\n        else if (treemapAxisDefaultValues) {\n            yAxis.setOptions(yAxis.userOptions);\n            xAxis.setOptions(xAxis.userOptions);\n            treemapAxisDefaultValues = false;\n        }\n    }\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n * @class\n * @name Highcharts.seriesTypes.treemap\n *\n * @augments Highcharts.Series\n */\nclass TreemapSeries extends ScatterSeries {\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    static compose(SeriesClass) {\n        if (TreemapSeries_pushUnique(TreemapSeries_composed, 'TreemapSeries')) {\n            TreemapSeries_addEvent(SeriesClass, 'afterBindAxes', onSeriesAfterBindAxes);\n        }\n    }\n    /* *\n     *\n     *  Function\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    algorithmCalcPoints(directionChange, last, group, childrenArea) {\n        const plot = group.plot, end = group.elArr.length - 1;\n        let pX, pY, pW, pH, gW = group.lW, gH = group.lH, keep, i = 0;\n        if (last) {\n            gW = group.nW;\n            gH = group.nH;\n        }\n        else {\n            keep = group.elArr[end];\n        }\n        for (const p of group.elArr) {\n            if (last || (i < end)) {\n                if (group.direction === 0) {\n                    pX = plot.x;\n                    pY = plot.y;\n                    pW = gW;\n                    pH = p / pW;\n                }\n                else {\n                    pX = plot.x;\n                    pY = plot.y;\n                    pH = gH;\n                    pW = p / pH;\n                }\n                childrenArea.push({\n                    x: pX,\n                    y: pY,\n                    width: pW,\n                    height: correctFloat(pH)\n                });\n                if (group.direction === 0) {\n                    plot.y = plot.y + pH;\n                }\n                else {\n                    plot.x = plot.x + pW;\n                }\n            }\n            i = i + 1;\n        }\n        // Reset variables\n        group.reset();\n        if (group.direction === 0) {\n            group.width = group.width - gW;\n        }\n        else {\n            group.height = group.height - gH;\n        }\n        plot.y = plot.parent.y + (plot.parent.height - group.height);\n        plot.x = plot.parent.x + (plot.parent.width - group.width);\n        if (directionChange) {\n            group.direction = 1 - group.direction;\n        }\n        // If not last, then add uncalculated element\n        if (!last) {\n            group.addElement(keep);\n        }\n    }\n    algorithmFill(directionChange, parent, children) {\n        const childrenArea = [];\n        let pTot, direction = parent.direction, x = parent.x, y = parent.y, width = parent.width, height = parent.height, pX, pY, pW, pH;\n        for (const child of children) {\n            pTot =\n                (parent.width * parent.height) * (child.val / parent.val);\n            pX = x;\n            pY = y;\n            if (direction === 0) {\n                pH = height;\n                pW = pTot / pH;\n                width = width - pW;\n                x = x + pW;\n            }\n            else {\n                pW = width;\n                pH = pTot / pW;\n                height = height - pH;\n                y = y + pH;\n            }\n            childrenArea.push({\n                x: pX,\n                y: pY,\n                width: pW,\n                height: pH\n            });\n            if (directionChange) {\n                direction = 1 - direction;\n            }\n        }\n        return childrenArea;\n    }\n    algorithmLowAspectRatio(directionChange, parent, children) {\n        const series = this, childrenArea = [], plot = {\n            x: parent.x,\n            y: parent.y,\n            parent: parent\n        }, direction = parent.direction, end = children.length - 1, group = new Treemap_TreemapAlgorithmGroup(parent.height, parent.width, direction, plot);\n        let pTot, i = 0;\n        // Loop through and calculate all areas\n        for (const child of children) {\n            pTot =\n                (parent.width * parent.height) * (child.val / parent.val);\n            group.addElement(pTot);\n            if (group.lP.nR > group.lP.lR) {\n                series.algorithmCalcPoints(directionChange, false, group, childrenArea, plot // @todo no supported\n                );\n            }\n            // If last child, then calculate all remaining areas\n            if (i === end) {\n                series.algorithmCalcPoints(directionChange, true, group, childrenArea, plot // @todo not supported\n                );\n            }\n            ++i;\n        }\n        return childrenArea;\n    }\n    /**\n     * Over the alignment method by setting z index.\n     * @private\n     */\n    alignDataLabel(point, dataLabel, labelOptions) {\n        const style = labelOptions.style;\n        // #8160: Prevent the label from exceeding the point's\n        // boundaries in treemaps by applying ellipsis overflow.\n        // The issue was happening when datalabel's text contained a\n        // long sequence of characters without a whitespace.\n        if (style &&\n            !TreemapSeries_defined(style.textOverflow) &&\n            dataLabel.text &&\n            dataLabel.getBBox().width > (dataLabel.text.textWidth || 0)) {\n            dataLabel.css({\n                textOverflow: 'ellipsis',\n                // Unit (px) is required when useHTML is true\n                width: style.width += 'px'\n            });\n        }\n        ColumnSeries.prototype.alignDataLabel.apply(this, arguments);\n        if (point.dataLabel) {\n            // `point.node.zIndex` could be undefined (#6956)\n            point.dataLabel.attr({ zIndex: (point.node.zIndex || 0) + 1 });\n        }\n    }\n    /**\n     * Recursive function which calculates the area for all children of a\n     * node.\n     *\n     * @private\n     * @function Highcharts.Series#calculateChildrenAreas\n     *\n     * @param {Object} parent\n     * The node which is parent to the children.\n     *\n     * @param {Object} area\n     * The rectangular area of the parent.\n     */\n    calculateChildrenAreas(parent, area) {\n        const series = this, options = series.options, mapOptionsToLevel = series.mapOptionsToLevel, level = mapOptionsToLevel[parent.level + 1], algorithm = TreemapSeries_pick((series[(level && level.layoutAlgorithm)] &&\n            level.layoutAlgorithm), options.layoutAlgorithm), alternate = options.alternateStartingDirection, \n        // Collect all children which should be included\n        children = parent.children.filter((n) => !n.ignore);\n        let childrenValues = [];\n        if (level && level.layoutStartingDirection) {\n            area.direction = level.layoutStartingDirection === 'vertical' ?\n                0 :\n                1;\n        }\n        childrenValues = series[algorithm](area, children);\n        let i = -1;\n        for (const child of children) {\n            const values = childrenValues[++i];\n            child.values = TreemapSeries_merge(values, {\n                val: child.childrenTotal,\n                direction: (alternate ? 1 - area.direction : area.direction)\n            });\n            child.pointValues = TreemapSeries_merge(values, {\n                x: (values.x / series.axisRatio),\n                // Flip y-values to avoid visual regression with csvCoord in\n                // Axis.translate at setPointValues. #12488\n                y: axisMax - values.y - values.height,\n                width: (values.width / series.axisRatio)\n            });\n            // If node has children, then call method recursively\n            if (child.children.length) {\n                series.calculateChildrenAreas(child, child.values);\n            }\n        }\n    }\n    /**\n     * Create level list.\n     * @private\n     */\n    createList(e) {\n        const chart = this.chart, breadcrumbs = chart.breadcrumbs, list = [];\n        if (breadcrumbs) {\n            let currentLevelNumber = 0;\n            list.push({\n                level: currentLevelNumber,\n                levelOptions: chart.series[0]\n            });\n            let node = e.target.nodeMap[e.newRootId];\n            const extraNodes = [];\n            // When the root node is set and has parent,\n            // recreate the path from the node tree.\n            while (node.parent || node.parent === '') {\n                extraNodes.push(node);\n                node = e.target.nodeMap[node.parent];\n            }\n            for (const node of extraNodes.reverse()) {\n                list.push({\n                    level: ++currentLevelNumber,\n                    levelOptions: node\n                });\n            }\n            // If the list has only first element, we should clear it\n            if (list.length <= 1) {\n                list.length = 0;\n            }\n        }\n        return list;\n    }\n    /**\n     * Extend drawDataLabels with logic to handle custom options related to\n     * the treemap series:\n     *\n     * - Points which is not a leaf node, has dataLabels disabled by\n     *   default.\n     *\n     * - Options set on series.levels is merged in.\n     *\n     * - Width of the dataLabel is set to match the width of the point\n     *   shape.\n     *\n     * @private\n     */\n    drawDataLabels() {\n        const series = this, mapOptionsToLevel = series.mapOptionsToLevel, points = series.points.filter(function (n) {\n            return n.node.visible;\n        });\n        let options, level;\n        for (const point of points) {\n            level = mapOptionsToLevel[point.node.level];\n            // Set options to new object to avoid problems with scope\n            options = { style: {} };\n            // If not a leaf, then label should be disabled as default\n            if (!point.node.isLeaf) {\n                options.enabled = false;\n            }\n            // If options for level exists, include them as well\n            if (level && level.dataLabels) {\n                options = TreemapSeries_merge(options, level.dataLabels);\n                series.hasDataLabels = () => true;\n            }\n            // Set dataLabel width to the width of the point shape.\n            if (point.shapeArgs) {\n                const css = {\n                    width: `${point.shapeArgs.width || 0}px`,\n                    lineClamp: Math.floor((point.shapeArgs.height || 0) / 16)\n                };\n                TreemapSeries_extend(options.style, css);\n                point.dataLabel?.css(css);\n            }\n            // Merge custom options with point options\n            point.dlOptions = TreemapSeries_merge(options, point.options.dataLabels);\n        }\n        super.drawDataLabels();\n    }\n    /**\n     * Override drawPoints\n     * @private\n     */\n    drawPoints(points = this.points) {\n        const series = this, chart = series.chart, renderer = chart.renderer, styledMode = chart.styledMode, options = series.options, shadow = styledMode ? {} : options.shadow, borderRadius = options.borderRadius, withinAnimationLimit = chart.pointCount < options.animationLimit, allowTraversingTree = options.allowTraversingTree;\n        for (const point of points) {\n            const levelDynamic = point.node.levelDynamic, animatableAttribs = {}, attribs = {}, css = {}, groupKey = 'level-group-' + point.node.level, hasGraphic = !!point.graphic, shouldAnimate = withinAnimationLimit && hasGraphic, shapeArgs = point.shapeArgs;\n            // Don't bother with calculate styling if the point is not drawn\n            if (point.shouldDraw()) {\n                point.isInside = true;\n                if (borderRadius) {\n                    attribs.r = borderRadius;\n                }\n                TreemapSeries_merge(true, // Extend object\n                // Which object to extend\n                shouldAnimate ? animatableAttribs : attribs, \n                // Add shapeArgs to animate/attr if graphic exists\n                hasGraphic ? shapeArgs : {}, \n                // Add style attribs if !styleMode\n                styledMode ?\n                    {} :\n                    series.pointAttribs(point, point.selected ? 'select' : void 0));\n                // In styled mode apply point.color. Use CSS, otherwise the\n                // fill used in the style sheet will take precedence over\n                // the fill attribute.\n                if (series.colorAttribs && styledMode) {\n                    // Heatmap is loaded\n                    TreemapSeries_extend(css, series.colorAttribs(point));\n                }\n                if (!series[groupKey]) {\n                    series[groupKey] = renderer.g(groupKey)\n                        .attr({\n                        // @todo Set the zIndex based upon the number of\n                        // levels, instead of using 1000\n                        zIndex: 1000 - (levelDynamic || 0)\n                    })\n                        .add(series.group);\n                    series[groupKey].survive = true;\n                }\n            }\n            // Draw the point\n            point.draw({\n                animatableAttribs,\n                attribs,\n                css,\n                group: series[groupKey],\n                imageUrl: point.imageUrl,\n                renderer,\n                shadow,\n                shapeArgs,\n                shapeType: point.shapeType\n            });\n            // If setRootNode is allowed, set a point cursor on clickables &\n            // add drillId to point\n            if (allowTraversingTree && point.graphic) {\n                point.drillId = options.interactByLeaf ?\n                    series.drillToByLeaf(point) :\n                    series.drillToByGroup(point);\n            }\n        }\n    }\n    /**\n     * Finds the drill id for a parent node. Returns false if point should\n     * not have a click event.\n     * @private\n     */\n    drillToByGroup(point) {\n        let drillId = false;\n        if (!point.node.isLeaf &&\n            (point.node.level - this.nodeMap[this.rootNode].level) === 1) {\n            drillId = point.id;\n        }\n        return drillId;\n    }\n    /**\n     * Finds the drill id for a leaf node. Returns false if point should not\n     * have a click event\n     * @private\n     */\n    drillToByLeaf(point) {\n        const { traverseToLeaf } = point.series.options;\n        let drillId = false, nodeParent;\n        if ((point.node.parent !== this.rootNode) &&\n            point.node.isLeaf) {\n            if (traverseToLeaf) {\n                drillId = point.id;\n            }\n            else {\n                nodeParent = point.node;\n                while (!drillId) {\n                    if (typeof nodeParent.parent !== 'undefined') {\n                        nodeParent = this.nodeMap[nodeParent.parent];\n                    }\n                    if (nodeParent.parent === this.rootNode) {\n                        drillId = nodeParent.id;\n                    }\n                }\n            }\n        }\n        return drillId;\n    }\n    /**\n     * @todo remove this function at a suitable version.\n     * @private\n     */\n    drillToNode(id, redraw) {\n        error(32, false, void 0, { 'treemap.drillToNode': 'use treemap.setRootNode' });\n        this.setRootNode(id, redraw);\n    }\n    drillUp() {\n        const series = this, node = series.nodeMap[series.rootNode];\n        if (node && TreemapSeries_isString(node.parent)) {\n            series.setRootNode(node.parent, true, { trigger: 'traverseUpButton' });\n        }\n    }\n    getExtremes() {\n        // Get the extremes from the value data\n        const { dataMin, dataMax } = super.getExtremes(this.colorValueData);\n        this.valueMin = dataMin;\n        this.valueMax = dataMax;\n        // Get the extremes from the y data\n        return super.getExtremes();\n    }\n    /**\n     * Creates an object map from parent id to childrens index.\n     *\n     * @private\n     * @function Highcharts.Series#getListOfParents\n     *\n     * @param {Highcharts.SeriesTreemapDataOptions} [data]\n     *        List of points set in options.\n     *\n     * @param {Array<string>} [existingIds]\n     *        List of all point ids.\n     *\n     * @return {Object}\n     *         Map from parent id to children index in data.\n     */\n    getListOfParents(data, existingIds) {\n        const arr = TreemapSeries_isArray(data) ? data : [], ids = TreemapSeries_isArray(existingIds) ? existingIds : [], listOfParents = arr.reduce(function (prev, curr, i) {\n            const parent = TreemapSeries_pick(curr.parent, '');\n            if (typeof prev[parent] === 'undefined') {\n                prev[parent] = [];\n            }\n            prev[parent].push(i);\n            return prev;\n        }, {\n            '': [] // Root of tree\n        });\n        // If parent does not exist, hoist parent to root of tree.\n        for (const parent of Object.keys(listOfParents)) {\n            const children = listOfParents[parent];\n            if ((parent !== '') && (ids.indexOf(parent) === -1)) {\n                for (const child of children) {\n                    listOfParents[''].push(child);\n                }\n                delete listOfParents[parent];\n            }\n        }\n        return listOfParents;\n    }\n    /**\n     * Creates a tree structured object from the series points.\n     * @private\n     */\n    getTree() {\n        const series = this, allIds = this.data.map(function (d) {\n            return d.id;\n        }), parentList = series.getListOfParents(this.data, allIds);\n        series.nodeMap = {};\n        series.nodeList = [];\n        return series.buildTree('', -1, 0, parentList);\n    }\n    buildTree(id, index, level, list, parent) {\n        const series = this, children = [], point = series.points[index];\n        let height = 0, child;\n        // Actions\n        for (const i of (list[id] || [])) {\n            child = series.buildTree(series.points[i].id, i, level + 1, list, id);\n            height = Math.max(child.height + 1, height);\n            children.push(child);\n        }\n        const node = new series.NodeClass().init(id, index, children, height, level, series, parent);\n        for (const child of children) {\n            child.parentNode = node;\n        }\n        series.nodeMap[node.id] = node;\n        series.nodeList.push(node);\n        if (point) {\n            point.node = node;\n            node.point = point;\n        }\n        return node;\n    }\n    /**\n     * Define hasData function for non-cartesian series. Returns true if the\n     * series has points at all.\n     * @private\n     */\n    hasData() {\n        return !!this.dataTable.rowCount;\n    }\n    init(chart, options) {\n        const series = this, breadcrumbsOptions = TreemapSeries_merge(options.drillUpButton, options.breadcrumbs), setOptionsEvent = TreemapSeries_addEvent(series, 'setOptions', (event) => {\n            const options = event.userOptions;\n            if (TreemapSeries_defined(options.allowDrillToNode) &&\n                !TreemapSeries_defined(options.allowTraversingTree)) {\n                options.allowTraversingTree = options.allowDrillToNode;\n                delete options.allowDrillToNode;\n            }\n            if (TreemapSeries_defined(options.drillUpButton) &&\n                !TreemapSeries_defined(options.traverseUpButton)) {\n                options.traverseUpButton = options.drillUpButton;\n                delete options.drillUpButton;\n            }\n        });\n        super.init(chart, options);\n        // Treemap's opacity is a different option from other series\n        delete series.opacity;\n        // Handle deprecated options.\n        series.eventsToUnbind.push(setOptionsEvent);\n        if (series.options.allowTraversingTree) {\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'click', series.onClickDrillToNode));\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'setRootNode', function (e) {\n                const chart = series.chart;\n                if (chart.breadcrumbs) {\n                    // Create a list using the event after drilldown.\n                    chart.breadcrumbs.updateProperties(series.createList(e));\n                }\n            }));\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'update', \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            function (e, redraw) {\n                const breadcrumbs = this.chart.breadcrumbs;\n                if (breadcrumbs && e.options.breadcrumbs) {\n                    breadcrumbs.update(e.options.breadcrumbs);\n                }\n            }));\n            series.eventsToUnbind.push(TreemapSeries_addEvent(series, 'destroy', function destroyEvents(e) {\n                const chart = this.chart;\n                if (chart.breadcrumbs && !e.keepEventsForUpdate) {\n                    chart.breadcrumbs.destroy();\n                    chart.breadcrumbs = void 0;\n                }\n            }));\n        }\n        if (!chart.breadcrumbs) {\n            chart.breadcrumbs = new Breadcrumbs_Breadcrumbs(chart, breadcrumbsOptions);\n        }\n        series.eventsToUnbind.push(TreemapSeries_addEvent(chart.breadcrumbs, 'up', function (e) {\n            const drillUpsNumber = this.level - e.newLevel;\n            for (let i = 0; i < drillUpsNumber; i++) {\n                series.drillUp();\n            }\n        }));\n    }\n    /**\n     * Add drilling on the suitable points.\n     * @private\n     */\n    onClickDrillToNode(event) {\n        const series = this, point = event.point, drillId = point && point.drillId;\n        // If a drill id is returned, add click event and cursor.\n        if (TreemapSeries_isString(drillId)) {\n            point.setState(''); // Remove hover\n            series.setRootNode(drillId, true, { trigger: 'click' });\n        }\n    }\n    /**\n     * Get presentational attributes\n     * @private\n     */\n    pointAttribs(point, state) {\n        const series = this, mapOptionsToLevel = (TreemapSeries_isObject(series.mapOptionsToLevel) ?\n            series.mapOptionsToLevel :\n            {}), level = point && mapOptionsToLevel[point.node.level] || {}, options = this.options, stateOptions = state && options.states && options.states[state] || {}, className = (point && point.getClassName()) || '', \n        // Set attributes by precedence. Point trumps level trumps series.\n        // Stroke width uses pick because it can be 0.\n        attr = {\n            'stroke': (point && point.borderColor) ||\n                level.borderColor ||\n                stateOptions.borderColor ||\n                options.borderColor,\n            'stroke-width': TreemapSeries_pick(point && point.borderWidth, level.borderWidth, stateOptions.borderWidth, options.borderWidth),\n            'dashstyle': (point && point.borderDashStyle) ||\n                level.borderDashStyle ||\n                stateOptions.borderDashStyle ||\n                options.borderDashStyle,\n            'fill': (point && point.color) || this.color\n        };\n        let opacity;\n        // Hide levels above the current view\n        if (className.indexOf('highcharts-above-level') !== -1) {\n            attr.fill = 'none';\n            attr['stroke-width'] = 0;\n            // Nodes with children that accept interaction\n        }\n        else if (className.indexOf('highcharts-internal-node-interactive') !== -1) {\n            opacity = TreemapSeries_pick(stateOptions.opacity, options.opacity);\n            attr.fill = color(attr.fill).setOpacity(opacity).get();\n            attr.cursor = 'pointer';\n            // Hide nodes that have children\n        }\n        else if (className.indexOf('highcharts-internal-node') !== -1) {\n            attr.fill = 'none';\n        }\n        else if (state) {\n            // Brighten and hoist the hover nodes\n            attr.fill = color(attr.fill)\n                .brighten(stateOptions.brightness)\n                .get();\n        }\n        return attr;\n    }\n    /**\n     * Set the node's color recursively, from the parent down.\n     * @private\n     */\n    setColorRecursive(node, parentColor, colorIndex, index, siblings) {\n        const series = this, chart = series && series.chart, colors = chart && chart.options && chart.options.colors;\n        if (node) {\n            const colorInfo = TreemapSeries_getColor(node, {\n                colors: colors,\n                index: index,\n                mapOptionsToLevel: series.mapOptionsToLevel,\n                parentColor: parentColor,\n                parentColorIndex: colorIndex,\n                series: series,\n                siblings: siblings\n            }), point = series.points[node.i];\n            if (point) {\n                point.color = colorInfo.color;\n                point.colorIndex = colorInfo.colorIndex;\n            }\n            let i = -1;\n            // Do it all again with the children\n            for (const child of (node.children || [])) {\n                series.setColorRecursive(child, colorInfo.color, colorInfo.colorIndex, ++i, node.children.length);\n            }\n        }\n    }\n    setPointValues() {\n        const series = this;\n        const { points, xAxis, yAxis } = series;\n        const styledMode = series.chart.styledMode;\n        // Get the crisp correction in classic mode. For this to work in\n        // styled mode, we would need to first add the shape (without x,\n        // y, width and height), then read the rendered stroke width\n        // using point.graphic.strokeWidth(), then modify and apply the\n        // shapeArgs. This applies also to column series, but the\n        // downside is performance and code complexity.\n        const getStrokeWidth = (point) => (styledMode ?\n            0 :\n            (series.pointAttribs(point)['stroke-width'] || 0));\n        for (const point of points) {\n            const { pointValues: values, visible } = point.node;\n            // Points which is ignored, have no values.\n            if (values && visible) {\n                const { height, width, x, y } = values;\n                const strokeWidth = getStrokeWidth(point);\n                const x1 = crisp(xAxis.toPixels(x, true), strokeWidth, true);\n                const x2 = crisp(xAxis.toPixels(x + width, true), strokeWidth, true);\n                const y1 = crisp(yAxis.toPixels(y, true), strokeWidth, true);\n                const y2 = crisp(yAxis.toPixels(y + height, true), strokeWidth, true);\n                // Set point values\n                const shapeArgs = {\n                    x: Math.min(x1, x2),\n                    y: Math.min(y1, y2),\n                    width: Math.abs(x2 - x1),\n                    height: Math.abs(y2 - y1)\n                };\n                point.plotX = shapeArgs.x + (shapeArgs.width / 2);\n                point.plotY = shapeArgs.y + (shapeArgs.height / 2);\n                point.shapeArgs = shapeArgs;\n            }\n            else {\n                // Reset visibility\n                delete point.plotX;\n                delete point.plotY;\n            }\n        }\n    }\n    /**\n     * Sets a new root node for the series.\n     *\n     * @private\n     * @function Highcharts.Series#setRootNode\n     *\n     * @param {string} id\n     * The id of the new root node.\n     *\n     * @param {boolean} [redraw=true]\n     * Whether to redraw the chart or not.\n     *\n     * @param {Object} [eventArguments]\n     * Arguments to be accessed in event handler.\n     *\n     * @param {string} [eventArguments.newRootId]\n     * Id of the new root.\n     *\n     * @param {string} [eventArguments.previousRootId]\n     * Id of the previous root.\n     *\n     * @param {boolean} [eventArguments.redraw]\n     * Whether to redraw the chart after.\n     *\n     * @param {Object} [eventArguments.series]\n     * The series to update the root of.\n     *\n     * @param {string} [eventArguments.trigger]\n     * The action which triggered the event. Undefined if the setRootNode is\n     * called directly.\n     *\n     * @emits Highcharts.Series#event:setRootNode\n     */\n    setRootNode(id, redraw, eventArguments) {\n        const series = this, eventArgs = TreemapSeries_extend({\n            newRootId: id,\n            previousRootId: series.rootNode,\n            redraw: TreemapSeries_pick(redraw, true),\n            series: series\n        }, eventArguments);\n        /**\n         * The default functionality of the setRootNode event.\n         *\n         * @private\n         * @param {Object} args The event arguments.\n         * @param {string} args.newRootId Id of the new root.\n         * @param {string} args.previousRootId Id of the previous root.\n         * @param {boolean} args.redraw Whether to redraw the chart after.\n         * @param {Object} args.series The series to update the root of.\n         * @param {string} [args.trigger=undefined] The action which\n         * triggered the event. Undefined if the setRootNode is called\n         * directly.\n             */\n        const defaultFn = function (args) {\n            const series = args.series;\n            // Store previous and new root ids on the series.\n            series.idPreviousRoot = args.previousRootId;\n            series.rootNode = args.newRootId;\n            // Redraw the chart\n            series.isDirty = true; // Force redraw\n            if (args.redraw) {\n                series.chart.redraw();\n            }\n        };\n        // Fire setRootNode event.\n        TreemapSeries_fireEvent(series, 'setRootNode', eventArgs, defaultFn);\n    }\n    /**\n     * Workaround for `inactive` state. Since `series.opacity` option is\n     * already reserved, don't use that state at all by disabling\n     * `inactiveOtherPoints` and not inheriting states by points.\n     * @private\n     */\n    setState(state) {\n        this.options.inactiveOtherPoints = true;\n        super.setState(state, false);\n        this.options.inactiveOtherPoints = false;\n    }\n    setTreeValues(tree) {\n        const series = this, options = series.options, idRoot = series.rootNode, mapIdToNode = series.nodeMap, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (typeof options.levelIsConstant === 'boolean' ?\n            options.levelIsConstant :\n            true), children = [], point = series.points[tree.i];\n        // First give the children some values\n        let childrenTotal = 0;\n        for (let child of tree.children) {\n            child = series.setTreeValues(child);\n            children.push(child);\n            if (!child.ignore) {\n                childrenTotal += child.val;\n            }\n        }\n        // Sort the children\n        stableSort(children, (a, b) => ((a.sortIndex || 0) - (b.sortIndex || 0)));\n        // Set the values\n        const val = TreemapSeries_pick(point && point.options.value, childrenTotal);\n        if (point) {\n            point.value = val;\n        }\n        TreemapSeries_extend(tree, {\n            children: children,\n            childrenTotal: childrenTotal,\n            // Ignore this node if point is not visible\n            ignore: !(TreemapSeries_pick(point && point.visible, true) && (val > 0)),\n            isLeaf: tree.visible && !childrenTotal,\n            levelDynamic: (tree.level - (levelIsConstant ? 0 : nodeRoot.level)),\n            name: TreemapSeries_pick(point && point.name, ''),\n            sortIndex: TreemapSeries_pick(point && point.sortIndex, -val),\n            val: val\n        });\n        return tree;\n    }\n    sliceAndDice(parent, children) {\n        return this.algorithmFill(true, parent, children);\n    }\n    squarified(parent, children) {\n        return this.algorithmLowAspectRatio(true, parent, children);\n    }\n    strip(parent, children) {\n        return this.algorithmLowAspectRatio(false, parent, children);\n    }\n    stripes(parent, children) {\n        return this.algorithmFill(false, parent, children);\n    }\n    translate() {\n        const series = this, options = series.options;\n        let // NOTE: updateRootId modifies series.\n        rootId = TreemapSeries_updateRootId(series), rootNode, pointValues, seriesArea, val;\n        // Call prototype function\n        super.translate();\n        // @todo Only if series.isDirtyData is true\n        const tree = series.tree = series.getTree();\n        rootNode = series.nodeMap[rootId];\n        if (rootId !== '' &&\n            (!rootNode)) {\n            series.setRootNode('', false);\n            rootId = series.rootNode;\n            rootNode = series.nodeMap[rootId];\n        }\n        series.mapOptionsToLevel = TreemapSeries_getLevelOptions({\n            from: rootNode.level + 1,\n            levels: options.levels,\n            to: tree.height,\n            defaults: {\n                levelIsConstant: series.options.levelIsConstant,\n                colorByPoint: options.colorByPoint\n            }\n        });\n        // Parents of the root node is by default visible\n        Treemap_TreemapUtilities.recursive(series.nodeMap[series.rootNode], (node) => {\n            const p = node.parent;\n            let next = false;\n            node.visible = true;\n            if (p || p === '') {\n                next = series.nodeMap[p];\n            }\n            return next;\n        });\n        // Children of the root node is by default visible\n        Treemap_TreemapUtilities.recursive(series.nodeMap[series.rootNode].children, (children) => {\n            let next = false;\n            for (const child of children) {\n                child.visible = true;\n                if (child.children.length) {\n                    next = (next || []).concat(child.children);\n                }\n            }\n            return next;\n        });\n        series.setTreeValues(tree);\n        // Calculate plotting values.\n        series.axisRatio = (series.xAxis.len / series.yAxis.len);\n        series.nodeMap[''].pointValues = pointValues = {\n            x: 0,\n            y: 0,\n            width: axisMax,\n            height: axisMax\n        };\n        series.nodeMap[''].values = seriesArea = TreemapSeries_merge(pointValues, {\n            width: (pointValues.width * series.axisRatio),\n            direction: (options.layoutStartingDirection === 'vertical' ? 0 : 1),\n            val: tree.val\n        });\n        series.calculateChildrenAreas(tree, seriesArea);\n        // Logic for point colors\n        if (!series.colorAxis &&\n            !options.colorByPoint) {\n            series.setColorRecursive(series.tree);\n        }\n        // Update axis extremes according to the root node.\n        if (options.allowTraversingTree) {\n            val = rootNode.pointValues;\n            series.xAxis.setExtremes(val.x, val.x + val.width, false);\n            series.yAxis.setExtremes(val.y, val.y + val.height, false);\n            series.xAxis.setScale();\n            series.yAxis.setScale();\n        }\n        // Assign values to points.\n        series.setPointValues();\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nTreemapSeries.defaultOptions = TreemapSeries_merge(ScatterSeries.defaultOptions, Treemap_TreemapSeriesDefaults);\nTreemapSeries_extend(TreemapSeries.prototype, {\n    buildKDTree: noop,\n    colorAttribs: Series_ColorMapComposition.seriesMembers.colorAttribs,\n    colorKey: 'colorValue', // Point color option key\n    directTouch: true,\n    getExtremesFromAll: true,\n    getSymbol: noop,\n    optionalAxis: 'colorAxis',\n    parallelArrays: ['x', 'y', 'value', 'colorValue'],\n    pointArrayMap: ['value', 'colorValue'],\n    pointClass: Treemap_TreemapPoint,\n    NodeClass: Treemap_TreemapNode,\n    trackerGroups: ['group', 'dataLabelsGroup'],\n    utils: Treemap_TreemapUtilities\n});\nSeries_ColorMapComposition.compose(TreemapSeries);\nhighcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default().registerSeriesType('treemap', TreemapSeries);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Treemap_TreemapSeries = ((/* unused pure expression or super */ null && (TreemapSeries)));\n\n// EXTERNAL MODULE: external {\"amd\":[\"highcharts/highcharts\",\"Series\"],\"commonjs\":[\"highcharts\",\"Series\"],\"commonjs2\":[\"highcharts\",\"Series\"],\"root\":[\"Highcharts\",\"Series\"]}\nvar highcharts_Series_commonjs_highcharts_Series_commonjs2_highcharts_Series_root_Highcharts_Series_ = __webpack_require__(820);\nvar highcharts_Series_commonjs_highcharts_Series_commonjs2_highcharts_Series_root_Highcharts_Series_default = /*#__PURE__*/__webpack_require__.n(highcharts_Series_commonjs_highcharts_Series_commonjs2_highcharts_Series_root_Highcharts_Series_);\n;// ./code/es-modules/Series/CenteredUtilities.js\n/* *\n *\n *  (c) 2010-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { deg2rad } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n\n\nconst { fireEvent: CenteredUtilities_fireEvent, isNumber: CenteredUtilities_isNumber, pick: CenteredUtilities_pick, relativeLength: CenteredUtilities_relativeLength } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/**\n * @private\n */\nvar CenteredUtilities;\n(function (CenteredUtilities) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Get the center of the pie based on the size and center options relative\n     * to the plot area. Borrowed by the polar and gauge series types.\n     *\n     * @private\n     * @function Highcharts.CenteredSeriesMixin.getCenter\n     */\n    function getCenter() {\n        const options = this.options, chart = this.chart, slicingRoom = 2 * (options.slicedOffset || 0), plotWidth = chart.plotWidth - 2 * slicingRoom, plotHeight = chart.plotHeight - 2 * slicingRoom, centerOption = options.center, smallestSize = Math.min(plotWidth, plotHeight), thickness = options.thickness;\n        let handleSlicingRoom, size = options.size, innerSize = options.innerSize || 0, i, value;\n        if (typeof size === 'string') {\n            size = parseFloat(size);\n        }\n        if (typeof innerSize === 'string') {\n            innerSize = parseFloat(innerSize);\n        }\n        const positions = [\n            CenteredUtilities_pick(centerOption?.[0], '50%'),\n            CenteredUtilities_pick(centerOption?.[1], '50%'),\n            // Prevent from negative values\n            CenteredUtilities_pick(size && size < 0 ? void 0 : options.size, '100%'),\n            CenteredUtilities_pick(innerSize && innerSize < 0 ? void 0 : options.innerSize || 0, '0%')\n        ];\n        // No need for inner size in angular (gauges) series but still required\n        // for pie series\n        if (chart.angular && !(this instanceof (highcharts_Series_commonjs_highcharts_Series_commonjs2_highcharts_Series_root_Highcharts_Series_default()))) {\n            positions[3] = 0;\n        }\n        for (i = 0; i < 4; ++i) {\n            value = positions[i];\n            handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));\n            // I == 0: centerX, relative to width\n            // i == 1: centerY, relative to height\n            // i == 2: size, relative to smallestSize\n            // i == 3: innerSize, relative to size\n            positions[i] = CenteredUtilities_relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) + (handleSlicingRoom ? slicingRoom : 0);\n        }\n        // Inner size cannot be larger than size (#3632)\n        if (positions[3] > positions[2]) {\n            positions[3] = positions[2];\n        }\n        // Thickness overrides innerSize, need to be less than pie size (#6647)\n        if (CenteredUtilities_isNumber(thickness) &&\n            thickness * 2 < positions[2] && thickness > 0) {\n            positions[3] = positions[2] - thickness * 2;\n        }\n        CenteredUtilities_fireEvent(this, 'afterGetCenter', { positions });\n        return positions;\n    }\n    CenteredUtilities.getCenter = getCenter;\n    /**\n     * GetStartAndEndRadians - Calculates start and end angles in radians.\n     * Used in series types such as pie and sunburst.\n     *\n     * @private\n     * @function Highcharts.CenteredSeriesMixin.getStartAndEndRadians\n     *\n     * @param {number} [start]\n     *        Start angle in degrees.\n     *\n     * @param {number} [end]\n     *        Start angle in degrees.\n     *\n     * @return {Highcharts.RadianAngles}\n     *         Returns an object containing start and end angles as radians.\n     */\n    function getStartAndEndRadians(start, end) {\n        const startAngle = CenteredUtilities_isNumber(start) ? start : 0, // Must be a number\n        endAngle = ((CenteredUtilities_isNumber(end) && // Must be a number\n            end > startAngle && // Must be larger than the start angle\n            // difference must be less than 360 degrees\n            (end - startAngle) < 360) ?\n            end :\n            startAngle + 360), correction = -90;\n        return {\n            start: deg2rad * (startAngle + correction),\n            end: deg2rad * (endAngle + correction)\n        };\n    }\n    CenteredUtilities.getStartAndEndRadians = getStartAndEndRadians;\n})(CenteredUtilities || (CenteredUtilities = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Series_CenteredUtilities = (CenteredUtilities);\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @private\n * @interface Highcharts.RadianAngles\n */ /**\n* @name Highcharts.RadianAngles#end\n* @type {number}\n*/ /**\n* @name Highcharts.RadianAngles#start\n* @type {number}\n*/\n''; // Keeps doclets above in JS file\n\n;// ./code/es-modules/Series/Sunburst/SunburstPoint.js\n/* *\n *\n *  This module implements sunburst charts in Highcharts.\n *\n *  (c) 2016-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { series: { prototype: { pointClass: Point } }, seriesTypes: { treemap: { prototype: { pointClass: SunburstPoint_TreemapPoint } } } } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default());\n\nconst { correctFloat: SunburstPoint_correctFloat, extend: SunburstPoint_extend, pInt } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Class\n *\n * */\nclass SunburstPoint extends SunburstPoint_TreemapPoint {\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    getDataLabelPath(label) {\n        const renderer = this.series.chart.renderer, shapeArgs = this.shapeExisting, r = shapeArgs.r + pInt(label.options?.distance || 0);\n        let start = shapeArgs.start, end = shapeArgs.end;\n        const angle = start + (end - start) / 2; // Arc middle value\n        let upperHalf = angle < 0 &&\n            angle > -Math.PI ||\n            angle > Math.PI, moreThanHalf;\n        // Check if point is a full circle\n        if (start === -Math.PI / 2 &&\n            SunburstPoint_correctFloat(end) === SunburstPoint_correctFloat(Math.PI * 1.5)) {\n            start = -Math.PI + Math.PI / 360;\n            end = -Math.PI / 360;\n            upperHalf = true;\n        }\n        // Check if dataLabels should be render in the upper half of the circle\n        if (end - start > Math.PI) {\n            upperHalf = false;\n            moreThanHalf = true;\n            // Close to the full circle, add some padding so that the SVG\n            // renderer treats it as separate points (#18884).\n            if ((end - start) > 2 * Math.PI - 0.01) {\n                start += 0.01;\n                end -= 0.01;\n            }\n        }\n        if (this.dataLabelPath) {\n            this.dataLabelPath = this.dataLabelPath.destroy();\n        }\n        // All times\n        this.dataLabelPath = renderer\n            .arc({\n            open: true,\n            longArc: moreThanHalf ? 1 : 0\n        })\n            .attr({\n            start: (upperHalf ? start : end),\n            end: (upperHalf ? end : start),\n            clockwise: +upperHalf,\n            x: shapeArgs.x,\n            y: shapeArgs.y,\n            r: (r + shapeArgs.innerR) / 2\n        })\n            .add(renderer.defs);\n        return this.dataLabelPath;\n    }\n    isValid() {\n        return true;\n    }\n}\nSunburstPoint_extend(SunburstPoint.prototype, {\n    getClassName: Point.prototype.getClassName,\n    haloPath: Point.prototype.haloPath,\n    setState: Point.prototype.setState\n});\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Sunburst_SunburstPoint = (SunburstPoint);\n\n;// ./code/es-modules/Series/Sunburst/SunburstUtilities.js\n/* *\n *\n *  This module implements sunburst charts in Highcharts.\n *\n *  (c) 2016-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { seriesTypes: { treemap: SunburstUtilities_TreemapSeries } } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default());\n\nconst { isNumber: SunburstUtilities_isNumber, isObject: SunburstUtilities_isObject, merge: SunburstUtilities_merge } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n * @function calculateLevelSizes\n *\n * @param {Object} levelOptions\n * Map of level to its options.\n *\n * @param {Highcharts.Dictionary<number>} params\n * Object containing number parameters `innerRadius` and `outerRadius`.\n *\n * @return {Highcharts.SunburstSeriesLevelsOptions|undefined}\n * Returns the modified options, or undefined.\n */\nfunction calculateLevelSizes(levelOptions, params) {\n    const p = SunburstUtilities_isObject(params) ? params : {};\n    let result, totalWeight = 0, diffRadius, levels, levelsNotIncluded, remainingSize, from, to;\n    if (SunburstUtilities_isObject(levelOptions)) {\n        result = SunburstUtilities_merge({}, levelOptions);\n        from = SunburstUtilities_isNumber(p.from) ? p.from : 0;\n        to = SunburstUtilities_isNumber(p.to) ? p.to : 0;\n        levels = range(from, to);\n        levelsNotIncluded = Object.keys(result).filter((key) => (levels.indexOf(+key) === -1));\n        diffRadius = remainingSize = SunburstUtilities_isNumber(p.diffRadius) ?\n            p.diffRadius : 0;\n        // Convert percentage to pixels.\n        // Calculate the remaining size to divide between \"weight\" levels.\n        // Calculate total weight to use in conversion from weight to\n        // pixels.\n        for (const level of levels) {\n            const options = result[level], unit = options.levelSize.unit, value = options.levelSize.value;\n            if (unit === 'weight') {\n                totalWeight += value;\n            }\n            else if (unit === 'percentage') {\n                options.levelSize = {\n                    unit: 'pixels',\n                    value: (value / 100) * diffRadius\n                };\n                remainingSize -= options.levelSize.value;\n            }\n            else if (unit === 'pixels') {\n                remainingSize -= value;\n            }\n        }\n        // Convert weight to pixels.\n        for (const level of levels) {\n            const options = result[level];\n            if (options.levelSize.unit === 'weight') {\n                const weight = options.levelSize.value;\n                result[level].levelSize = {\n                    unit: 'pixels',\n                    value: (weight / totalWeight) * remainingSize\n                };\n            }\n        }\n        // Set all levels not included in interval [from,to] to have 0\n        // pixels.\n        for (const level of levelsNotIncluded) {\n            result[level].levelSize = {\n                value: 0,\n                unit: 'pixels'\n            };\n        }\n    }\n    return result;\n}\n/**\n * @private\n */\nfunction getLevelFromAndTo({ level, height }) {\n    //  Never displays level below 1\n    const from = level > 0 ? level : 1;\n    const to = level + height;\n    return { from, to };\n}\n/**\n * TODO introduce step, which should default to 1.\n * @private\n */\nfunction range(from, to) {\n    const result = [];\n    if (SunburstUtilities_isNumber(from) && SunburstUtilities_isNumber(to) && from <= to) {\n        for (let i = from; i <= to; i++) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst SunburstUtilities = {\n    calculateLevelSizes,\n    getLevelFromAndTo,\n    range,\n    recursive: SunburstUtilities_TreemapSeries.prototype.utils.recursive\n};\n/* harmony default export */ const Sunburst_SunburstUtilities = (SunburstUtilities);\n\n;// ./code/es-modules/Series/Sunburst/SunburstNode.js\n/* *\n *\n *  (c) 2010-2024 Pawel Lysy\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n/* *\n *\n *  Class\n *\n * */\nclass SunburstNode extends Treemap_TreemapNode {\n}\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Sunburst_SunburstNode = (SunburstNode);\n\n;// ./code/es-modules/Series/Sunburst/SunburstSeriesDefaults.js\n/* *\n *\n *  This module implements sunburst charts in Highcharts.\n *\n *  (c) 2016-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A Sunburst displays hierarchical data, where a level in the hierarchy is\n * represented by a circle. The center represents the root node of the tree.\n * The visualization bears a resemblance to both treemap and pie charts.\n *\n * @sample highcharts/demo/sunburst\n *         Sunburst chart\n *\n * @extends      plotOptions.pie\n * @excluding    allAreas, clip, colorAxis, colorKey, compare, compareBase,\n *               dataGrouping, depth, dragDrop, endAngle, gapSize, gapUnit,\n *               ignoreHiddenPoint, innerSize, joinBy, legendType, linecap,\n *               minSize, navigatorOptions, pointRange\n * @product      highcharts\n * @requires     modules/sunburst\n * @optionparent plotOptions.sunburst\n *\n * @private\n */\nconst SunburstSeriesDefaults = {\n    /**\n     * Options for the breadcrumbs, the navigation at the top leading the\n     * way up through the traversed levels.\n     *\n     * @since 10.0.0\n     * @product   highcharts\n     * @extends   navigation.breadcrumbs\n     * @apioption plotOptions.sunburst.breadcrumbs\n     */\n    /**\n     * Set options on specific levels. Takes precedence over series options,\n     * but not point options.\n     *\n     * @sample highcharts/demo/sunburst\n     *         Sunburst chart\n     *\n     * @type      {Array<*>}\n     * @apioption plotOptions.sunburst.levels\n     */\n    /**\n     * Can set a `borderColor` on all points which lies on the same level.\n     *\n     * @type      {Highcharts.ColorString}\n     * @apioption plotOptions.sunburst.levels.borderColor\n     */\n    /**\n     * Can set a `borderWidth` on all points which lies on the same level.\n     *\n     * @type      {number}\n     * @apioption plotOptions.sunburst.levels.borderWidth\n     */\n    /**\n     * Can set a `borderDashStyle` on all points which lies on the same\n     * level.\n     *\n     * @type      {Highcharts.DashStyleValue}\n     * @apioption plotOptions.sunburst.levels.borderDashStyle\n     */\n    /**\n     * Can set a `color` on all points which lies on the same level.\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @apioption plotOptions.sunburst.levels.color\n     */\n    /**\n     * Determines whether the chart should receive one color per point based\n     * on this level.\n     *\n     * @type      {boolean}\n     * @apioption plotOptions.sunburst.levels.colorByPoint\n     */\n    /**\n     * Can set a `colorVariation` on all points which lies on the same\n     * level.\n     *\n     * @apioption plotOptions.sunburst.levels.colorVariation\n     */\n    /**\n     * The key of a color variation. Currently supports `brightness` only.\n     *\n     * @type      {string}\n     * @apioption plotOptions.sunburst.levels.colorVariation.key\n     */\n    /**\n     * The ending value of a color variation. The last sibling will receive\n     * this value.\n     *\n     * @type      {number}\n     * @apioption plotOptions.sunburst.levels.colorVariation.to\n     */\n    /**\n     * Can set `dataLabels` on all points which lies on the same level.\n     *\n     * @extends   plotOptions.sunburst.dataLabels\n     * @apioption plotOptions.sunburst.levels.dataLabels\n     */\n    /**\n     * Decides which level takes effect from the options set in the levels\n     * object.\n     *\n     * @sample highcharts/demo/sunburst\n     *         Sunburst chart\n     *\n     * @type      {number}\n     * @apioption plotOptions.sunburst.levels.level\n     */\n    /**\n     * Can set a `levelSize` on all points which lies on the same level.\n     *\n     * @type      {Object}\n     * @apioption plotOptions.sunburst.levels.levelSize\n     */\n    /**\n     * When enabled the user can click on a point which is a parent and\n     * zoom in on its children. Deprecated and replaced by\n     * [allowTraversingTree](#plotOptions.sunburst.allowTraversingTree).\n     *\n     * @deprecated\n     * @type      {boolean}\n     * @default   false\n     * @since     6.0.0\n     * @product   highcharts\n     * @apioption plotOptions.sunburst.allowDrillToNode\n     */\n    /**\n     * When enabled the user can click on a point which is a parent and\n     * zoom in on its children.\n     *\n     * @type      {boolean}\n     * @default   false\n     * @since     7.0.3\n     * @product   highcharts\n     * @apioption plotOptions.sunburst.allowTraversingTree\n     */\n    /**\n     * The center of the sunburst chart relative to the plot area. Can be\n     * percentages or pixel values.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-center/\n     *         Centered at 100, 100\n     *\n     * @type    {Array<number|string>}\n     * @default [\"50%\", \"50%\"]\n     * @product highcharts\n     *\n     * @private\n     */\n    center: ['50%', '50%'],\n    /**\n     * @product highcharts\n     *\n     * @private\n     */\n    clip: false,\n    colorByPoint: false,\n    /**\n     * Disable inherited opacity from Treemap series.\n     *\n     * @ignore-option\n     *\n     * @private\n     */\n    opacity: 1,\n    /**\n     * @declare Highcharts.SeriesSunburstDataLabelsOptionsObject\n     *\n     * @private\n     */\n    dataLabels: {\n        allowOverlap: true,\n        defer: true,\n        /**\n         * Decides how the data label will be rotated relative to the\n         * perimeter of the sunburst. Valid values are `circular`, `auto`,\n         * `parallel` and `perpendicular`. When `circular`, the best fit\n         * will be computed for the point, so that the label is curved\n         * around the center when there is room for it, otherwise\n         * perpendicular. The legacy `auto` option works similar to\n         * `circular`, but instead of curving the labels they are tangent to\n         * the perimeter.\n         *\n         * The `rotation` option takes precedence over `rotationMode`.\n         *\n         * @type       {string}\n         * @sample {highcharts}\n         *         highcharts/plotoptions/sunburst-datalabels-rotationmode-circular/\n         *         Circular rotation mode\n         * @validvalue [\"auto\", \"perpendicular\", \"parallel\", \"circular\"]\n         * @since      6.0.0\n         */\n        rotationMode: 'circular',\n        style: {\n            /** @internal */\n            textOverflow: 'ellipsis'\n        }\n    },\n    /**\n     * Which point to use as a root in the visualization.\n     *\n     * @type {string}\n     *\n     * @private\n     */\n    rootId: void 0,\n    /**\n     * Used together with the levels and `allowDrillToNode` options. When\n     * set to false the first level visible when drilling is considered\n     * to be level one. Otherwise the level will be the same as the tree\n     * structure.\n     *\n     * @private\n     */\n    levelIsConstant: true,\n    /**\n     * Determines the width of the ring per level.\n     *\n     * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n     *         Sunburst with various sizes per level\n     *\n     * @since 6.0.5\n     *\n     * @private\n     */\n    levelSize: {\n        /**\n         * The value used for calculating the width of the ring. Its' affect\n         * is determined by `levelSize.unit`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n         *         Sunburst with various sizes per level\n         */\n        value: 1,\n        /**\n         * How to interpret `levelSize.value`.\n         *\n         * - `percentage` gives a width relative to result of outer radius\n         *   minus inner radius.\n         *\n         * - `pixels` gives the ring a fixed width in pixels.\n         *\n         * - `weight` takes the remaining width after percentage and pixels,\n         *   and distributes it across all \"weighted\" levels. The value\n         *   relative to the sum of all weights determines the width.\n         *\n         * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n         *         Sunburst with various sizes per level\n         *\n         * @validvalue [\"percentage\", \"pixels\", \"weight\"]\n         */\n        unit: 'weight'\n    },\n    /**\n     * Options for the button appearing when traversing down in a sunburst.\n     * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n     *\n     * @extends   plotOptions.treemap.traverseUpButton\n     * @since     6.0.0\n     * @deprecated\n     * @apioption plotOptions.sunburst.traverseUpButton\n     *\n     */\n    /**\n     * If a point is sliced, moved out from the center, how many pixels\n     * should it be moved?.\n     *\n     * @sample highcharts/plotoptions/sunburst-sliced\n     *         Sliced sunburst\n     *\n     * @since 6.0.4\n     *\n     * @private\n     */\n    slicedOffset: 10\n};\n/**\n * A `sunburst` series. If the [type](#series.sunburst.type) option is\n * not specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.sunburst\n * @excluding dataParser, dataURL, stack, dataSorting, boostThreshold,\n *            boostBlending\n * @product   highcharts\n * @requires  modules/sunburst\n * @apioption series.sunburst\n */\n/**\n * @type      {Array<number|null|*>}\n * @extends   series.treemap.data\n * @excluding x, y\n * @product   highcharts\n * @apioption series.sunburst.data\n */\n/**\n * @type      {Highcharts.SeriesSunburstDataLabelsOptionsObject|Array<Highcharts.SeriesSunburstDataLabelsOptionsObject>}\n * @product   highcharts\n * @apioption series.sunburst.data.dataLabels\n */\n/**\n * The value of the point, resulting in a relative area of the point\n * in the sunburst.\n *\n * @type      {number|null}\n * @since     6.0.0\n * @product   highcharts\n * @apioption series.sunburst.data.value\n */\n/**\n * Use this option to build a tree structure. The value should be the id of the\n * point which is the parent. If no points has a matching id, or this option is\n * undefined, then the parent will be set to the root.\n *\n * @type      {string}\n * @since     6.0.0\n * @product   highcharts\n * @apioption series.sunburst.data.parent\n */\n/**\n  * Whether to display a slice offset from the center. When a sunburst point is\n  * sliced, its children are also offset.\n  *\n  * @sample highcharts/plotoptions/sunburst-sliced\n  *         Sliced sunburst\n  *\n  * @type      {boolean}\n  * @default   false\n  * @since     6.0.4\n  * @product   highcharts\n  * @apioption series.sunburst.data.sliced\n  */\n''; // Detach doclets above\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Sunburst_SunburstSeriesDefaults = (SunburstSeriesDefaults);\n\n;// ./code/es-modules/Extensions/TextPath.js\n/* *\n *\n *  Highcharts module with textPath functionality.\n *\n *  (c) 2009-2024 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\nconst { deg2rad: TextPath_deg2rad } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\nconst { addEvent: TextPath_addEvent, merge: TextPath_merge, uniqueKey, defined: TextPath_defined, extend: TextPath_extend } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n/**\n * Set a text path for a `text` or `label` element, allowing the text to\n * flow along a path.\n *\n * In order to unset the path for an existing element, call `setTextPath`\n * with `{ enabled: false }` as the second argument.\n *\n * Text path support is not bundled into `highcharts.js`, and requires the\n * `modules/textpath.js` file. However, it is included in the script files of\n * those series types that use it by default\n *\n * @sample highcharts/members/renderer-textpath/ Text path demonstrated\n *\n * @function Highcharts.SVGElement#setTextPath\n *\n * @param {Highcharts.SVGElement|undefined} path\n *        Path to follow. If undefined, it allows changing options for the\n *        existing path.\n *\n * @param {Highcharts.DataLabelsTextPathOptionsObject} textPathOptions\n *        Options.\n *\n * @return {Highcharts.SVGElement} Returns the SVGElement for chaining.\n */\nfunction setTextPath(path, textPathOptions) {\n    // Defaults\n    textPathOptions = TextPath_merge(true, {\n        enabled: true,\n        attributes: {\n            dy: -5,\n            startOffset: '50%',\n            textAnchor: 'middle'\n        }\n    }, textPathOptions);\n    const url = this.renderer.url, textWrapper = this.text || this, textPath = textWrapper.textPath, { attributes, enabled } = textPathOptions;\n    path = path || (textPath && textPath.path);\n    // Remove previously added event\n    if (textPath) {\n        textPath.undo();\n    }\n    if (path && enabled) {\n        const undo = TextPath_addEvent(textWrapper, 'afterModifyTree', (e) => {\n            if (path && enabled) {\n                // Set ID for the path\n                let textPathId = path.attr('id');\n                if (!textPathId) {\n                    path.attr('id', textPathId = uniqueKey());\n                }\n                // Set attributes for the <text>\n                const textAttribs = {\n                    // `dx`/`dy` options must by set on <text> (parent), the\n                    // rest should be set on <textPath>\n                    x: 0,\n                    y: 0\n                };\n                if (TextPath_defined(attributes.dx)) {\n                    textAttribs.dx = attributes.dx;\n                    delete attributes.dx;\n                }\n                if (TextPath_defined(attributes.dy)) {\n                    textAttribs.dy = attributes.dy;\n                    delete attributes.dy;\n                }\n                textWrapper.attr(textAttribs);\n                // Handle label properties\n                this.attr({ transform: '' });\n                if (this.box) {\n                    this.box = this.box.destroy();\n                }\n                // Wrap the nodes in a textPath\n                const children = e.nodes.slice(0);\n                e.nodes.length = 0;\n                e.nodes[0] = {\n                    tagName: 'textPath',\n                    attributes: TextPath_extend(attributes, {\n                        'text-anchor': attributes.textAnchor,\n                        href: `${url}#${textPathId}`\n                    }),\n                    children\n                };\n            }\n        });\n        // Set the reference\n        textWrapper.textPath = { path, undo };\n    }\n    else {\n        textWrapper.attr({ dx: 0, dy: 0 });\n        delete textWrapper.textPath;\n    }\n    if (this.added) {\n        // Rebuild text after added\n        textWrapper.textCache = '';\n        this.renderer.buildText(textWrapper);\n    }\n    return this;\n}\n/**\n * Attach a polygon to a bounding box if the element contains a textPath.\n *\n * @function Highcharts.SVGElement#setPolygon\n *\n * @param {any} event\n *        An event containing a bounding box object\n *\n * @return {Highcharts.BBoxObject} Returns the bounding box object.\n */\nfunction setPolygon(event) {\n    const bBox = event.bBox, tp = this.element?.querySelector('textPath');\n    if (tp) {\n        const polygon = [], { b, h } = this.renderer.fontMetrics(this.element), descender = h - b, lineCleanerRegex = new RegExp('(<tspan>|' +\n            '<tspan(?!\\\\sclass=\"highcharts-br\")[^>]*>|' +\n            '<\\\\/tspan>)', 'g'), lines = tp\n            .innerHTML\n            .replace(lineCleanerRegex, '')\n            .split(/<tspan class=\"highcharts-br\"[^>]*>/), numOfLines = lines.length;\n        // Calculate top and bottom coordinates for\n        // either the start or the end of a single\n        // character, and append it to the polygon.\n        const appendTopAndBottom = (charIndex, positionOfChar) => {\n            const { x, y } = positionOfChar, rotation = (tp.getRotationOfChar(charIndex) - 90) * TextPath_deg2rad, cosRot = Math.cos(rotation), sinRot = Math.sin(rotation);\n            return [\n                [\n                    x - descender * cosRot,\n                    y - descender * sinRot\n                ],\n                [\n                    x + b * cosRot,\n                    y + b * sinRot\n                ]\n            ];\n        };\n        for (let i = 0, lineIndex = 0; lineIndex < numOfLines; lineIndex++) {\n            const line = lines[lineIndex], lineLen = line.length;\n            for (let lineCharIndex = 0; lineCharIndex < lineLen; lineCharIndex += 5) {\n                try {\n                    const srcCharIndex = (i +\n                        lineCharIndex +\n                        lineIndex), [lower, upper] = appendTopAndBottom(srcCharIndex, tp.getStartPositionOfChar(srcCharIndex));\n                    if (lineCharIndex === 0) {\n                        polygon.push(upper);\n                        polygon.push(lower);\n                    }\n                    else {\n                        if (lineIndex === 0) {\n                            polygon.unshift(upper);\n                        }\n                        if (lineIndex === numOfLines - 1) {\n                            polygon.push(lower);\n                        }\n                    }\n                }\n                catch (e) {\n                    // Safari fails on getStartPositionOfChar even if the\n                    // character is within the `textContent.length`\n                    break;\n                }\n            }\n            i += lineLen - 1;\n            try {\n                const srcCharIndex = i + lineIndex, charPos = tp.getEndPositionOfChar(srcCharIndex), [lower, upper] = appendTopAndBottom(srcCharIndex, charPos);\n                polygon.unshift(upper);\n                polygon.unshift(lower);\n            }\n            catch (e) {\n                // Safari fails on getStartPositionOfChar even if the character\n                // is within the `textContent.length`\n                break;\n            }\n        }\n        // Close it\n        if (polygon.length) {\n            polygon.push(polygon[0].slice());\n        }\n        bBox.polygon = polygon;\n    }\n    return bBox;\n}\n/**\n * Draw text along a textPath for a dataLabel.\n *\n * @function Highcharts.SVGElement#setTextPath\n *\n * @param {any} event\n *        An event containing label options\n *\n * @return {void}\n */\nfunction drawTextPath(event) {\n    const labelOptions = event.labelOptions, point = event.point, textPathOptions = (labelOptions[point.formatPrefix + 'TextPath'] ||\n        labelOptions.textPath);\n    if (textPathOptions && !labelOptions.useHTML) {\n        this.setTextPath(point.getDataLabelPath?.(this) || point.graphic, textPathOptions);\n        if (point.dataLabelPath &&\n            !textPathOptions.enabled) {\n            // Clean the DOM\n            point.dataLabelPath = (point.dataLabelPath.destroy());\n        }\n    }\n}\nfunction compose(SVGElementClass) {\n    TextPath_addEvent(SVGElementClass, 'afterGetBBox', setPolygon);\n    TextPath_addEvent(SVGElementClass, 'beforeAddingDataLabel', drawTextPath);\n    const svgElementProto = SVGElementClass.prototype;\n    if (!svgElementProto.setTextPath) {\n        svgElementProto.setTextPath = setTextPath;\n    }\n}\nconst TextPath = {\n    compose\n};\n/* harmony default export */ const Extensions_TextPath = (TextPath);\n\n;// ./code/es-modules/Series/Sunburst/SunburstSeries.js\n/* *\n *\n *  This module implements sunburst charts in Highcharts.\n *\n *  (c) 2016-2024 Highsoft AS\n *\n *  Authors: Jon Arild Nygard\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\nconst { getCenter, getStartAndEndRadians } = Series_CenteredUtilities;\n\nconst { noop: SunburstSeries_noop } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n\nconst { column: SunburstSeries_ColumnSeries, treemap: SunburstSeries_TreemapSeries } = (highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default()).seriesTypes;\n\n\n\nconst { getColor: SunburstSeries_getColor, getLevelOptions: SunburstSeries_getLevelOptions, setTreeValues: SunburstSeries_setTreeValues, updateRootId: SunburstSeries_updateRootId } = Series_TreeUtilities;\n\n\n\nconst { defined: SunburstSeries_defined, error: SunburstSeries_error, extend: SunburstSeries_extend, fireEvent: SunburstSeries_fireEvent, isNumber: SunburstSeries_isNumber, isObject: SunburstSeries_isObject, isString: SunburstSeries_isString, merge: SunburstSeries_merge, splat } = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\n\n\nExtensions_TextPath.compose((highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_default()));\n/* *\n *\n *  Constants\n *\n * */\nconst rad2deg = 180 / Math.PI;\n/* *\n *\n *  Functions\n *\n * */\n/** @private */\nfunction isBoolean(x) {\n    return typeof x === 'boolean';\n}\n/**\n * Find a set of coordinates given a start coordinates, an angle, and a\n * distance.\n *\n * @private\n * @function getEndPoint\n *\n * @param {number} x\n *        Start coordinate x\n *\n * @param {number} y\n *        Start coordinate y\n *\n * @param {number} angle\n *        Angle in radians\n *\n * @param {number} distance\n *        Distance from start to end coordinates\n *\n * @return {Highcharts.SVGAttributes}\n *         Returns the end coordinates, x and y.\n */\nconst getEndPoint = function getEndPoint(x, y, angle, distance) {\n    return {\n        x: x + (Math.cos(angle) * distance),\n        y: y + (Math.sin(angle) * distance)\n    };\n};\n/** @private */\nfunction getDlOptions(params) {\n    // Set options to new object to avoid problems with scope\n    const point = params.point, shape = SunburstSeries_isObject(params.shapeArgs) ? params.shapeArgs : {}, optionsPoint = (SunburstSeries_isObject(params.optionsPoint) ?\n        params.optionsPoint.dataLabels :\n        {}), \n    // The splat was used because levels dataLabels\n    // options doesn't work as an array\n    optionsLevel = splat(SunburstSeries_isObject(params.level) ?\n        params.level.dataLabels :\n        {})[0], options = SunburstSeries_merge({\n        style: {}\n    }, optionsLevel, optionsPoint), { innerArcLength = 0, outerArcLength = 0 } = point;\n    let rotationRad, rotation, rotationMode = options.rotationMode;\n    if (!SunburstSeries_isNumber(options.rotation)) {\n        if (rotationMode === 'auto' || rotationMode === 'circular') {\n            if (options.useHTML &&\n                rotationMode === 'circular') {\n                // Change rotationMode to 'auto' to avoid using text paths\n                // for HTML labels, see #18953\n                rotationMode = 'auto';\n            }\n            if (innerArcLength < 1 &&\n                outerArcLength > shape.radius) {\n                rotationRad = 0;\n                // Trigger setTextPath function to get textOutline etc.\n                if (point.dataLabelPath && rotationMode === 'circular') {\n                    options.textPath = {\n                        enabled: true\n                    };\n                }\n            }\n            else if (innerArcLength > 1 &&\n                outerArcLength > 1.5 * shape.radius) {\n                if (rotationMode === 'circular') {\n                    options.textPath = {\n                        enabled: true,\n                        attributes: {\n                            dy: 5\n                        }\n                    };\n                }\n                else {\n                    rotationMode = 'parallel';\n                }\n            }\n            else {\n                // Trigger the destroyTextPath function\n                if (point.dataLabel?.textPath &&\n                    rotationMode === 'circular') {\n                    options.textPath = {\n                        enabled: false\n                    };\n                }\n                rotationMode = 'perpendicular';\n            }\n        }\n        if (rotationMode !== 'auto' && rotationMode !== 'circular') {\n            if (point.dataLabel && point.dataLabel.textPath) {\n                options.textPath = {\n                    enabled: false\n                };\n            }\n            rotationRad = (shape.end -\n                (shape.end - shape.start) / 2);\n        }\n        if (rotationMode === 'parallel') {\n            options.style.width = Math.min(shape.radius * 2.5, (outerArcLength + innerArcLength) / 2);\n        }\n        else {\n            if (!SunburstSeries_defined(options.style.width) &&\n                shape.radius) {\n                options.style.width = point.node.level === 1 ?\n                    2 * shape.radius :\n                    shape.radius;\n            }\n        }\n        if (rotationMode === 'perpendicular') {\n            // 16 is the inferred line height. We don't know the real line\n            // yet because the label is not rendered. A better approach for this\n            // would be to hide the label from the `alignDataLabel` function\n            // when the actual line height is known.\n            if (outerArcLength < 16) {\n                options.style.width = 1;\n            }\n            else {\n                options.style.lineClamp = Math.floor(innerArcLength / 16) || 1;\n            }\n        }\n        // Apply padding (#8515)\n        options.style.width = Math.max(options.style.width - 2 * (options.padding || 0), 1);\n        rotation = (rotationRad * rad2deg) % 180;\n        if (rotationMode === 'parallel') {\n            rotation -= 90;\n        }\n        // Prevent text from rotating upside down\n        if (rotation > 90) {\n            rotation -= 180;\n        }\n        else if (rotation < -90) {\n            rotation += 180;\n        }\n        options.rotation = rotation;\n    }\n    if (options.textPath) {\n        if (point.shapeExisting.innerR === 0 &&\n            options.textPath.enabled) {\n            // Enable rotation to render text\n            options.rotation = 0;\n            // Center dataLabel - disable textPath\n            options.textPath.enabled = false;\n            // Setting width and padding\n            options.style.width = Math.max((point.shapeExisting.r * 2) -\n                2 * (options.padding || 0), 1);\n        }\n        else if (point.dlOptions &&\n            point.dlOptions.textPath &&\n            !point.dlOptions.textPath.enabled &&\n            (rotationMode === 'circular')) {\n            // Bring dataLabel back if was a center dataLabel\n            options.textPath.enabled = true;\n        }\n        if (options.textPath.enabled) {\n            // Enable rotation to render text\n            options.rotation = 0;\n            // Setting width and padding\n            options.style.width = Math.max((point.outerArcLength +\n                point.innerArcLength) / 2 -\n                2 * (options.padding || 0), 1);\n            options.style.whiteSpace = 'nowrap';\n        }\n    }\n    return options;\n}\n/** @private */\nfunction getAnimation(shape, params) {\n    const point = params.point, radians = params.radians, innerR = params.innerR, idRoot = params.idRoot, idPreviousRoot = params.idPreviousRoot, shapeExisting = params.shapeExisting, shapeRoot = params.shapeRoot, shapePreviousRoot = params.shapePreviousRoot, visible = params.visible;\n    let from = {}, to = {\n        end: shape.end,\n        start: shape.start,\n        innerR: shape.innerR,\n        r: shape.r,\n        x: shape.x,\n        y: shape.y\n    };\n    if (visible) {\n        // Animate points in\n        if (!point.graphic && shapePreviousRoot) {\n            if (idRoot === point.id) {\n                from = {\n                    start: radians.start,\n                    end: radians.end\n                };\n            }\n            else {\n                from = (shapePreviousRoot.end <= shape.start) ? {\n                    start: radians.end,\n                    end: radians.end\n                } : {\n                    start: radians.start,\n                    end: radians.start\n                };\n            }\n            // Animate from center and outwards.\n            from.innerR = from.r = innerR;\n        }\n    }\n    else {\n        // Animate points out\n        if (point.graphic) {\n            if (idPreviousRoot === point.id) {\n                to = {\n                    innerR: innerR,\n                    r: innerR\n                };\n            }\n            else if (shapeRoot) {\n                to = (shapeRoot.end <= shapeExisting.start) ?\n                    {\n                        innerR: innerR,\n                        r: innerR,\n                        start: radians.end,\n                        end: radians.end\n                    } : {\n                    innerR: innerR,\n                    r: innerR,\n                    start: radians.start,\n                    end: radians.start\n                };\n            }\n        }\n    }\n    return {\n        from: from,\n        to: to\n    };\n}\n/** @private */\nfunction getDrillId(point, idRoot, mapIdToNode) {\n    const node = point.node;\n    let drillId, nodeRoot;\n    if (!node.isLeaf) {\n        // When it is the root node, the drillId should be set to parent.\n        if (idRoot === point.id) {\n            nodeRoot = mapIdToNode[idRoot];\n            drillId = nodeRoot.parent;\n        }\n        else {\n            drillId = point.id;\n        }\n    }\n    return drillId;\n}\n/** @private */\nfunction cbSetTreeValuesBefore(node, options) {\n    const mapIdToNode = options.mapIdToNode, parent = node.parent, nodeParent = parent ? mapIdToNode[parent] : void 0, series = options.series, chart = series.chart, points = series.points, point = points[node.i], colors = series.options.colors || chart && chart.options.colors, colorInfo = SunburstSeries_getColor(node, {\n        colors: colors,\n        colorIndex: series.colorIndex,\n        index: options.index,\n        mapOptionsToLevel: options.mapOptionsToLevel,\n        parentColor: nodeParent && nodeParent.color,\n        parentColorIndex: nodeParent && nodeParent.colorIndex,\n        series: options.series,\n        siblings: options.siblings\n    });\n    node.color = colorInfo.color;\n    node.colorIndex = colorInfo.colorIndex;\n    if (point) {\n        point.color = node.color;\n        point.colorIndex = node.colorIndex;\n        // Set slicing on node, but avoid slicing the top node.\n        node.sliced = (node.id !== options.idRoot) ? point.sliced : false;\n    }\n    return node;\n}\n/* *\n *\n *  Class\n *\n * */\nclass SunburstSeries extends SunburstSeries_TreemapSeries {\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    alignDataLabel(point, dataLabel, labelOptions) {\n        if (labelOptions.textPath && labelOptions.textPath.enabled) {\n            return;\n        }\n        return super.alignDataLabel.apply(this, arguments);\n    }\n    /**\n     * Animate the slices in. Similar to the animation of polar charts.\n     * @private\n     */\n    animate(init) {\n        const chart = this.chart, center = [\n            chart.plotWidth / 2,\n            chart.plotHeight / 2\n        ], plotLeft = chart.plotLeft, plotTop = chart.plotTop, group = this.group;\n        let attribs;\n        // Initialize the animation\n        if (init) {\n            // Scale down the group and place it in the center\n            attribs = {\n                translateX: center[0] + plotLeft,\n                translateY: center[1] + plotTop,\n                scaleX: 0.001, // #1499\n                scaleY: 0.001,\n                rotation: 10,\n                opacity: 0.01\n            };\n            group.attr(attribs);\n            // Run the animation\n        }\n        else {\n            attribs = {\n                translateX: plotLeft,\n                translateY: plotTop,\n                scaleX: 1,\n                scaleY: 1,\n                rotation: 0,\n                opacity: 1\n            };\n            group.animate(attribs, this.options.animation);\n        }\n    }\n    drawPoints() {\n        const series = this, mapOptionsToLevel = series.mapOptionsToLevel, shapeRoot = series.shapeRoot, group = series.group, hasRendered = series.hasRendered, idRoot = series.rootNode, idPreviousRoot = series.idPreviousRoot, nodeMap = series.nodeMap, nodePreviousRoot = nodeMap[idPreviousRoot], shapePreviousRoot = nodePreviousRoot && nodePreviousRoot.shapeArgs, points = series.points, radians = series.startAndEndRadians, chart = series.chart, optionsChart = chart && chart.options && chart.options.chart || {}, animation = (isBoolean(optionsChart.animation) ?\n            optionsChart.animation :\n            true), positions = series.center, center = {\n            x: positions[0],\n            y: positions[1]\n        }, innerR = positions[3] / 2, renderer = series.chart.renderer, hackDataLabelAnimation = !!(animation &&\n            hasRendered &&\n            idRoot !== idPreviousRoot &&\n            series.dataLabelsGroup);\n        let animateLabels, animateLabelsCalled = false, addedHack = false;\n        if (hackDataLabelAnimation) {\n            series.dataLabelsGroup.attr({ opacity: 0 });\n            animateLabels = function () {\n                const s = series;\n                animateLabelsCalled = true;\n                if (s.dataLabelsGroup) {\n                    s.dataLabelsGroup.animate({\n                        opacity: 1,\n                        visibility: 'inherit'\n                    });\n                }\n            };\n        }\n        for (const point of points) {\n            const node = point.node, level = mapOptionsToLevel[node.level], shapeExisting = (point.shapeExisting || {}), shape = node.shapeArgs || {}, visible = !!(node.visible && node.shapeArgs);\n            let animationInfo, onComplete;\n            // Border radius requires the border-radius.js module. Adding it\n            // here because the SunburstSeries is a mess and I can't find the\n            // regular shapeArgs. Usually shapeArgs are created in the series'\n            // `translate` function and then passed directly on to the renderer\n            // in the `drawPoints` function.\n            shape.borderRadius = series.options.borderRadius;\n            if (hasRendered && animation) {\n                animationInfo = getAnimation(shape, {\n                    center: center,\n                    point: point,\n                    radians: radians,\n                    innerR: innerR,\n                    idRoot: idRoot,\n                    idPreviousRoot: idPreviousRoot,\n                    shapeExisting: shapeExisting,\n                    shapeRoot: shapeRoot,\n                    shapePreviousRoot: shapePreviousRoot,\n                    visible: visible\n                });\n            }\n            else {\n                // When animation is disabled, attr is called from animation.\n                animationInfo = {\n                    to: shape,\n                    from: {}\n                };\n            }\n            SunburstSeries_extend(point, {\n                shapeExisting: shape, // Store for use in animation\n                tooltipPos: [shape.plotX, shape.plotY],\n                drillId: getDrillId(point, idRoot, nodeMap),\n                name: '' + (point.name || point.id || point.index),\n                plotX: shape.plotX, // Used for data label position\n                plotY: shape.plotY, // Used for data label position\n                value: node.val,\n                isInside: visible,\n                isNull: !visible // Used for dataLabels & point.draw\n            });\n            point.dlOptions = getDlOptions({\n                point: point,\n                level: level,\n                optionsPoint: point.options,\n                shapeArgs: shape\n            });\n            if (!addedHack && visible) {\n                addedHack = true;\n                onComplete = animateLabels;\n            }\n            point.draw({\n                animatableAttribs: animationInfo.to,\n                attribs: SunburstSeries_extend(animationInfo.from, (!chart.styledMode && series.pointAttribs(point, (point.selected && 'select')))),\n                onComplete: onComplete,\n                group: group,\n                renderer: renderer,\n                shapeType: 'arc',\n                shapeArgs: shape\n            });\n        }\n        // Draw data labels after points\n        // TODO draw labels one by one to avoid additional looping\n        if (hackDataLabelAnimation && addedHack) {\n            series.hasRendered = false;\n            series.options.dataLabels.defer = true;\n            SunburstSeries_ColumnSeries.prototype.drawDataLabels.call(series);\n            series.hasRendered = true;\n            // If animateLabels is called before labels were hidden, then call\n            // it again.\n            if (animateLabelsCalled) {\n                animateLabels();\n            }\n        }\n        else {\n            SunburstSeries_ColumnSeries.prototype.drawDataLabels.call(series);\n        }\n        series.idPreviousRoot = idRoot;\n    }\n    /**\n     * The layout algorithm for the levels.\n     * @private\n     */\n    layoutAlgorithm(parent, children, options) {\n        let startAngle = parent.start;\n        const range = parent.end - startAngle, total = parent.val, x = parent.x, y = parent.y, radius = ((options &&\n            SunburstSeries_isObject(options.levelSize) &&\n            SunburstSeries_isNumber(options.levelSize.value)) ?\n            options.levelSize.value :\n            0), innerRadius = parent.r, outerRadius = innerRadius + radius, slicedOffset = options && SunburstSeries_isNumber(options.slicedOffset) ?\n            options.slicedOffset :\n            0;\n        return (children || []).reduce((arr, child) => {\n            const percentage = (1 / total) * child.val, radians = percentage * range, radiansCenter = startAngle + (radians / 2), offsetPosition = getEndPoint(x, y, radiansCenter, slicedOffset), values = {\n                x: child.sliced ? offsetPosition.x : x,\n                y: child.sliced ? offsetPosition.y : y,\n                innerR: innerRadius,\n                r: outerRadius,\n                radius: radius,\n                start: startAngle,\n                end: startAngle + radians\n            };\n            arr.push(values);\n            startAngle = values.end;\n            return arr;\n        }, []);\n    }\n    setRootNode(id, redraw, eventArguments) {\n        const series = this;\n        if ( // If the target node is the only one at level 1, skip it. (#18658)\n        series.nodeMap[id].level === 1 &&\n            series.nodeList\n                .filter((node) => node.level === 1)\n                .length === 1) {\n            if (series.idPreviousRoot === '') {\n                return;\n            }\n            id = '';\n        }\n        super.setRootNode(id, redraw, eventArguments);\n    }\n    /**\n     * Set the shape arguments on the nodes. Recursive from root down.\n     * @private\n     */\n    setShapeArgs(parent, parentValues, mapOptionsToLevel) {\n        const level = parent.level + 1, options = mapOptionsToLevel[level], \n        // Collect all children which should be included\n        children = parent.children.filter(function (n) {\n            return n.visible;\n        }), twoPi = 6.28; // Two times Pi.\n        let childrenValues = [];\n        childrenValues = this.layoutAlgorithm(parentValues, children, options);\n        let i = -1;\n        for (const child of children) {\n            const values = childrenValues[++i], angle = values.start + ((values.end - values.start) / 2), radius = values.innerR + ((values.r - values.innerR) / 2), radians = (values.end - values.start), isCircle = (values.innerR === 0 && radians > twoPi), center = (isCircle ?\n                { x: values.x, y: values.y } :\n                getEndPoint(values.x, values.y, angle, radius)), val = (child.val ?\n                (child.childrenTotal > child.val ?\n                    child.childrenTotal :\n                    child.val) :\n                child.childrenTotal);\n            // The inner arc length is a convenience for data label filters.\n            if (this.points[child.i]) {\n                this.points[child.i].innerArcLength = radians * values.innerR;\n                this.points[child.i].outerArcLength = radians * values.r;\n            }\n            child.shapeArgs = SunburstSeries_merge(values, {\n                plotX: center.x,\n                plotY: center.y\n            });\n            child.values = SunburstSeries_merge(values, {\n                val: val\n            });\n            // If node has children, then call method recursively\n            if (child.children.length) {\n                this.setShapeArgs(child, child.values, mapOptionsToLevel);\n            }\n        }\n    }\n    translate() {\n        const series = this, options = series.options, positions = series.center = series.getCenter(), radians = series.startAndEndRadians = getStartAndEndRadians(options.startAngle, options.endAngle), innerRadius = positions[3] / 2, outerRadius = positions[2] / 2, diffRadius = outerRadius - innerRadius, \n        // NOTE: updateRootId modifies series.\n        rootId = SunburstSeries_updateRootId(series);\n        let mapIdToNode = series.nodeMap, mapOptionsToLevel, nodeRoot = mapIdToNode && mapIdToNode[rootId], nodeIds = {};\n        series.shapeRoot = nodeRoot && nodeRoot.shapeArgs;\n        series.generatePoints();\n        SunburstSeries_fireEvent(series, 'afterTranslate');\n        // @todo Only if series.isDirtyData is true\n        const tree = series.tree = series.getTree();\n        // Render traverseUpButton, after series.nodeMap i calculated.\n        mapIdToNode = series.nodeMap;\n        nodeRoot = mapIdToNode[rootId];\n        const idTop = SunburstSeries_isString(nodeRoot.parent) ? nodeRoot.parent : '', nodeTop = mapIdToNode[idTop], { from, to } = Sunburst_SunburstUtilities.getLevelFromAndTo(nodeRoot);\n        mapOptionsToLevel = SunburstSeries_getLevelOptions({\n            from,\n            levels: series.options.levels,\n            to,\n            defaults: {\n                colorByPoint: options.colorByPoint,\n                dataLabels: options.dataLabels,\n                levelIsConstant: options.levelIsConstant,\n                levelSize: options.levelSize,\n                slicedOffset: options.slicedOffset\n            }\n        });\n        // NOTE consider doing calculateLevelSizes in a callback to\n        // getLevelOptions\n        mapOptionsToLevel = Sunburst_SunburstUtilities.calculateLevelSizes(mapOptionsToLevel, {\n            diffRadius,\n            from,\n            to\n        });\n        // TODO Try to combine setTreeValues & setColorRecursive to avoid\n        //  unnecessary looping.\n        SunburstSeries_setTreeValues(tree, {\n            before: cbSetTreeValuesBefore,\n            idRoot: rootId,\n            levelIsConstant: options.levelIsConstant,\n            mapOptionsToLevel: mapOptionsToLevel,\n            mapIdToNode: mapIdToNode,\n            points: series.points,\n            series: series\n        });\n        const values = mapIdToNode[''].shapeArgs = {\n            end: radians.end,\n            r: innerRadius,\n            start: radians.start,\n            val: nodeRoot.val,\n            x: positions[0],\n            y: positions[1]\n        };\n        this.setShapeArgs(nodeTop, values, mapOptionsToLevel);\n        // Set mapOptionsToLevel on series for use in drawPoints.\n        series.mapOptionsToLevel = mapOptionsToLevel;\n        // #10669 - verify if all nodes have unique ids\n        for (const point of series.points) {\n            if (nodeIds[point.id]) {\n                SunburstSeries_error(31, false, series.chart);\n            }\n            // Map\n            nodeIds[point.id] = true;\n        }\n        // Reset object\n        nodeIds = {};\n    }\n}\n/* *\n *\n *  Static Properties\n *\n * */\nSunburstSeries.defaultOptions = SunburstSeries_merge(SunburstSeries_TreemapSeries.defaultOptions, Sunburst_SunburstSeriesDefaults);\nSunburstSeries_extend(SunburstSeries.prototype, {\n    axisTypes: [],\n    drawDataLabels: SunburstSeries_noop, // `drawDataLabels` is called in `drawPoints`\n    getCenter: getCenter,\n    isCartesian: false,\n    // Mark that the sunburst is supported by the series on point feature.\n    onPointSupported: true,\n    pointAttribs: SunburstSeries_ColumnSeries.prototype.pointAttribs,\n    pointClass: Sunburst_SunburstPoint,\n    NodeClass: Sunburst_SunburstNode,\n    utils: Sunburst_SunburstUtilities\n});\nhighcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default().registerSeriesType('sunburst', SunburstSeries);\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const Sunburst_SunburstSeries = ((/* unused pure expression or super */ null && (SunburstSeries)));\n\n;// ./code/es-modules/masters/modules/sunburst.src.js\n\n\n\n\n\n\nconst G = (highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default());\nG.Breadcrumbs = G.Breadcrumbs || Breadcrumbs_Breadcrumbs;\nG.Breadcrumbs.compose(G.Chart, G.defaultOptions);\n/* harmony default export */ const sunburst_src = ((highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default()));\n\n__webpack_exports__ = __webpack_exports__[\"default\"];\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});"],"names":["root","factory","exports","module","require","define","amd","__WEBPACK_EXTERNAL_MODULE__944__","__WEBPACK_EXTERNAL_MODULE__984__","__WEBPACK_EXTERNAL_MODULE__620__","__WEBPACK_EXTERNAL_MODULE__512__","__WEBPACK_EXTERNAL_MODULE__28__","__WEBPACK_EXTERNAL_MODULE__820__","ColorMapComposition","TreemapUtilities","CenteredUtilities","__webpack_modules__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","__webpack_exports__","sunburst_src","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_","highcharts_commonjs_highcharts_commonjs2_highcharts_root_Highcharts_default","Breadcrumbs_BreadcrumbsDefaults","lang","mainBreadcrumb","options","buttonTheme","fill","height","padding","zIndex","states","select","style","color","buttonSpacing","floating","format","relativeTo","rtl","position","align","verticalAlign","x","y","separator","text","fontSize","showFullPath","useHTML","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_","highcharts_Templating_commonjs_highcharts_Templating_commonjs2_highcharts_Templating_root_Highcharts_Templating_default","composed","addEvent","defined","extend","fireEvent","isString","merge","objectEach","pick","pushUnique","onChartAfterShowResetZoom","chart","breadcrumbs","bbox","resetZoomButton","getBBox","breadcrumbsOptions","alignBreadcrumbsGroup","width","onChartDestroy","destroy","onChartGetMargins","level","breadcrumbsHeight","marginBottom","yOffset","plotTop","onChartRedraw","redraw","onChartSelection","event","resetSelection","Breadcrumbs","compose","ChartClass","highchartsDefaultOptions","constructor","userOptions","elementList","isDirty","list","chartOptions","drilldown","drillUpButton","defaultOptions","navigation","updateProperties","setList","setLevel","length","getLevel","getButtonText","breadcrumb","textFormat","defaultText","drillUpText","returnText","formatter","levelOptions","render","group","renderer","g","addClass","attr","add","renderFullPathButtons","renderSingleButton","destroySingleButton","resetElementListState","updateListElements","destroyListElements","posX","previousBreadcrumb","renderButton","updateSingleButton","xOffset","positionOptions","alignTo","bBox","additionalSpace","newPositions","posY","button","e","callDefaultEvent","buttonEvents","events","click","newLevel","styledMode","renderSeparator","separatorOptions","label","css","update","currentBreadcrumb","force","element","updated","rtlFactor","updateXPosition","spacing","adjustToRTL","translate","i","iEnd","isLast","setState","highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_","highcharts_Color_commonjs_highcharts_Color_commonjs2_highcharts_Color_root_Highcharts_Color_default","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_","highcharts_SeriesRegistry_commonjs_highcharts_SeriesRegistry_commonjs2_highcharts_SeriesRegistry_root_Highcharts_SeriesRegistry_default","highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_","highcharts_SVGElement_commonjs_highcharts_SVGElement_commonjs2_highcharts_SVGElement_root_Highcharts_SVGElement_default","column","columnProto","seriesTypes","ColorMapComposition_addEvent","ColorMapComposition_defined","onPointAfterSetState","series","point","moveToTopOnHover","graphic","stateMarkerGraphic","pointerEvents","parentGroup","state","id","href","url","visibility","pointMembers","dataLabelOnNull","isValid","value","Infinity","isNaN","seriesMembers","colorKey","axisTypes","parallelArrays","pointArrayMap","trackerGroups","colorAttribs","ret","colorProp","pointAttribs","SeriesClass","pointClass","Series_ColorMapComposition","Treemap_TreemapAlgorithmGroup","h","w","p","plot","direction","startDirection","total","nW","lW","nH","lH","elArr","lP","nR","lR","aspectRatio","Math","max","addElement","el","push","reset","Treemap_TreemapNode","childrenTotal","visible","init","children","parent","Series_DrawPointUtilities","draw","params","animatableAttribs","onComplete","animation","hasRendered","attribs","getClassName","shouldDraw","shapeType","image","imageUrl","shapeArgs","animate","isNew","keys","pie","PiePoint","scatter","ScatterPoint","TreemapPoint_extend","isNumber","TreemapPoint_pick","TreemapPoint","arguments","className","node","nodeMap","rootNode","isLeaf","interactByLeaf","allowTraversingTree","Boolean","apply","plotY","setVisible","TreemapSeriesDefaults_isString","TreemapSeriesDefaults","animationLimit","borderRadius","showInLegend","marker","colorByPoint","dataLabels","defer","enabled","name","inside","tooltip","headerFormat","pointFormat","ignoreHiddenPoint","layoutAlgorithm","layoutStartingDirection","alternateStartingDirection","levelIsConstant","traverseUpButton","borderColor","borderWidth","opacity","hover","brightness","heatmap","halo","shadow","legendSymbol","traverseToLeaf","recursive","item","func","context","next","Treemap_TreemapUtilities","TreeUtilities_extend","isArray","TreeUtilities_isNumber","isObject","TreeUtilities_merge","TreeUtilities_pick","relativeLength","Series_TreeUtilities","getColor","colorIndexByPoint","colorIndex","index","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","points","chartOptionsChart","colorCount","variateColor","colorVariation","parse","brighten","to","getLevelOptions","defaults","converted","from","levels","result","reduce","getNodeWidth","columnCount","nodeDistance","nodeWidth","plotSizeX","test","fraction","parseFloat","nDistance","Number","setTreeValues","tree","before","idRoot","nodeRoot","mapIdToNode","optionsPoint","levelDynamic","forEach","child","newOptions","val","updateRootId","rootId","TreemapSeries_composed","noop","ColumnSeries","ScatterSeries","TreemapSeries_getColor","TreemapSeries_getLevelOptions","TreemapSeries_updateRootId","TreemapSeries_addEvent","correctFloat","crisp","TreemapSeries_defined","error","TreemapSeries_extend","TreemapSeries_fireEvent","TreemapSeries_isArray","TreemapSeries_isObject","TreemapSeries_isString","TreemapSeries_merge","TreemapSeries_pick","TreemapSeries_pushUnique","stableSort","treemapAxisDefaultValues","onSeriesAfterBindAxes","treeAxis","xAxis","yAxis","is","endOnTick","gridLineWidth","lineWidth","min","minPadding","maxPadding","startOnTick","title","tickPositions","setOptions","TreemapSeries","algorithmCalcPoints","directionChange","last","childrenArea","end","pX","pY","pW","pH","gW","gH","keep","algorithmFill","pTot","algorithmLowAspectRatio","alignDataLabel","dataLabel","labelOptions","textOverflow","textWidth","calculateChildrenAreas","area","algorithm","alternate","filter","ignore","childrenValues","values","pointValues","axisRatio","axisMax","createList","currentLevelNumber","target","newRootId","extraNodes","reverse","drawDataLabels","hasDataLabels","lineClamp","floor","dlOptions","drawPoints","withinAnimationLimit","pointCount","groupKey","hasGraphic","shouldAnimate","isInside","r","selected","survive","drillId","drillToByLeaf","drillToByGroup","nodeParent","drillToNode","setRootNode","drillUp","trigger","getExtremes","dataMin","dataMax","colorValueData","valueMin","valueMax","getListOfParents","data","existingIds","arr","ids","listOfParents","prev","curr","indexOf","getTree","allIds","map","parentList","nodeList","buildTree","NodeClass","parentNode","hasData","dataTable","rowCount","setOptionsEvent","allowDrillToNode","eventsToUnbind","onClickDrillToNode","keepEventsForUpdate","drillUpsNumber","stateOptions","borderDashStyle","setOpacity","cursor","setColorRecursive","colorInfo","setPointValues","getStrokeWidth","strokeWidth","x1","toPixels","x2","y1","y2","abs","plotX","eventArguments","previousRootId","args","idPreviousRoot","inactiveOtherPoints","b","sortIndex","sliceAndDice","squarified","strip","stripes","seriesArea","concat","len","colorAxis","setExtremes","setScale","buildKDTree","directTouch","getExtremesFromAll","getSymbol","optionalAxis","utils","registerSeriesType","highcharts_Series_commonjs_highcharts_Series_commonjs2_highcharts_Series_root_Highcharts_Series_","highcharts_Series_commonjs_highcharts_Series_commonjs2_highcharts_Series_root_Highcharts_Series_default","deg2rad","CenteredUtilities_fireEvent","CenteredUtilities_isNumber","CenteredUtilities_pick","CenteredUtilities_relativeLength","getCenter","slicingRoom","slicedOffset","plotWidth","plotHeight","centerOption","center","smallestSize","thickness","handleSlicingRoom","size","innerSize","positions","angular","getStartAndEndRadians","start","startAngle","endAngle","Series_CenteredUtilities","Point","treemap","SunburstPoint_TreemapPoint","SunburstPoint_correctFloat","SunburstPoint_extend","pInt","SunburstPoint","getDataLabelPath","shapeExisting","distance","angle","upperHalf","PI","moreThanHalf","dataLabelPath","arc","open","longArc","clockwise","innerR","defs","haloPath","SunburstUtilities_TreemapSeries","SunburstUtilities_isNumber","SunburstUtilities_isObject","SunburstUtilities_merge","range","SunburstUtilities","calculateLevelSizes","totalWeight","diffRadius","levelsNotIncluded","remainingSize","unit","levelSize","weight","getLevelFromAndTo","TextPath_deg2rad","TextPath_addEvent","TextPath_merge","uniqueKey","TextPath_defined","TextPath_extend","setTextPath","path","textPathOptions","attributes","dy","startOffset","textAnchor","textWrapper","textPath","undo","textPathId","textAttribs","dx","transform","box","nodes","slice","tagName","added","textCache","buildText","setPolygon","tp","querySelector","polygon","fontMetrics","descender","lineCleanerRegex","RegExp","lines","innerHTML","replace","split","numOfLines","appendTopAndBottom","charIndex","positionOfChar","rotation","getRotationOfChar","cosRot","cos","sinRot","sin","lineIndex","lineLen","line","lineCharIndex","srcCharIndex","lower","upper","getStartPositionOfChar","unshift","charPos","getEndPositionOfChar","drawTextPath","formatPrefix","SunburstSeries_noop","SunburstSeries_ColumnSeries","SunburstSeries_TreemapSeries","SunburstSeries_getColor","SunburstSeries_getLevelOptions","SunburstSeries_setTreeValues","SunburstSeries_updateRootId","SunburstSeries_defined","SunburstSeries_error","SunburstSeries_extend","SunburstSeries_fireEvent","SunburstSeries_isNumber","SunburstSeries_isObject","SunburstSeries_isString","SunburstSeries_merge","splat","Extensions_TextPath","SVGElementClass","svgElementProto","rad2deg","getEndPoint","cbSetTreeValuesBefore","sliced","SunburstSeries","plotLeft","translateX","translateY","scaleX","scaleY","shapeRoot","nodePreviousRoot","shapePreviousRoot","radians","startAndEndRadians","optionsChart","isBoolean","hackDataLabelAnimation","dataLabelsGroup","animateLabels","animateLabelsCalled","addedHack","s","animationInfo","shape","getAnimation","tooltipPos","getDrillId","isNull","getDlOptions","innerArcLength","outerArcLength","rotationRad","rotationMode","radius","whiteSpace","innerRadius","outerRadius","percentage","offsetPosition","setShapeArgs","parentValues","isCircle","nodeIds","generatePoints","idTop","nodeTop","Sunburst_SunburstUtilities","clip","allowOverlap","isCartesian","onPointSupported","G","Chart"],"mappings":"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"}